{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"课程\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/17/%E7%AE%97%E6%B3%95/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2022/10/17/%E7%AE%97%E6%B3%95/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "title": "Dijkstra单源最短路径算法",
            "date_published": "2022-10-17T13:51:03.000Z",
            "content_html": "<h2 id=\"单源最短路径问题\"><a class=\"markdownIt-Anchor\" href=\"#单源最短路径问题\">#</a> 单源最短路径问题</h2>\n<h3 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h3>\n<p>给定一个带权有向图 G=（V,E），其中每条边的权是一个实数。另外，还给定 V 中的一个顶点，称为源。要计算从源到其他所有各顶点的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOUMlODAlRTclOUYlQUQlRTglQjclQUYlRTUlQkUlODQmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">最短路径</span>长度。这里的长度就是指路上各边权之和。这个问题通常称为单源最短路径问题。</p>\n<h3 id=\"dijkstra算法简介\"><a class=\"markdownIt-Anchor\" href=\"#dijkstra算法简介\">#</a> Dijkstra 算法简介</h3>\n<p>迪杰斯特拉算法 (Dijkstra)，是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQjQlQUElRTUlQkYlODMlRTclQUUlOTclRTYlQjMlOTUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">贪心算法</span>的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>\n<h3 id=\"算法分析\"><a class=\"markdownIt-Anchor\" href=\"#算法分析\">#</a> 算法分析</h3>\n<p>伪代码描述</p>\n<p><img data-src=\"./../../image/6-1666018070046-21.png\" alt=\"6\"></p>\n<h3 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<ul>\n<li>数据结构：邻接表，数组队列，HashMap（此处没有采用，而是直接遍历查询）</li>\n<li>数据描述：\n<ul>\n<li>邻接表点类\n<ul>\n<li>包含：名称，被指向的权重，链接指针</li>\n<li>作用：邻接表的每个初始点</li>\n</ul>\n</li>\n<li>顶点表结构\n<ul>\n<li>包含：名称，该点的前一个顶点，距离起点距离</li>\n<li>作用：用于生成树的每个节点</li>\n</ul>\n</li>\n<li>邻接表\n<ul>\n<li>对于初始边集和顶点集数据的集合</li>\n<li>初始化时需要将边集的两个顶点都加入指针域</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"源代码ts版\"><a class=\"markdownIt-Anchor\" href=\"#源代码ts版\">#</a> 源代码（TS 版）</h3>\n<p>本算法源码解决的问题是无向图的单源最短路径问题。有向图的类似，只是在生成邻接表时，只生成一个方向。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//邻接表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T;<span class=\"comment\">//顶点名称</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//指向该顶点的边的权重</span></span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//下一个邻接顶点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顶点表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Vertex</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T,<span class=\"comment\">//顶点名称索引</span></span><br><span class=\"line\">    <span class=\"attr\">prePoint</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//前一个点</span></span><br><span class=\"line\">    <span class=\"attr\">distance</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//距离起点的距离</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">table</span>: <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">len</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> = vertexSet.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">table</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>(vertexSet, edgeSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">init</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据顶点集新建邻接表第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">name</span>: vertexSet[i], <span class=\"attr\">weight</span>: <span class=\"number\">0</span>, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据边集进行关系链接</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; edgeSet.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据边集的顺序阿加入</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">1</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">            <span class=\"comment\">//在加入相反方向的边</span></span><br><span class=\"line\">            temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">0</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;<span class=\"comment\">//找到下个点</span></span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getTable</span>(): <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">toString</span>(): <span class=\"title class_\">String</span> &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"title class_\">String</span> = <span class=\"string\">&#x27;&#x27;</span>;   </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> k = <span class=\"number\">1</span>;<span class=\"comment\">//右边括号个数</span></span><br><span class=\"line\">            str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">next</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + temp.<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + temp.<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">                temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;null&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27; &#125;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单元最短路径问题（输入顶点s的下标索引）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getMinDistance</span>(<span class=\"params\">s: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顶点优先队列初始化为空</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将每个顶点入栈，初始化优先级</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i&lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            queue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>: i, <span class=\"attr\">prePoint</span>: <span class=\"literal\">null</span>, <span class=\"attr\">distance</span>: <span class=\"title class_\">Infinity</span>&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将起点的优先级更新</span></span><br><span class=\"line\">        queue[s].<span class=\"property\">distance</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：删除优先级最小的元素：即删除distance最小的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">deleteMin</span> = (<span class=\"params\">queue: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Array is null !&#x27;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// let min = queue.reduce((pre, next) =&gt; &#123; return pre.distance &lt; next.distance ? pre : next&#125;)</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> min = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(queue[min].<span class=\"property\">distance</span> &gt; queue[i].<span class=\"property\">distance</span>) min = i;</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">return</span> queue.<span class=\"title function_\">splice</span>(min, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：树上节点和删除的节点取并集</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">unionTree</span> = (<span class=\"params\">tree: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, u: Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tree.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tree[i].<span class=\"property\">name</span> === u.<span class=\"property\">name</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//如果是相同点就不合并</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tree.<span class=\"title function_\">push</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：findIndex</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">findIndex</span> = (<span class=\"params\">arr: <span class=\"built_in\">Array</span>&lt;Point&lt;<span class=\"built_in\">number</span>&gt;&gt; | <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, target: Point&lt;<span class=\"built_in\">number</span>&gt; | Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[i].<span class=\"property\">name</span> === target.<span class=\"property\">name</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">//初始树</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">tree</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        tree.<span class=\"title function_\">push</span>(queue[s]);<span class=\"comment\">//初始树包含一个给定的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> u = <span class=\"title function_\">deleteMin</span>(queue);<span class=\"comment\">//删除优先级最小的元素</span></span><br><span class=\"line\">            <span class=\"title function_\">unionTree</span>(tree, u);<span class=\"comment\">//取并集</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//ps:此处应该用HashMap进行索引和name隐射</span></span><br><span class=\"line\">            <span class=\"comment\">//不在tree中，也每个和u相邻的顶点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"title function_\">findIndex</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">table</span>, u);<span class=\"comment\">//地址映射：从余下顶点到邻接表</span></span><br><span class=\"line\">            <span class=\"comment\">// let index = u.name - 1;</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[index];<span class=\"comment\">//邻接表中的u点</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> t = temp.<span class=\"property\">next</span></span><br><span class=\"line\">                index = <span class=\"title function_\">findIndex</span>(queue, t);<span class=\"comment\">//地址映射：从邻接表到余下顶点</span></span><br><span class=\"line\">                <span class=\"comment\">// index = t.name - 1;</span></span><br><span class=\"line\">                <span class=\"comment\">// console.log(index, queue[index]);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index !== -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//不在树上</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(u.<span class=\"property\">distance</span> + temp.<span class=\"property\">weight</span> &lt; queue[index].<span class=\"property\">distance</span>)&#123;</span><br><span class=\"line\">                        queue[index].<span class=\"property\">distance</span> = u.<span class=\"property\">distance</span> + t.<span class=\"property\">weight</span>;<span class=\"comment\">//刷新最短距离</span></span><br><span class=\"line\">                        queue[index].<span class=\"property\">prePoint</span> = t;<span class=\"comment\">//刷新前驱节点</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                </span><br><span class=\"line\">                temp = t;<span class=\"comment\">//遍历所有的相邻点</span></span><br><span class=\"line\">            &#125;                 </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//并上最后一个</span></span><br><span class=\"line\">        <span class=\"title function_\">unionTree</span>(tree, queue[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">vertexSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];<span class=\"comment\">//顶点集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">edgeSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]]; <span class=\"comment\">// 顶点 顶点 权值  //边集</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> <span class=\"title class_\">Table</span>(vertexSet, edgeSet);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">getMinDistance</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Dijkstra"
            ]
        },
        {
            "id": "http://example.com/2022/09/15/%E7%AE%97%E6%B3%95/algorithm-01-%E7%AE%97%E6%B3%95%E5%A2%9E%E9%95%BF/",
            "url": "http://example.com/2022/09/15/%E7%AE%97%E6%B3%95/algorithm-01-%E7%AE%97%E6%B3%95%E5%A2%9E%E9%95%BF/",
            "title": "algorithm-01-算法增长",
            "date_published": "2022-09-15T06:03:03.000Z",
            "content_html": "<h3 id=\"渐进符号\"><a class=\"markdownIt-Anchor\" href=\"#渐进符号\">#</a> 渐进符号</h3>\n<ul>\n<li>作用：衡量算法增长效率</li>\n<li>类型：\n<ul>\n<li>O：上届</li>\n<li>seta：下界</li>\n<li>欧姆：等价</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分治思想\"><a class=\"markdownIt-Anchor\" href=\"#分治思想\">#</a> 分治思想</h3>\n<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h2>\n<ul>\n<li>概念：</li>\n<li>例子：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"title function_\">F</span>(n-<span class=\"number\">1</span>) * n</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>常见递归类型\n<ul>\n<li>减一算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">T</span>(n-<span class=\"number\">1</span>) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure>\n</li>\n<li>减常因子算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">T</span>(n/b) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure>\n</li>\n<li>分治算法\n<ul>\n<li>将大规模的问题分解成小问题逐一击破</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">aT</span>(n/b) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/09/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%9A%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%92%8C%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/",
            "url": "http://example.com/2022/09/09/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%9A%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%92%8C%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/",
            "title": "古典密码学：凯撒密码和维吉尼亚密码",
            "date_published": "2022-09-09T13:23:29.000Z",
            "content_html": "<h2 id=\"凯撒密码和维吉尼亚密码\"><a class=\"markdownIt-Anchor\" href=\"#凯撒密码和维吉尼亚密码\">#</a> 凯撒密码和维吉尼亚密码</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODElQkElRTYlOTIlOTIlRTUlQUYlODYlRTclQTAlODEvNDkwNTI4NA==\">凯撒密码</span>是一种比较简单的古典密码，仅仅将明文的每个字符偏移相同的偏移量，从而达到加密的目的。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkIlQjQlRTUlOTAlODklRTUlQjAlQkMlRTQlQkElOUElRTUlQUYlODYlRTclQTAlODE/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">维吉尼亚密码</span>则是在凯撒密码的基础上演变而来，是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>\n<h2 id=\"本人创建的两种编译器\"><a class=\"markdownIt-Anchor\" href=\"#本人创建的两种编译器\">#</a> 本人创建的两种编译器</h2>\n<p>本人采用 Java 语法编写算法，使用了两种思路来分别编写两种编译器类：CaesarCodeGenerator、VirginiaCodeGenerator</p>\n<ul>\n<li>\n<p>CaesarCodeGenerator 类将明文集合和密文集合定义在内，明文集合固定，而密文集合通过传入的密匙和明文集合生成。加密和解密算法分别将明密文集合一一对应即可达到编译码的功能。</p>\n<ul>\n<li>明密文集合定义如下：</li>\n</ul>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">MING</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<span class=\"comment\">//明文集合</span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">MI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.MI = <span class=\"built_in\">this</span>.MING.toUpperCase();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">(<span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>();</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.setMI(k);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>VirginiaCodeGenerator 类中加密解密直接完成，没有定义明密文集合或者表完成。</p>\n<ul>\n<li>\n<p>加密算法：对每个明文遍历，获取当前的密匙，然后根据公式（p 为明文，k 为密匙，c 为密文，都为 0~25 的数字） <strong><strong>(p + k) = c</strong></strong> 获取密文，对空格明文跳过。</p>\n</li>\n<li>\n<p>解密算法：对每个密文遍历，获取当前的密匙，然后根据公式（p 为明文，k 为密匙，c 为密文，都为 0~25 的数字） <strong><strong>(c - k) = p</strong></strong> 获取密文。</p>\n</li>\n<li>\n<p>维吉尼亚加密算法如下：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_enc</span><span class=\"params\">(String m, String k)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">    m = m.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">        c += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;A&#x27;</span> + key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;A&#x27;</span>);<span class=\"comment\">//求出密文字母</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后附完整代码</p>\n<h2 id=\"破译难度\"><a class=\"markdownIt-Anchor\" href=\"#破译难度\">#</a> 破译难度</h2>\n<p>毫无疑问维吉尼亚密码破译是极度困难的，而凯撒密码相对容易。此处不介绍方法，详情见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01pdGNoZWxsX0Rvbm92YW4vYXJ0aWNsZS9kZXRhaWxzLzEyMzg5ODIxNT9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NjI3MjUzNzMxNjgwMDE4NjUyOTcwOSUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC5wYyUyNTVGYWxsLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY2MjcyNTM3MzE2ODAwMTg2NTI5NzA5JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+Zmlyc3RfcmFua19lY3BtX3YxfnJhbmtfdjMxX2VjcG0tMS0xMjM4OTgyMTUtbnVsbC1udWxsLjE0MiU1RXY0NyU1RWNvbnRyb2xfMSwyMDElNUV2MyU1RWNvbnRyb2xfMSZhbXA7dXRtX3Rlcm09JUU3JUJCJUI0JUU1JTkwJTg5JUU1JUIwJUJDJUU0JUJBJTlBJUU3JUJDJTk2JUU4JUFGJTkxJUU3JUEwJTgxJUU1JTk5JUE4JmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==\">维吉尼亚密码破译</span>。</p>\n<h2 id=\"完整代码\"><a class=\"markdownIt-Anchor\" href=\"#完整代码\">#</a> 完整代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、实现凯撒加密和解密：caesar_enc(m, k)和caesar_dec(c, k)。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * m：明文字符串，要求只能是字母（可以有空格，加密时删除，不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * c：密文字符串，要求只能是字母（不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * k：加密和解密密钥，允许为整数或字母（按0~25对应）</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值：加密返回密文（大写），解密返回明文（小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、实现维吉尼亚加密和解密：vigenere_enc(m, k)和vigenere_dec(c, k)</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * m：明文字符串，要求只能是字母（可以有空格，加密时删除，不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * c：密文字符串，要求只能是字母（不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * k：加密和解密密钥，只能为字母</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值：加密返回密文（大写），解密返回明文（小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * 注：必须调用凯撒加密和解密。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 凯撒编译码器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CaesarCodeGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">MING</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<span class=\"comment\">//明文集合</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">MI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.MI = <span class=\"built_in\">this</span>.MING.toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">(<span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setMI(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取密文集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMI</span><span class=\"params\">(<span class=\"type\">int</span> k)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isDigit(k) ? k - <span class=\"string\">&#x27;0&#x27;</span> : Character.isUpperCase(k) ? k - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">1</span> : k - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; MI.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MI.length() - i &lt;= key) &#123;</span><br><span class=\"line\">                str = MI.charAt(i) + str;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str += MI.charAt(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.MI = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m 明文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">caesar_enc</span><span class=\"params\">(String m, <span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">        m = m.toLowerCase();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            c += MI.charAt(MING.indexOf(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 明文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">caesar_dec</span><span class=\"params\">(String c, <span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        c = c.toUpperCase();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: c.toCharArray()) &#123;</span><br><span class=\"line\">            m += MING.charAt(MI.indexOf(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维吉尼亚编译码器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VirginiaCodeGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m 明文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_enc</span><span class=\"params\">(String m, String k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">        m = m.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">            c += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;A&#x27;</span> + key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;A&#x27;</span>);<span class=\"comment\">//求出密文字母</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 明文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_dec</span><span class=\"params\">(String c, String k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        c = c.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: c.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">            m += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;a&#x27;</span> - key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;a&#x27;</span>);<span class=\"comment\">//求出明文字母</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runCaesar</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入明文（字符串：字母和空格组成）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;\\n请输入密匙（数字或者字母）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> in.nextLine().charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CaesarCodeGenerator</span> <span class=\"variable\">caesar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CaesarCodeGenerator</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n明文集合：&quot;</span> + caesar.MING);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文集合：&quot;</span> + caesar.MI);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原文：&quot;</span> + m);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encStr</span> <span class=\"operator\">=</span> caesar.caesar_enc(m, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文：&quot;</span> + encStr);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">decStr</span> <span class=\"operator\">=</span> caesar.caesar_dec(encStr, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;译文：&quot;</span> + decStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runVirginia</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入明文（字符串：字母和空格组成）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;\\n请输入密匙（单词）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> in.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">VirginiaCodeGenerator</span> <span class=\"variable\">virginia</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VirginiaCodeGenerator</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原文：&quot;</span> + m);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encStr</span> <span class=\"operator\">=</span> virginia.vigenere_enc(m, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文：&quot;</span> + encStr);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">decStr</span> <span class=\"operator\">=</span> virginia.vigenere_dec(encStr, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;译文：&quot;</span> + decStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--\\t古典编译器\\t--\\n&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;选择编译器：&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\t1，凯撒编译码器&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\t2，维吉尼亚编译码器&quot;</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请选择：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        in.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: runCaesar(); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: runVirginia(); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;输入错误！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这其实是我密码学的一个平时作业。算法不唯一，凯撒编译器或者维吉尼亚编译器都可以互换算法，此处就只完成其中一种。有问题请指正～</p>\n",
            "tags": [
                "密码学",
                "凯斯密码",
                "维吉尼亚密码"
            ]
        }
    ]
}