{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"javascript\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/22/js%E9%AB%98%E7%BA%A7/11-%E6%89%8B%E5%86%99new%EF%BC%8Ccall%EF%BC%8Capply%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://example.com/2022/10/22/js%E9%AB%98%E7%BA%A7/11-%E6%89%8B%E5%86%99new%EF%BC%8Ccall%EF%BC%8Capply%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "手写new，call，apply的实现",
            "date_published": "2022-10-22T05:20:48.000Z",
            "content_html": "<h3 id=\"手写new的实现\"><a class=\"markdownIt-Anchor\" href=\"#手写new的实现\">#</a> 手写 new 的实现</h3>\n<ul>\n<li>第一版</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_new</span>(<span class=\"params\">Ctor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Ctor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">    <span class=\"title class_\">Ctor</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二版</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_new</span>(<span class=\"params\">Ctor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否是构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title class_\">Ctor</span>.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;prototype&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Ctor is not a constructor&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据Ctor的原型创建一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Ctor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//显示绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"title class_\">Ctor</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//判断绑定结果不是null且对象和函数同时可能存在的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result !== <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> result == <span class=\"string\">&#x27;object&#x27;</span> || <span class=\"keyword\">typeof</span> result == <span class=\"string\">&#x27;function&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>调用：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Pig</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name &#125;</span><br><span class=\"line\"><span class=\"title function_\">_new</span>(<span class=\"title class_\">Pig</span>, <span class=\"string\">&quot;peiqi&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写call的实现\"><a class=\"markdownIt-Anchor\" href=\"#手写call的实现\">#</a> 手写 call 的实现</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收实参有三种方案:</span></span><br><span class=\"line\">    <span class=\"comment\">//    1)通过形参</span></span><br><span class=\"line\">    <span class=\"comment\">//    2)通过...args</span></span><br><span class=\"line\">    <span class=\"comment\">//    3)通过arguments  伪数组  接收了所有的实以</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mycall</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">        context = context ? <span class=\"title class_\">Object</span>(context) : <span class=\"variable language_\">window</span></span><br><span class=\"line\">        context.<span class=\"property\">f</span> = <span class=\"variable language_\">this</span>; <span class=\"comment\">// f也是指向fn函数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = context.<span class=\"title function_\">f</span>(...args);  <span class=\"comment\">// 隐式绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> context.<span class=\"property\">f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载到Function的原型对象上</span></span><br><span class=\"line\">    <span class=\"comment\">// 就意味着所有的函数都可以调用mycall</span></span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = mycall;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = fn.<span class=\"title function_\">mycall</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br></pre></td></tr></table></figure>\n<h3 id=\"手写apply的实现\"><a class=\"markdownIt-Anchor\" href=\"#手写apply的实现\">#</a> 手写 apply 的实现</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mlapply</span>(<span class=\"params\">context, args</span>) &#123;</span><br><span class=\"line\">        context = context ? <span class=\"title class_\">Object</span>(context) : <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">        context.<span class=\"property\">f</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = context.<span class=\"title function_\">f</span>(...args);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> context.<span class=\"property\">f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mlapply</span> = mlapply;</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/10-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9AJS%E4%B8%AD%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8Ba%E7%AD%89%E4%BA%8E1%E6%88%96%E8%80%852%E6%88%96%E8%80%853/",
            "url": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/10-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9AJS%E4%B8%AD%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8Ba%E7%AD%89%E4%BA%8E1%E6%88%96%E8%80%852%E6%88%96%E8%80%853/",
            "title": "面试题：JS中在什么情况下a等于1或者2或者3",
            "date_published": "2022-10-21T15:02:20.000Z",
            "content_html": "<h3 id=\"面试题1js中在什么情况下a等于1或者2或者3\"><a class=\"markdownIt-Anchor\" href=\"#面试题1js中在什么情况下a等于1或者2或者3\">#</a> 面试题 1：JS 中在什么情况下 a 等于 1 或者 2 或者 3？</h3>\n<p><strong>题目详情如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ?;</span><br><span class=\"line\">if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) &#123;</span><br><span class=\"line\">    console.log(&quot;i love you~&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方案一：通过重写 valueOf 方法返回 1,2,3</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++<span class=\"variable language_\">this</span>.<span class=\"property\">i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方案二：通过重写 toString 方法返回 1,2,3</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++<span class=\"variable language_\">this</span>.<span class=\"property\">i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方案三：通过数组的 shift 每次拿到 1,2,3 赋值给 toString 方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.<span class=\"property\">toString</span> = a.<span class=\"property\">shift</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方案四：通过 Object.defineProperty 定义变量进行迭代</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">window</span>,<span class=\"string\">&quot;a&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "面试题"
            ]
        },
        {
            "id": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/09-with%EF%BC%8Ceval%EF%BC%8C%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/",
            "url": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/09-with%EF%BC%8Ceval%EF%BC%8C%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/",
            "title": "with，eval，严格模式",
            "date_published": "2022-10-21T14:49:23.000Z",
            "content_html": "<h4 id=\"with\"><a class=\"markdownIt-Anchor\" href=\"#with\">#</a> with</h4>\n<ul>\n<li>\n<p>功能：扩展作用域链。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> address = <span class=\"string\">&quot;bj&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">uname</span>: <span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">uage</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// var uname = &quot;xq&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果自己没有uname，会去obj中找uname</span></span><br><span class=\"line\">    <span class=\"comment\">// with扩展了作用域链</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果obj中没有，去ECG中找</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uname);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在开发中，不要使用 with 语句，因为破坏了作用域链</p>\n</li>\n<li>\n<p>vue 源码中使用到了 with 语句</p>\n</li>\n</ul>\n<h4 id=\"eval\"><a class=\"markdownIt-Anchor\" href=\"#eval\">#</a> eval</h4>\n<ul>\n<li>\n<p>功能：把一片字符串，当成 JS 代码去执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"comment\">//  一片字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsStr = <span class=\"string\">&quot; var msg=&#x27;haha&#x27;; console.log(msg); console.log(age); &quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(jsStr);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>eval 是 JS 中内置的函数，直接去调用</p>\n</li>\n<li>\n<p>eval 执行的代码，并不是一个沙箱环境，受外界的影响</p>\n</li>\n<li>\n<p>开发中不建议使用</p>\n</li>\n</ul>\n<h4 id=\"严格模式\"><a class=\"markdownIt-Anchor\" href=\"#严格模式\">#</a> 严格模式</h4>\n<p>JS 被设计时，非常灵活，也有非常多的不足，在 ES5 中，提出了严格模式，默认情况下，我们写的代码执行时，并不是严格模式。要使用严格模式，必须开启严格模式。</p>\n<ul>\n<li>\n<p>开启严格模式</p>\n<ul>\n<li>\n<p>在一个 JS 文件的最前面开启，这样，整个 JS 文件都要受严格模式的约束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js文件</span></span><br><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在某个函数中，开启严格模式，函数体中的代码就受严格模式的约束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">gn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>严格模式限制</p>\n<ul>\n<li>\n<p>不能使用没有加 var 的全局变量</p>\n</li>\n<li>\n<p>在严格模式下形参不能重名</p>\n</li>\n<li>\n<p>不能使用老的 8 进制数据的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// let num1 = 0x123; // 16进制</span></span><br><span class=\"line\"><span class=\"comment\">// let num2 = 0o10; // 8进制</span></span><br><span class=\"line\"><span class=\"comment\">// let num3 = 010;  // 8进制 (老的写法)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不能使用 with 语句</p>\n</li>\n<li>\n<p>在严格模式下，JS 串中定义的数据，外界不能使用。外界定义的数据，在 JS 串中还是可以使用</p>\n</li>\n<li>\n<p>在非严格模式下，this 是 window  在严格模式下，不会默认绑定，this 是 undefind。 独立函数调用，this 不再表示 window，是 und</p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/08-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/",
            "url": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/08-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/",
            "title": "数据存储",
            "date_published": "2022-10-21T14:34:23.000Z",
            "content_html": "<h3 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localStorage</h3>\n<h4 id=\"使用的api\"><a class=\"markdownIt-Anchor\" href=\"#使用的api\">#</a> 使用的 API</h4>\n<ul>\n<li>length 返回数据的数量</li>\n<li>setItem (key, value) 存储数据的 如果 key 一样，数据会发生覆盖</li>\n<li>getItem (key) 获取数据</li>\n<li>removeItem (key) 删除数据</li>\n<li>Clear () 清除 local storage 中的所有的数据</li>\n</ul>\n<p><strong>localStorage 是永久本地存储，只能手动删除修改</strong></p>\n<h4 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> SessionStorage</h4>\n<h4 id=\"使用的api-2\"><a class=\"markdownIt-Anchor\" href=\"#使用的api-2\">#</a> 使用的 API</h4>\n<ul>\n<li>length 返回数据的数量</li>\n<li>setItem (key, value) 存储数据的 如果 key 一样，数据会发生覆盖</li>\n<li>getItem (key) 获取数据</li>\n<li>removeItem (key) 删除数据</li>\n<li>Clear () 清除 session storage 中的所有的数据</li>\n</ul>\n<p><strong>如果把浏览器关闭了，sessioinStorage 中的数据就没有了</strong></p>\n<h3 id=\"封装cache缓存存储\"><a class=\"markdownIt-Anchor\" href=\"#封装cache缓存存储\">#</a> 封装 Cache：缓存存储</h3>\n<ul>\n<li>使用<strong>原型对象</strong>封装：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cache</span>(<span class=\"params\">isLocal = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = isLocal ? <span class=\"variable language_\">localStorage</span> : sessionStorage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        value = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">removeItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">clear</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">length</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> localCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sessionCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用<strong> class</strong> 封装：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cache</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">isLocal = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = isLocal ? <span class=\"variable language_\">localStorage</span> : sessionStorage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">setItem</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">getItem</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">removeItem</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">length</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> localCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sessionCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "cache"
            ]
        },
        {
            "id": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/07-JSON/",
            "url": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/07-JSON/",
            "title": "JSON",
            "date_published": "2022-10-21T14:21:05.000Z",
            "content_html": "<h2 id=\"json\"><a class=\"markdownIt-Anchor\" href=\"#json\">#</a> JSON</h2>\n<ul>\n<li>JSON: JavaScript Object Notation JS 对象描述符</li>\n<li>前后端交互的一种数据格式，我们可以把 JSON 数据扔给后端，后端也可以响应 JSON 数据</li>\n</ul>\n<h3 id=\"json格式\"><a class=\"markdownIt-Anchor\" href=\"#json格式\">#</a> JSON 格式</h3>\n<ul>\n<li>\n<p>格式一：字符串</p>\n<ul>\n<li>\n<p>不能使用单引号</p>\n</li>\n<li>\n<p>很少使用直接的字符串类型，而是被包装成后两种</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello json&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>格式二：对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">18</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;friend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xq&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hobbies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;coding&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>格式三：数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;abc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"number\">123</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wc&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"json序列化和反序列化\"><a class=\"markdownIt-Anchor\" href=\"#json序列化和反序列化\">#</a> JSON 序列化和反序列化</h3>\n<ul>\n<li>\n<p>序列化：把对象转成 JSON 串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> jsonStr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj)</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;obj&quot;</span>, jsonStr)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>反序列化：把 JSON 串还原成 JS 对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonStr = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;obj&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>序列化和反序列化过程是深度拷贝</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === newObj) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "JSON"
            ]
        },
        {
            "id": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/06-%E7%BB%A7%E6%89%BF/",
            "url": "http://example.com/2022/10/21/js%E9%AB%98%E7%BA%A7/06-%E7%BB%A7%E6%89%BF/",
            "title": "JS继承",
            "date_published": "2022-10-21T02:21:05.000Z",
            "content_html": "<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>让多个类之前，建立关系，便于代码的管理和复用。</p>\n<h3 id=\"不使用继承\"><a class=\"markdownIt-Anchor\" href=\"#不使用继承\">#</a> 不使用继承</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br></pre></td></tr></table></figure>\n<p>同种属性或者类似的方法不能复用，代码累赘。</p>\n<h3 id=\"原型继承\"><a class=\"markdownIt-Anchor\" href=\"#原型继承\">#</a> 原型继承</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();  <span class=\"comment\">// 原型继承可以继承父类上的公有方法</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>;  <span class=\"comment\">// 手动修改constructor的指向</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>通过显式原型对象建立对象关系，即子对象的原型指向父类。</p>\n</li>\n<li>\n<p>原型链继承：<strong>改变子类的原型对象</strong></p>\n<ul>\n<li>\n<p>核心：Student.prototype = new Person ();   修改子类的原型对象</p>\n</li>\n<li>\n<p>缺点：如果父中的数据是引用数据类型，子对象修改了，另一个子对象也会受影响</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组合继承\"><a class=\"markdownIt-Anchor\" href=\"#组合继承\">#</a> 组合继承</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Person执行了...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name,age,className</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,age);  <span class=\"comment\">// 1遍,调用父类传参</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// new Person(); // 也让Person函数执行一遍</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(); <span class=\"comment\">// 原型链继承核心</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>核心：</p>\n<ul>\n<li>\n<p>Student.prototype = new Person (); // 继承父类的公有属性</p>\n</li>\n<li>\n<p>Person.call (this,name,age);  // 继承父类的私有属性</p>\n</li>\n</ul>\n</li>\n<li>\n<p>缺点：Person.call (this,name,age);  让父类构造函数多执行一遍</p>\n<h3 id=\"objectcreateapi\"><a class=\"markdownIt-Anchor\" href=\"#objectcreateapi\">#</a> Object.createAPI</h3>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个对象，又有一个新方案：Object.create</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用来创建一个非常干净的，没有原型对象的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>Object.create 可以给创建出来的新对象指定原型对象。</p>\n<h3 id=\"寄生组合继承\"><a class=\"markdownIt-Anchor\" href=\"#寄生组合继承\">#</a> 寄生组合继承</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br></pre></td></tr></table></figure>\n<p>使用 Object.createAPI 和组合继承一起调用。</p>\n<h3 id=\"es6中的class继承\"><a class=\"markdownIt-Anchor\" href=\"#es6中的class继承\">#</a> ES6 中的 Class 继承</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;会说话...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让Student类继承Person类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age); <span class=\"comment\">// 调用父类的 constructor</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "继承"
            ]
        },
        {
            "id": "http://example.com/2022/10/19/js%E9%AB%98%E7%BA%A7/05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "url": "http://example.com/2022/10/19/js%E9%AB%98%E7%BA%A7/05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "title": "原型和原型链",
            "date_published": "2022-10-19T13:29:05.000Z",
            "content_html": "<h3 id=\"原型\"><a class=\"markdownIt-Anchor\" href=\"#原型\">#</a> 原型</h3>\n<h4 id=\"原型对象\"><a class=\"markdownIt-Anchor\" href=\"#原型对象\">#</a> 原型对象</h4>\n<ul>\n<li>\n<p>显示原型</p>\n<ul>\n<li>每个构造器（类）上都有一个叫 prototype 属性</li>\n<li>prototype 叫显示原型</li>\n</ul>\n</li>\n<li>\n<p>隐式原型</p>\n<ul>\n<li>\n<p>只要是一个对象，它的身上必定有一个属性，叫 <strong>proto</strong>，_ __proto__是属性名，叫隐式原型，对象的值是一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> <span class=\"comment\">//隐式原型对象</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>显示原型和隐式原型指向同一个对象，叫做原型对象</p>\n</li>\n</ul>\n<h4 id=\"对象的私有和公有属性\"><a class=\"markdownIt-Anchor\" href=\"#对象的私有和公有属性\">#</a> 对象的私有和公有属性</h4>\n<ul>\n<li>\n<p>obj 是一个对象，属性的无序集合，属性的分类有两种：</p>\n<ul>\n<li>私有属性\n<ul>\n<li>非 proto 找到的属性</li>\n</ul>\n</li>\n<li>公有属性  沿着__proto__找到的属性都是公有属性</li>\n</ul>\n</li>\n<li>\n<p>对象在调用属性时，先使用 hasOwnProperty 方法判断是否是私有属性，如果没有就会沿着原型链向上查找</p>\n</li>\n</ul>\n<h4 id=\"两个属性存在判断方法\"><a class=\"markdownIt-Anchor\" href=\"#两个属性存在判断方法\">#</a> 两个属性存在判断方法</h4>\n<ul>\n<li>\n<p>hasOwnProperty</p>\n<ul>\n<li>\n<p>判断当前对象自身是否有该属性（不在原型链上寻找，判断是否是私有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;name&#x27;</span>));  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>in</p>\n<ul>\n<li>\n<p>判断当前对象是否有该属性（任何位置，不管是公有还是私有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;push&quot;</span> <span class=\"keyword\">in</span> arr);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arr1是对象  对象身上都有一个隐式原型</span></span><br><span class=\"line\"><span class=\"comment\">// Array是类，也叫构造器，本质就是函数</span></span><br><span class=\"line\"><span class=\"comment\">// 函数身都都一个显示原型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;wc&quot;</span>, <span class=\"string\">&quot;xq&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;jj&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == arr1.<span class=\"property\">__proto__</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == arr2.<span class=\"property\">__proto__</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span>); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>作用域链：在 EC 中查找数据的机制</li>\n</ul>\n<p><img data-src=\"./../../image/12321-1666190602837-3.png\" alt=\"12321\"></p>\n<ul>\n<li>\n<p>原型链：在对象上查找某个属性的机制</p>\n<ul>\n<li>\n<p>上图中的查找顺序如下图红色线所指：</p>\n<p><img data-src=\"./../../image/14-%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"14-原型链\"></p>\n</li>\n<li>\n<p>原型查找不断向上寻找作用域链中的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;wc&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> == <span class=\"title class_\">Person</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"./../../image/15-%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"15-原型链\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>\n<p>一切都是对象</p>\n</li>\n<li>\n<p>对象是属性的无序集合</p>\n</li>\n<li>\n<p>属性分公有属性和私有属性</p>\n</li>\n<li>\n<p>每个对象身上都有一个__proto__属性，叫隐式原型</p>\n</li>\n<li>\n<p>每个函数身上都有一个 prototype 属性，叫显示式原型</p>\n</li>\n<li>\n<p>对象的隐式原型和函数的显示原型，指向一个对象，叫原型对象</p>\n</li>\n<li>\n<p>每一个原型对象身上有一个 constructor 属性，指向函数本身</p>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "原型",
                "原型链"
            ]
        },
        {
            "id": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/04-OOP%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88/",
            "url": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/04-OOP%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88/",
            "title": "OOP",
            "date_published": "2022-10-18T12:46:23.000Z",
            "content_html": "<h2 id=\"oop\"><a class=\"markdownIt-Anchor\" href=\"#oop\">#</a> OOP</h2>\n<h3 id=\"对象的创建方法\"><a class=\"markdownIt-Anchor\" href=\"#对象的创建方法\">#</a> 对象的创建方法</h3>\n<ul>\n<li>new Object()</li>\n<li>let obj = {}</li>\n</ul>\n<h3 id=\"js的内置类\"><a class=\"markdownIt-Anchor\" href=\"#js的内置类\">#</a> JS 的内置类</h3>\n<ul>\n<li>常用的：Number，Array，Date，Function，Math，String，Boolean，Window，Set，Map</li>\n<li>Math，Window 等是单体内置类（不能 new）</li>\n</ul>\n<h3 id=\"js所有数据都是对象\"><a class=\"markdownIt-Anchor\" href=\"#js所有数据都是对象\">#</a> JS 所有数据都是对象</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 得到一个伪数组  伪数组不是数组  是对象</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]    &#123;0:&quot;a&quot;,1:&quot;b&quot;,2:&quot;c&quot;&#125;伪数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;li&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lis = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 一个真实的DOM元素，本质就是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 这个对象中的属性非常多，操作这个对象，性能就非常低</span></span><br><span class=\"line\"><span class=\"comment\">// jq死了，jq操作的是DOM元素，操作DOM元素性能就低</span></span><br><span class=\"line\"><span class=\"comment\">// vue  react操作的是虚拟DOM元素，虚拟DOM中的属性就没有那么多</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(lis[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<p>因此，在开发中，一般不直接操作原生 DOM，而是使用项目框架来操作虚拟 DOM，提高性能。</p>\n<ul>\n<li>\n<p>对象中的键都是字符串，不管加不加单双引号</p>\n</li>\n<li>\n<p>键也可以是其他值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"number\">123</span>: <span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">true</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">undefined</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;run...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"number\">123</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"literal\">true</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">true</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"title function_\">undefined</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"literal\">undefined</span>]());</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>对象没有 length</p>\n</li>\n<li>\n<p>遍历对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历对象使用for in</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"对象创建方案\"><a class=\"markdownIt-Anchor\" href=\"#对象创建方案\">#</a> 对象创建方案</h3>\n<ul>\n<li>\n<p>通过字面量的形式创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wc = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">188</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&quot;bj&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">coding</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;coding...&quot;</span>); &#125;,</span><br><span class=\"line\">    <span class=\"attr\">eating</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;eating...&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：①大量重复代码；②内存空间浪费</p>\n</li>\n<li>\n<p>工厂函数创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name,age,height,address</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = &#123;&#125;;</span><br><span class=\"line\">    p.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    p.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    p.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">    p.<span class=\"property\">address</span> = address;</span><br><span class=\"line\">    p.<span class=\"property\">coding</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;coding...&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wc = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wangcai&quot;</span>,<span class=\"number\">11</span>,<span class=\"number\">180</span>,<span class=\"string\">&quot;bj&quot;</span>);  wc.<span class=\"title function_\">coding</span>();</span><br></pre></td></tr></table></figure>\n<p>直接产出对象</p>\n<p>缺点：获取工厂化对象时会通过字面量形式</p>\n</li>\n<li>\n<p>构造器创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1）创建一个新的对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 2）让函数中的this绑定到这个新对象上  new绑定</span></span><br><span class=\"line\">    <span class=\"comment\">// 3）执行类（函数）中的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 4）返回上面的新对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br></pre></td></tr></table></figure>\n<p>缺点：也会造成空间浪费</p>\n</li>\n<li>\n<p>构造器 + 原型对象创建对象</p>\n</li>\n</ul>\n<p>推荐使用：构造器 + 原型对象</p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/03-JS%E7%9A%84this/",
            "url": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/03-JS%E7%9A%84this/",
            "title": "JS的this",
            "date_published": "2022-10-18T11:59:01.000Z",
            "content_html": "<h2 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h2>\n<h3 id=\"this是什么\"><a class=\"markdownIt-Anchor\" href=\"#this是什么\">#</a> this 是什么</h3>\n<ul>\n<li>this 到底是什么和你书写的位置没有关系，和调用方式有关系</li>\n<li>this 是在产生 EC 时，动态绑定的</li>\n</ul>\n<h3 id=\"this的绑定规则\"><a class=\"markdownIt-Anchor\" href=\"#this的绑定规则\">#</a> this 的绑定规则</h3>\n<ul>\n<li>\n<p><strong>函数的角色</strong></p>\n<ul>\n<li>\n<p>普通函数</p>\n</li>\n<li>\n<p>对象中的方法</p>\n</li>\n<li>\n<p>对象（一切都是对象）  对象是属性的无序集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;gn...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// dir表示以对象有形式打印出函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(gn);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数也是类（构造函数 / 构造器），通常情况下，首字母大写</p>\n</li>\n</ul>\n</li>\n<li>\n<p>默认绑定</p>\n<p>独立调用则直接输出 window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">       <span class=\"title function_\">fn</span>();  <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">kn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">       <span class=\"title function_\">gn</span>();  <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\"> <span class=\"title function_\">kn</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>隐式绑定</p>\n<ul>\n<li>\n<p>一个函数中的 this 是什么，就看谁去调用了这个函数</p>\n</li>\n<li>\n<p>obj 打点去调用了，函数中的 this 表示 obj</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fn</span>:fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不叫独立的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">// 是通过obj打点去调用的</span></span><br><span class=\"line\"><span class=\"comment\">// fn中的this表示什么，就看点前面是什么</span></span><br><span class=\"line\"><span class=\"comment\">// 点前面是obj，this就是obj</span></span><br><span class=\"line\">obj.<span class=\"title function_\">fn</span>();<span class=\"comment\">//obj</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;xq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gn</span>:obj.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj2.<span class=\"title function_\">gn</span>(); <span class=\"comment\">//obj2</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示绑定</p>\n<ul>\n<li>\n<p>函数也是一个对象，对象是属性的无序集合，内部有非常多的默认属性或方法，重点关注三个方法，call，apply，bind</p>\n</li>\n<li>\n<p>call</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1,num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数也是对象，call是它内部的一个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 我们直接去调用这个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 此方法，可以让我们显示地绑定this</span></span><br><span class=\"line\"><span class=\"comment\">// call的作用：1）显示绑定this  2）让fn执行 3）也可以传递</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj,<span class=\"number\">666</span>,<span class=\"number\">111</span>);  <span class=\"comment\">// 显示绑定函数中的this</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>apply</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply的作用和call一样，只不过传参的方式不一样</span></span><br><span class=\"line\"><span class=\"comment\">// apply的话，需要把参数放到一个数组中</span></span><br><span class=\"line\">fn.<span class=\"title function_\">apply</span>(obj, [<span class=\"number\">666</span>, <span class=\"number\">111</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>bind</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind的作用：1）显示绑定this  2）也可以传参   但是不会让函数执行，call和apply都会让函数执行  3）bind返回绑定this之后的新函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">666</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">newFn</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>总结</p>\n<ul>\n<li>call  fn.call (obj,1,2)  显示绑定 this  让 fn 执行  也能传参</li>\n<li>apply  fn.apply (obj,[1,2])  显示绑定 this  让 fn 执行  参数放数组中</li>\n<li>bind  fn.bind (obj,1,2)  显示绑定 this  返回绑定 this 后的新函数  也能传参</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// String &#123;&#x27;hello&#x27;&#125;  是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//  会把hello包装成一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// fn.call(&quot;hello&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果绑定到und上，实际是绑定到了window上</span></span><br><span class=\"line\"><span class=\"comment\">// fn.call(undefined);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果绑定到null上，实际是绑定到了window上</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>new 绑定</p>\n<ul>\n<li>\n<p>new 做了什么</p>\n<ul>\n<li>在函数内部创建一个对象</li>\n<li>把函数内的 this 绑定到了对象上</li>\n<li>函数执行</li>\n<li>返回这个对象（new 完后，肯定是得到一个对象）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;wc&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new一个类，得到一个对象  new是一个运算符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>内置函数绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器中的this表示window</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听器中的this表示事件源</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"绑定优先级\"><a class=\"markdownIt-Anchor\" href=\"#绑定优先级\">#</a> 绑定优先级</h3>\n<ul>\n<li>显示 &gt; 隐式</li>\n<li>new &gt; 隐式</li>\n<li>new &gt; bind</li>\n<li>new 绑定 不能和 call 与 apply 比较（因为 call 和 apply 执行了）</li>\n</ul>\n<h2 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<h3 id=\"箭头函数书写方法\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数书写方法\">#</a> 箭头函数书写方法</h3>\n<ul>\n<li>\n<p>普通写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> =  (<span class=\"params\">num1, num2</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>形参只有 1 个，那么 () 可以不写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数体中只有一条语句，{} 和 return 都可以不写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; num1 * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数体中只有一条语句，没有 reutrn，{} 也是可以不写的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 ** <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数体中只有一条语句，并且返回一个对象  删除 return 和 {}，对象的 {} 会当成函数的 {}，如果没有形参 () 不能省</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = (<span class=\"params\"></span>) =&gt; (&#123; <span class=\"attr\">a</span>: <span class=\"number\">666</span> &#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"箭头函数特点\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数特点\">#</a> 箭头函数特点</h3>\n<ul>\n<li>箭头函数中的 this 需要往向找一层</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);<span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "this"
            ]
        },
        {
            "id": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/02-%E5%8F%98%E9%87%8F%E5%92%8C%E9%97%AD%E5%8C%85/",
            "url": "http://example.com/2022/10/18/js%E9%AB%98%E7%BA%A7/02-%E5%8F%98%E9%87%8F%E5%92%8C%E9%97%AD%E5%8C%85/",
            "title": "变量和闭包",
            "date_published": "2022-10-18T10:18:01.000Z",
            "content_html": "<h3 id=\"var变量加与不加的区别\"><a class=\"markdownIt-Anchor\" href=\"#var变量加与不加的区别\">#</a> Var 变量加与不加的区别</h3>\n<ul>\n<li>\n<p>加 var 在预编译期间会提升，不加 var 不会</p>\n</li>\n<li>\n<p>不管是否加 var，只要全局变量，在非严格模式下，都会挂载到 GO 上</p>\n</li>\n<li>\n<p>加 var 的变量，可以做全局变量，也可以做局部变量，没有加 var 只能做全局变量</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(b);</span></span><br><span class=\"line\">b = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">b</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"let\"><a class=\"markdownIt-Anchor\" href=\"#let\">#</a> let</h3>\n<ul>\n<li>\n<p>项目开发中，基本上都是清一色的 let</p>\n</li>\n<li>\n<p>let 是 ES6 中提出来，弥补了 var 声明变量的缺点</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class=\"line\">    <span class=\"comment\">// a没有初始化（赋值），是不能访问的</span></span><br><span class=\"line\">    <span class=\"comment\">// 理解成：使用let声明的变量是没有提升</span></span><br><span class=\"line\">    <span class=\"comment\">// 理解成：使用let声明的变量提升了，但是没有赋值，没有赋值是不能直接访问的</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">110</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// let+&#123;&#125;可以形成块级作用域</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// let + &#123;&#125; 形成块级作用域</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 块级作用域中定义的变量，只能在块中使用</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 出了这个块，就不能使用了</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">let</span> c = <span class=\"number\">110</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 使用let声明的变量，并不会挂载到GO上</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">110</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">//  SyntaxError: Identifier &#x27;a&#x27; has already been declared </span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"const\"><a class=\"markdownIt-Anchor\" href=\"#const\">#</a> const</h3>\n<ul>\n<li>\n<p>使用 const 声明变量（常量）的特点：</p>\n<p>​    1）声明的变量不能修改</p>\n<p>​    2）使用 const 声明变量时，必须赋值，不然会报语法错误</p>\n<p>​    3）const 声明的变量也不会提升</p>\n<p>​    4）const 和 {} 也可以形成块级作用域</p>\n<p>​    5）const 声明的变量也不会挂载到 GO 上</p>\n</li>\n<li>\n<p>在项目中，定义变量使用 let，定义常量，使用 const</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    <span class=\"variable constant_\">PI</span> = <span class=\"number\">666</span>; <span class=\"comment\">// TypeError: Assignment to constant variable.</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">PI</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"列子\"><a class=\"markdownIt-Anchor\" href=\"#列子\">#</a> 列子</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"comment\">//输出为5,5,5,3,3,3</span></span><br></pre></td></tr></table></figure>\n<p>上述列子中，fn 被整体提升，前面三个输出 5，在第四个 fn 之前进行 fn 赋值，输出都是 3</p>\n<h2 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<ul>\n<li>一个不能被回收释放掉的栈空间成为闭包。</li>\n<li>有些不能被回收的闭包会造成内存空间泄露。</li>\n<li>作用\n<ul>\n<li>保护  保护 EC 中的变量，外界不能直接访问</li>\n<li>保存  可以让我们像使用全局变量那样使用局部变量，延长变量的生命周期</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"./../../image/10-%E5%BC%95%E5%87%BA%E9%97%AD%E5%8C%85.png\" alt=\"10-引出闭包\"></p>\n<h4 id=\"闭包典型题\"><a class=\"markdownIt-Anchor\" href=\"#闭包典型题\">#</a> 闭包典型题</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    i -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((++i) - n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"comment\">//10 10 8 20</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"./../../image/12-%E9%97%AD%E5%8C%85%E7%BB%83%E4%B9%A0%E9%A2%98.png\" alt=\"12-闭包练习题\"></p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/01-EC%E5%92%8CJS%E6%89%A7%E8%A1%8C/",
            "url": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/01-EC%E5%92%8CJS%E6%89%A7%E8%A1%8C/",
            "title": "JavaScript预编辑",
            "date_published": "2022-10-17T10:40:29.000Z",
            "content_html": "<p>JavaScript 运行分为预编译和代码执行运行</p>\n<h3 id=\"预编译\"><a class=\"markdownIt-Anchor\" href=\"#预编译\">#</a> 预编译</h3>\n<p>预编译也叫预解析</p>\n<p>做了什么？</p>\n<pre><code>- 声明要提升 会先进行var和function的定义提升（只提升声明，而没有赋值，放在代码块最前面）\n- 函数内部局部变量，要提升到函数内部最前面\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 预编译会先进行var和function的定义提升</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//undefind</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">//2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">//und</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"number\">4</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行执行\"><a class=\"markdownIt-Anchor\" href=\"#运行执行\">#</a> 运行执行</h3>\n<p>执行运行就是运行预编译后的 js 代码，现将所有的声明和函数执行后，运行代码块。</p>\n<h3 id=\"区\"><a class=\"markdownIt-Anchor\" href=\"#区\">#</a> 区</h3>\n<ul>\n<li>内存分为两个区：堆区和栈区</li>\n<li>栈区：存储基本数据类型</li>\n<li>栈区：存储引用数据类型</li>\n</ul>\n<h3 id=\"javascript代码类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript代码类型\">#</a> JavaScript 代码类型</h3>\n<ul>\n<li>全局代码：script 标签都是全局代码</li>\n<li>函数代码：每一个函数都是一个代码块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript代码执行\"><a class=\"markdownIt-Anchor\" href=\"#javascript代码执行\">#</a> JavaScript 代码执行</h3>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<ul>\n<li>\n<p>JS 执行时，堆内存创建一个全局对象（GO）</p>\n</li>\n<li>\n<p>全局代码执行时，产生全局执行上下文（ECG）</p>\n</li>\n<li>\n<p>调用一个函数，产生一个局部执行上下文（EC）</p>\n</li>\n<li>\n<p>执行上下文产生放在栈中，栈叫做执行上下文栈（ECS）</p>\n</li>\n</ul>\n<p>EC：给代码提供数据</p>\n<p>GO：也是就 window 对象</p>\n<p><img data-src=\"./../../image/01-ECG%EF%BC%8CGO%EF%BC%8CECFn.png\" alt=\"01-ECG，GO，ECFn\"></p>\n<h4 id=\"执行步骤\"><a class=\"markdownIt-Anchor\" href=\"#执行步骤\">#</a> 执行步骤</h4>\n<p>执行代码开始，会将 GO 挂载</p>\n<p>①执行全局代码，产上 ECG，入 ECS</p>\n<p>②执行局部代码，产生 EC，入 ECS</p>\n<p>③出栈，一次出 EC * N ,ECG</p>\n<p><img data-src=\"E:%5CCode%5C%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%5CJavaScript%5Cjs%E9%AB%98%E7%BA%A7%5Cjs%5C1.png\" alt=\"\"></p>\n",
            "tags": [
                "JavaScript"
            ]
        }
    ]
}