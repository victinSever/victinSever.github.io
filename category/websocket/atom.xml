<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://victinSever.github.io</id>
    <title>眸光似星辰 • Posts by &#34;websocket&#34; category</title>
    <link href="http://victinSever.github.io" />
    <updated>2022-10-24T06:38:06.000Z</updated>
    <category term="react" />
    <category term="react-redux" />
    <category term="redux" />
    <category term="Svelet" />
    <category term="Solid.js" />
    <category term="Nginx" />
    <category term="WebSocket" />
    <category term="hexo" />
    <category term="Typora" />
    <category term="密码学" />
    <category term="凯斯密码" />
    <category term="维吉尼亚密码" />
    <category term="Dijkstra" />
    <category term="JDBC" />
    <category term="canvas" />
    <category term="MVC" />
    <category term="JavaScript" />
    <category term="this" />
    <category term="原型" />
    <category term="原型链" />
    <category term="继承" />
    <category term="JSON" />
    <category term="cache" />
    <category term="面试题" />
    <category term="vue" />
    <category term="react-router-dom" />
    <category term="vue-router" />
    <category term="Vue" />
    <category term="Vuex" />
    <category term="Vue-router" />
    <category term="ElementUI" />
    <category term="axios" />
    <category term="sass" />
    <category term="NProgress" />
    <category term="dp" />
    <entry>
        <id>http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/</id>
        <title>即时通讯协议选型：WebSocket协议</title>
        <link rel="alternate" href="http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/"/>
        <content type="html">&lt;h4 id=&#34;WebSocket&#34;&gt;&lt;a href=&#34;#WebSocket&#34; class=&#34;headerlink&#34; title=&#34;WebSocket&#34;&gt;&lt;/a&gt;WebSocket&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Socket：&lt;/strong&gt;对处于网络中不同主机上的应用进程之间进行双向通信的端点的抽象，是应用程序通过网络协议进行通信的接口，一个Socket对应着通信的一端，由IP地址和端口组合而成。&lt;/p&gt;
&lt;h4 id=&#34;WebSocket服务端与客户端之间的通信过程&#34;&gt;&lt;a href=&#34;#WebSocket服务端与客户端之间的通信过程&#34; class=&#34;headerlink&#34; title=&#34;WebSocket服务端与客户端之间的通信过程&#34;&gt;&lt;/a&gt;WebSocket服务端与客户端之间的通信过程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务端创建包含有效主机与端口的WebSocket实例，随后启动并等待客户端连接&lt;/li&gt;
&lt;li&gt;客户端创建WebSocket实例，并为该实例提供一个URL，该URL代表希望连接的服务器端&lt;/li&gt;
&lt;li&gt;客户端通过HTTP请求握手建立连接之后，后面就使用刚才发起HTTP请求的TCP连接进行双向通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;WebSocket特点&#34;&gt;&lt;a href=&#34;#WebSocket特点&#34; class=&#34;headerlink&#34; title=&#34;WebSocket特点&#34;&gt;&lt;/a&gt;WebSocket特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;WebSocket本身只是一个应用层协议&lt;/li&gt;
&lt;li&gt;一种全双工通信机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;传统的全双工协议的两种方式&#34;&gt;&lt;a href=&#34;#传统的全双工协议的两种方式&#34; class=&#34;headerlink&#34; title=&#34;传统的全双工协议的两种方式&#34;&gt;&lt;/a&gt;传统的全双工协议的两种方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短轮询&lt;/strong&gt; 即客户端定时向服务端发送请求，服务端收到请求后马上返回响应并关闭连接。 &lt;ul&gt;
&lt;li&gt;优点：实现简单 &lt;/li&gt;
&lt;li&gt;缺点： &lt;ul&gt;
&lt;li&gt;1.并发请求对服务端造成较大压力 &lt;/li&gt;
&lt;li&gt;2.数据可能没有更新，造成无效请求 &lt;/li&gt;
&lt;li&gt;3.频繁的网络请求导致客户端设备电量、流量快速消耗 &lt;/li&gt;
&lt;li&gt;4.定时操作存在时间差，可能造成数据同步不及时 &lt;/li&gt;
&lt;li&gt;5.每次请求都需要携带完整的请求头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长轮询&lt;/strong&gt; 即服务端在收到请求之后，如果数据无更新，会阻塞请求，直至数据更新或连接超时才返回。 &lt;ul&gt;
&lt;li&gt;优点：相较于短轮询减少了HTTP请求的次数，节省了部分资源。 &lt;/li&gt;
&lt;li&gt;缺点： &lt;ul&gt;
&lt;li&gt;1.连接挂起同样会消耗资源 &lt;/li&gt;
&lt;li&gt;2.冗余请求头问题依旧存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;WebSocket比传统全双工协议的优势&#34;&gt;&lt;a href=&#34;#WebSocket比传统全双工协议的优势&#34; class=&#34;headerlink&#34; title=&#34;WebSocket比传统全双工协议的优势&#34;&gt;&lt;/a&gt;WebSocket比传统全双工协议的优势&lt;/h4&gt;&lt;p&gt;当连接建立之后，后续的数据都是以&lt;strong&gt;帧的形式&lt;/strong&gt;发送。&lt;strong&gt;除非某一端主动断开连接，否则无需重新建立连接&lt;/strong&gt;。因此可以做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.减轻服务器的负担 &lt;/li&gt;
&lt;li&gt;2.极大地减少不必要的流量、电量消耗 &lt;/li&gt;
&lt;li&gt;3.提高实时性，保证客户端和服务端数据的同步 &lt;/li&gt;
&lt;li&gt;4.减少冗余请求头造成的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;WebSocket比其他即时通讯协议的优势&#34;&gt;&lt;a href=&#34;#WebSocket比其他即时通讯协议的优势&#34; class=&#34;headerlink&#34; title=&#34;WebSocket比其他即时通讯协议的优势&#34;&gt;&lt;/a&gt;WebSocket比其他即时通讯协议的优势&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.&lt;strong&gt;较少的控制开销。&lt;/strong&gt;在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.&lt;strong&gt;更好的二进制支持。&lt;/strong&gt;Websocket定义了二进制帧，相对HTTP，可以更轻松地处理二进制内容。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.&lt;strong&gt;可以支持扩展。&lt;/strong&gt;Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议，如XMPP协议、MQTT协议等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;WebSocket协议在Android客户端的实现&#34;&gt;&lt;a href=&#34;#WebSocket协议在Android客户端的实现&#34; class=&#34;headerlink&#34; title=&#34;WebSocket协议在Android客户端的实现&#34;&gt;&lt;/a&gt;WebSocket协议在Android客户端的实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建WebSocket实例并提供一个URL以指定要连接的服务器地址&lt;/li&gt;
&lt;li&gt;提供一个WebSocket连接事件监听器，用于监听事件回调以处理连接生命周期的每个阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[即时通讯协议选型：WebSocket协议](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudG91dGlhby5jb20vYXJ0aWNsZS83MTU2MjA5OTM4NTM1MDM5NTI5Lz9vbmx5X3JlYz0xJnNoYXJlX3Rva2VuPTkzNTAyNzUxLTM0ZmEtNDZlZi1iODUxLWUyNzUyZWM0Yjg0OSZzb3VyY2U9bV9yZWRpcmVjdCZ3aWQ9MTY2NjU5Mjc2NzEyNg==&#34;&gt;即时通讯协议选型：WebSocket协议-今日头条 (toutiao.com)&lt;/span&gt;)&lt;/p&gt;
</content>
        <category term="WebSocket" />
        <updated>2022-10-24T06:38:06.000Z</updated>
    </entry>
</feed>
