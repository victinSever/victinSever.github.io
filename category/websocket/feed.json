{
    "version": "https://jsonfeed.org/version/1",
    "title": "眸光似星辰 • All posts by \"websocket\" category",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/",
            "url": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/",
            "title": "即时通讯协议选型：WebSocket协议",
            "date_published": "2022-10-24T06:38:06.000Z",
            "content_html": "<h4 id=\"websocket\"><a class=\"markdownIt-Anchor\" href=\"#websocket\">#</a> WebSocket</h4>\n<p>**Socket：** 对处于网络中不同主机上的应用进程之间进行双向通信的端点的抽象，是应用程序通过网络协议进行通信的接口，一个 Socket 对应着通信的一端，由 IP 地址和端口组合而成。</p>\n<h4 id=\"websocket服务端与客户端之间的通信过程\"><a class=\"markdownIt-Anchor\" href=\"#websocket服务端与客户端之间的通信过程\">#</a> WebSocket 服务端与客户端之间的通信过程</h4>\n<ul>\n<li>服务端创建包含有效主机与端口的 WebSocket 实例，随后启动并等待客户端连接</li>\n<li>客户端创建 WebSocket 实例，并为该实例提供一个 URL，该 URL 代表希望连接的服务器端</li>\n<li>客户端通过 HTTP 请求握手建立连接之后，后面就使用刚才发起 HTTP 请求的 TCP 连接进行双向通信。</li>\n</ul>\n<h4 id=\"websocket特点\"><a class=\"markdownIt-Anchor\" href=\"#websocket特点\">#</a> WebSocket 特点</h4>\n<ul>\n<li>WebSocket 本身只是一个应用层协议</li>\n<li>一种全双工通信机制</li>\n</ul>\n<h4 id=\"传统的全双工协议的两种方式\"><a class=\"markdownIt-Anchor\" href=\"#传统的全双工协议的两种方式\">#</a> 传统的全双工协议的两种方式</h4>\n<ul>\n<li><strong>短轮询</strong> 即客户端定时向服务端发送请求，服务端收到请求后马上返回响应并关闭连接。\n<ul>\n<li>优点：实现简单</li>\n<li>缺点：\n<ul>\n<li>1. 并发请求对服务端造成较大压力</li>\n<li>2. 数据可能没有更新，造成无效请求</li>\n<li>3. 频繁的网络请求导致客户端设备电量、流量快速消耗</li>\n<li>4. 定时操作存在时间差，可能造成数据同步不及时</li>\n<li>5. 每次请求都需要携带完整的请求头</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>长轮询</strong> 即服务端在收到请求之后，如果数据无更新，会阻塞请求，直至数据更新或连接超时才返回。\n<ul>\n<li>优点：相较于短轮询减少了 HTTP 请求的次数，节省了部分资源。</li>\n<li>缺点：\n<ul>\n<li>1. 连接挂起同样会消耗资源</li>\n<li>2. 冗余请求头问题依旧存在</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"websocket比传统全双工协议的优势\"><a class=\"markdownIt-Anchor\" href=\"#websocket比传统全双工协议的优势\">#</a> WebSocket 比传统全双工协议的优势</h4>\n<p>当连接建立之后，后续的数据都是以<strong>帧的形式</strong>发送。<strong>除非某一端主动断开连接，否则无需重新建立连接</strong>。因此可以做到：</p>\n<ul>\n<li>1. 减轻服务器的负担</li>\n<li>2. 极大地减少不必要的流量、电量消耗</li>\n<li>3. 提高实时性，保证客户端和服务端数据的同步</li>\n<li>4. 减少冗余请求头造成的开销</li>\n</ul>\n<h4 id=\"websocket比其他即时通讯协议的优势\"><a class=\"markdownIt-Anchor\" href=\"#websocket比其他即时通讯协议的优势\">#</a> WebSocket 比其他即时通讯协议的优势</h4>\n<ul>\n<li>\n<p>1.** 较少的控制开销。** 在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。</p>\n</li>\n<li>\n<p>2.** 更好的二进制支持。**Websocket 定义了二进制帧，相对 HTTP，可以更轻松地处理二进制内容。</p>\n</li>\n<li>\n<p>3.** 可以支持扩展。**Websocket 定义了扩展，用户可以扩展协议、实现部分自定义的子协议，如 XMPP 协议、MQTT 协议等。</p>\n</li>\n</ul>\n<h4 id=\"websocket协议在android客户端的实现\"><a class=\"markdownIt-Anchor\" href=\"#websocket协议在android客户端的实现\">#</a> WebSocket 协议在 Android 客户端的实现</h4>\n<ul>\n<li>创建 WebSocket 实例并提供一个 URL 以指定要连接的服务器地址</li>\n<li>提供一个 WebSocket 连接事件监听器，用于监听事件回调以处理连接生命周期的每个阶段</li>\n</ul>\n<p>[即时通讯协议选型：WebSocket 协议](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG91dGlhby5jb20vYXJ0aWNsZS83MTU2MjA5OTM4NTM1MDM5NTI5Lz9vbmx5X3JlYz0xJmFtcDtzaGFyZV90b2tlbj05MzUwMjc1MS0zNGZhLTQ2ZWYtYjg1MS1lMjc1MmVjNGI4NDkmYW1wO3NvdXJjZT1tX3JlZGlyZWN0JmFtcDt3aWQ9MTY2NjU5Mjc2NzEyNg==\">即时通讯协议选型：WebSocket 协议 - 今日头条 (toutiao.com)</span>)</p>\n",
            "tags": [
                "WebSocket"
            ]
        }
    ]
}