{
    "version": "https://jsonfeed.org/version/1",
    "title": "victinSever • All posts by \"java web\" category",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/JDBC/",
            "url": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/JDBC/",
            "title": "JDBC",
            "date_published": "2022-10-29T05:52:58.000Z",
            "content_html": "<h3 id=\"jdbc开发步骤\"><a class=\"markdownIt-Anchor\" href=\"#jdbc开发步骤\">#</a> JDBC 开发步骤</h3>\n<ul>\n<li>创建一个以 JDBC 连接数据库的程序，包含几个步骤:\n<ul>\n<li>1) 加载并注册数据库驱动程序（Driver 类）</li>\n<li>2) 创建数据库的连接（DriverManager 类）</li>\n<li>3) 获取 SQL 语句执行者（Statement/PreparedStatement 对象）</li>\n<li>4) 执行 SQL 语句</li>\n<li>5) 获取结果集（ResultSet 对象）</li>\n<li>6) 回收数据库资源（关闭 JDBC 对象）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>执行JDBC查询的一般步骤如下</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行JDBC查询的一般步骤如下</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:mysql://localhost:3306/javaweb&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">con</span> <span class=\"operator\">=</span> DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"type\">Statement</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> con.createStatement();</span><br><span class=\"line\"><span class=\"comment\">//4 + 5</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from student&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> state.executeQuery(sql);</span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\">state.close();</span><br><span class=\"line\">conn.close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"封装jdbc操作\"><a class=\"markdownIt-Anchor\" href=\"#封装jdbc操作\">#</a> 封装 JDBC 操作</h3>\n<p>JDBC 在实际业务中操作比较多，需要进行将各个业务的模块功能进行分离操作，封装的一般目录如下（无数据源操作）：</p>\n<p><img data-src=\"./../../../image/image-20221029140700404.png\" alt=\"image-20221029140700404\"></p>\n<ul>\n<li>\n<p>dao：数据库的各个表的实现（增删查改）</p>\n</li>\n<li>\n<p>jdbc：数据库的连接操作和关闭操作的实现，一般可以是接口，也可以直接封装成类操作（一般数据源信息放再 src 目录下，通过数据源的方式读取配置文件，此处没有使用，而是直接封装在 jdbc 连接类中）</p>\n</li>\n<li>\n<p>test：main 函数调用实现，进行 jdbc 实现测试</p>\n</li>\n<li>\n<p>vo：基本的工具类实现，如 Book，Student 类</p>\n</li>\n</ul>\n<h3 id=\"连接池技术\"><a class=\"markdownIt-Anchor\" href=\"#连接池技术\">#</a> 连接池技术</h3>\n<ul>\n<li>\n<p>在一个对象池中保存多个数据库的连接，也称为数据库连接池（Connection Pool），进行数据库操作时，直接从连接池中取出一个数据库连接，当数据库操作完成后，再将此连接放回到数据库连接池中，等待其他用户继续使用，提高访问数据库的效率</p>\n</li>\n<li>\n<p>数据库连接池作用：负责分配、管理和释放数据库连接，允许应用程序重复使用现有的数据库连接，而不是每次都重新创建。</p>\n</li>\n<li>\n<p>连接池的工作机制：数据库连接池在<strong>初始化时</strong>将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数</strong>来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p>\n<p>连接池设置最小和最大连接数考虑因素：</p>\n<ul>\n<li>放置的最小连接要考虑数据库的使用量大不大，最小连接过多会导致资源浪费。</li>\n<li>放置的最大连接要考虑高峰期会是多少，超过该数值会一直等待。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h4>\n<h5 id=\"drivermanager\"><a class=\"markdownIt-Anchor\" href=\"#drivermanager\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1Ecml2ZXJNYW5hZ2VyJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">DriverManager</span> 跟 DataSource 获取 getConnection 有什么不同？</h5>\n<ul>\n<li>\n<p>DriverManager 是获取一个 connection，用完就进行关闭，需要又重新建立连接；</p>\n</li>\n<li>\n<p>Datasource 获取多个 connection 并管理起来，作为数据库连接池；很多第三方连接池都通过实现该接口来做连接池；</p>\n</li>\n</ul>\n<h4 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h4>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmhhaWppbmcvYXJ0aWNsZS9kZXRhaWxzLzg0Mjg0ODQ3\">(231 条消息) Java 中 DriverManager 跟 DataSource 获取 getConnection 有什么不同（Java 中数据源和连接池的区别）_林海静的博客 - CSDN 博客_datasource.getconnection ()</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbWFyazUvcC8xMTY0MTA0Ni5odG1s\">数据库连接池的工作机制是什么 - 双间 - 博客园 (cnblogs.com)</span></p>\n</li>\n</ul>\n",
            "tags": [
                "JDBC"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "Java Web--MVC设计模式",
            "date_published": "2022-10-29T05:38:29.000Z",
            "content_html": "<h3 id=\"mvc设计模式\"><a class=\"markdownIt-Anchor\" href=\"#mvc设计模式\">#</a> MVC 设计模式</h3>\n<p>MVC 设计模式是对软件开发的一中模块划分的方法。将软件程序分为三个核心模块：模型（Model）、视图（View）和控制器（Controller）。</p>\n<ul>\n<li>\n<p><strong>1、模型</strong></p>\n<ul>\n<li>\n<p>作用：管理业务数据，定义访问控制以及修改数据的业务规则。</p>\n</li>\n<li>\n<p>业务流程：当模型状态改变。会通知视图发生改变，为视图提供查询模型状态的方法。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>2、视图</strong></p>\n<ul>\n<li>作用：负责和用户打交道，从模型中获取数据向用户展示，将用户请求传递给控制器处理。</li>\n<li>模型状态改变，视图对用户界面同步更新，保证模型和页面的一致性。</li>\n</ul>\n</li>\n<li>\n<p><strong>3、控制器</strong></p>\n<ul>\n<li>作用：负责处理用户交互，从视图中获取数据，控制用户输入，并向模型发送数据。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"./../../../image/image-20221029134815029.png\" alt=\"image-20221029134815029\"></p>\n<p>控制器接收用户请求，根据信息调用模型组件业务方法，对哦业务信息处理后，根据模型返回结果选择试图组件来显示处理结果和模型中的数据。</p>\n",
            "tags": [
                "MVC"
            ]
        }
    ]
}