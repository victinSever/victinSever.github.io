{
    "version": "https://jsonfeed.org/version/1",
    "title": "眸光似星辰",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/11/26/%E6%9D%82%E8%B0%88/%E9%9D%A2%E8%AF%95/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%B0%B1%E6%98%AF%E5%AD%97%E8%8A%82%EF%BC%8C%E5%A4%A7%E5%85%AC%E5%8F%B8%E7%A1%AE%E5%AE%9Ehr%E6%8C%BA%E5%A5%BD%E7%9A%84%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%88%91%E4%B8%8D%E8%A1%8C/",
            "url": "http://victinsever.github.io/2022/11/26/%E6%9D%82%E8%B0%88/%E9%9D%A2%E8%AF%95/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%B0%B1%E6%98%AF%E5%AD%97%E8%8A%82%EF%BC%8C%E5%A4%A7%E5%85%AC%E5%8F%B8%E7%A1%AE%E5%AE%9Ehr%E6%8C%BA%E5%A5%BD%E7%9A%84%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%88%91%E4%B8%8D%E8%A1%8C/",
            "title": "第一次面试就是字节，大公司确实hr挺好的，就是我不行",
            "date_published": "2022-11-26T05:26:01.000Z",
            "content_html": "<h2 id=\"第一次面试记录\"><a class=\"markdownIt-Anchor\" href=\"#第一次面试记录\">#</a> 第一次面试记录</h2>\n<p>公司： 字节跳动 - 懂车帝</p>\n<p>一面时间：2022-11-25 下午 4:30-5:30</p>\n<p>时长：1hour 左右</p>\n<p>HR 印象：hr 提前了 3 分钟进入会议室，年龄不大，语气很温和，有耐心，给了很多中肯的评价和指导</p>\n<h4 id=\"面试内容\"><a class=\"markdownIt-Anchor\" href=\"#面试内容\">#</a> 面试内容</h4>\n<ul>\n<li>\n<p>1，介绍最近做的项目</p>\n<ul>\n<li>回答：CLF 平台・・・</li>\n</ul>\n</li>\n<li>\n<p>2，你认为最有挑战的是什么，项目中遇到的</p>\n<ul>\n<li>回答：阿里终端训练营做的小项目・・・</li>\n<li>hr 评价：项目做的挺丰富，这点不错（这里有点开心，感觉回答上来了）</li>\n</ul>\n</li>\n<li>\n<p>3，（看了下简历，可能他感觉有点多）你觉得你最擅长哪个技术栈？</p>\n<ul>\n<li>回答：vue，css，喜欢 css 动画（这里给自己挖坑）</li>\n</ul>\n</li>\n<li>\n<p>4，先来个简单的 css 简答题？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: blue;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-sizing</span>: border-box;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.box2</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-sizing</span>: content-box;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1 box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2 box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>问：蓝色部分的面积分别是多少？</p>\n<p>回答：box1 = 10 * 10 ，box2 = 12 * 12</p>\n<p>这个答错了 qaq（正确是 8 * 8, 14 * 14），考的知识点是盒模型和怪异盒模型</p>\n</li>\n<li>\n<p>5，说一说 transition 和 animation 的区别，什么情况使用？</p>\n<p>回答：transition 一般是小的模块，单个 dom 或者只对 dom 内容少时使用，比如在图片放大缩小这种，而 animation 用的比较多，比如做一个长连续动画或者涉及多个 dom 变化的</p>\n<p>hr 给我感觉：好像是答对了，也好像木有答对，就是总结了我混乱不清的言语</p>\n</li>\n<li>\n<p>6，设置一个动画，从右向左逐渐拉伸边长，类似风车打开，说说想法</p>\n<p>回答：有点忘了怎么回答的（大致是从内置动画，或者结合 js 考虑显示或隐藏来调用动画）</p>\n</li>\n<li>\n<p>7，考一下 vue 的知识，设计一个组件，有传入数据内置内容功能，也可以调控整个页面的蒙版，就是可以操控全局也可以设置组件内容的功能，说一说想法？（大致是这个意思，说实话，没怎么听懂）</p>\n<p>回答：也忘了怎么回答的</p>\n</li>\n<li>\n<p>8，js 算法</p>\n<figure class=\"highlight javascript\"><figcaption><span>1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>).<span class=\"title function_\">sumOf</span>() <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)(<span class=\"number\">4</span>).<span class=\"title function_\">sumOf</span>() <span class=\"comment\">//10</span></span><br><span class=\"line\"><span class=\"comment\">//后面还有，忘了</span></span><br></pre></td></tr></table></figure>\n<p>问：设计 js 代码，输入结果等于后面的注释</p>\n</li>\n</ul>\n<p>​\t\t这个题没写出来，知识点就是函数柯里化和闭包的封装</p>\n<ul>\n<li>\n<p>9，js 算法</p>\n<figure class=\"highlight javascript\"><figcaption><span>数组转递归树</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">1</span>, <span class=\"attr\">parent</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">2</span>, <span class=\"attr\">parent</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">3</span>, <span class=\"attr\">parent</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;D&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">4</span>, <span class=\"attr\">parent</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;E&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">5</span>, <span class=\"attr\">parent</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;F&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">6</span>, <span class=\"attr\">parent</span>: <span class=\"number\">5</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;G&#x27;</span>, <span class=\"attr\">key</span>: <span class=\"number\">7</span>, <span class=\"attr\">parent</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseTree</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tree = <span class=\"title function_\">reverseTree</span>(list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tree);</span><br></pre></td></tr></table></figure>\n<p>问：写出 reverseTree ()，使结果为递归树</p>\n<p>回答：</p>\n<figure class=\"highlight javascript\"><figcaption><span>数组转递归树</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseTree</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> map = &#123;&#125;, node, tree= [], i;</span><br><span class=\"line\">    <span class=\"comment\">// 将数组所有节点用对象装取成树状</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; list.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        map[list[i].<span class=\"property\">key</span>] = list[i]; </span><br><span class=\"line\">        list[i].<span class=\"property\">children</span> = []; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; list.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        node = list[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            map[node.<span class=\"property\">parent</span>].<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            tree.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>面试官补充：你有什么想问的吗？</p>\n<p>反问：你对我的评价是怎么样的？</p>\n<p>hr：语言表达可以，项目也有特色，很多知识都有涉及，但是有点庞杂，显得不太精，需要多专一个知识，找一个方向特别精通的地步</p>\n<p>hr：可以看看网络的知识，缓存，懒加载等等，比如三次握手和四次挥手，以及・・・・（我心想，这些你也没问也），vue 更加深层的应用，毕竟不能只是应用技术，还要做拓展和深入研究，</p>\n<p>我：这些我都学习了解了的</p>\n<p>hr：没事，面试不是第一次，每次期待下一次（凉了！~）</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>问的其实都不难，就是问的比较深入，喜欢搞一些大项目中的高阶用法，和很多多层封装考得多，个人认为确实要把一些技术搞的牢固一些，然后可以做自己的开源项目，用自己的熟悉技术不断迭代，高阶知识自然用上了。</p>\n<p>第一次面试虽凉了，但是收获还是不错的，说紧张，也只是面试官没进入会议可能紧张，其他时候也就是写不出代码紧张了，在想什么呢（今晚吃啥呢，好吧，我在封寝～～～）</p>\n",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/11/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "http://victinsever.github.io/2022/11/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "跨域的三种解决方案",
            "date_published": "2022-11-22T14:13:24.000Z",
            "content_html": "<p>[原文链接]([什么是跨域 &amp; 跨域的3种解决方案 - n031 - 博客园 (cnblogs.com)](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjOn46dGV4dD0lRTQlQjglQkElRTQlQkElODYlRTglQTclQTMlRTUlODYlQjMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTglQjclQTglRTUlOUYlOUYlRTklOTclQUUlRTklQTIlOTglRUYlQkMlOENXM0M=\">https://www.cnblogs.com/n031/p/11828797.html#:~:text=为了解决浏览器跨域问题，W3C</span> 提出了跨源资源共享方案，即 CORS (Cross-Origin Resource,Sharing)。 CORS 可以在不破坏即有规则的情况下，通过后端服务器实现 CORS 接口，就可以实现跨域通信。)</p>\n<h1 id=\"什么是跨域-amp-跨域的解决方案\"><a href=\"#什么是跨域-amp-跨域的解决方案\" class=\"headerlink\" title=\"什么是跨域 &amp; 跨域的解决方案\"></a>什么是跨域 &amp; 跨域的解决方案</h1><h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）端口号（port）</p>\n<p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器<strong>安全的基石</strong></p>\n<p>同源策略会阻止一个域的 javascript 脚本和另外一个域的内容进行交互。例如办公内外网环境，当我们访问外网一个恶意网站的时候，恶意网站就会利用我们的主机向内网的 url 发送 ajax 请求，破坏或盗取数据。</p>\n<p>所谓跨域，就是引发的非同源限制，会导致：</p>\n<ul>\n<li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li>\n<li>无法接触非同源网页的 DOM</li>\n<li>无法向非同源地址发送 AJAX 请求，即 XHR 请求</li>\n</ul>\n<h2 id=\"跨域解决思路\"><a href=\"#跨域解决思路\" class=\"headerlink\" title=\"跨域解决思路\"></a>跨域解决思路</h2><ul>\n<li>思路1 （避免同源限制）<ul>\n<li>客户端浏览器不做限制，在指定参数时不校验（不合理，因为不可能人人浏览器这样设置）</li>\n<li>不发出XHR请求，旧不会有跨域出现，通过JSONP的方案：即通过动态创建一个script标签然后通过标签发起请求</li>\n</ul>\n</li>\n<li>思路2（跨域资源共享）<ul>\n<li>W3C的跨域资源解决方案推荐：被调用的方加上字段，告诉浏览器该网站支持跨域，即设置请求头允许跨域</li>\n</ul>\n</li>\n<li>思路3（隐藏跨域方案）<ul>\n<li>通过Nginx反向代理，在 a 域名里面的的请求地址使用反向代理指向 b 域名，让浏览器以为一直在访问 a 网站，不触发跨域限制</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP#\"></a>JSONP<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnA=\">#</span></h2><ul>\n<li>普通请求值 XHR，希望得到服务端返回的 content-type 一般是 json</li>\n<li>JSONP 发出的是 script 请求，希望得到的返回是 js 脚本</li>\n</ul>\n<blockquote>\n<p>Content-Type 是指 http&#x2F;https 发送信息至服务端时的内容编码类型，在 HTTP 协议消息头中，使用 Content-Type 来表示请求和响应中的媒体类型信息。它用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析并展示 html 等等。</p>\n<p><strong>并不是请求或响应独有的参数</strong></p>\n</blockquote>\n<h3 id=\"JSONP-原理\"><a href=\"#JSONP-原理\" class=\"headerlink\" title=\"JSONP 原理#\"></a>JSONP 原理<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnAtJUU1JThFJTlGJUU3JTkwJTg2\">#</span></h3><p>以 JQuery 为例，发送 ajax 请求的时候，设置<code>dataType:&quot;jsonp&quot;</code>，将使用 JSONP 方式调用函数，函数的 url 变为<code>myurl?callback=e5bbttt</code>的形式，e5bbttt 就是一个临时方法名，后端会根据<code>callback</code>的值返回一个 js 脚本，如</p>\n<figure class=\"highlight html\"><figcaption><span>jsonp</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">e5bbttt</span>(&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;b&quot;</span>:<span class=\"string\">&quot;bbb&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>JQuery 会提前根据 ajax 中 success 的内容生成一个临时函数，名字就是 xxx</p>\n<figure class=\"highlight javascript\"><figcaption><span>jquery</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&quot;jsonp&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"property\">a</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"property\">b</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">jsonp</span>:<span class=\"string\">&quot;e5bbttt&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JQuery 生成的临时函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">e5bbttt</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    ajaxObject.<span class=\"title function_\">success</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务端返回给客户端的<code>e5bbttt(&#123;&quot;a&quot;:&quot;aaa&quot;,&quot;b&quot;:&quot;bbb&quot;&#125;);</code>，相当于调用立即（？）调用了 JQuery 生成的<code>e5bbttt</code>函数，用完这个函数就销毁了（？）</p>\n<p>JSONP 也算是一个约定俗成的“协议”，callback 是约定俗成的作为定义临时函数名的参数。如果想自定义这个参数名，需要在 ajax 中用 jsonp 属性定义。</p>\n<h3 id=\"JSONP-的弊端\"><a href=\"#JSONP-的弊端\" class=\"headerlink\" title=\"JSONP 的弊端#\"></a>JSONP 的弊端<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnAtJUU3JTlBJTg0JUU1JUJDJThBJUU3JUFCJUFG\">#</span></h3><ol>\n<li>需要服务器改动代码</li>\n<li>只支持 GET 请求</li>\n<li>发送的不是 xhr 请求</li>\n<li><strong>不安全</strong></li>\n</ol>\n<h2 id=\"后端解决跨域\"><a href=\"#后端解决跨域\" class=\"headerlink\" title=\"后端解决跨域#\"></a>后端解决跨域<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU4JUE3JUEzJUU1JTg2JUIzJUU4JUI3JUE4JUU1JTlGJTlG\">#</span></h2><p>跟用户数据有关的就是动态请求，没有数据的是静态请求，比如 css js，so，HTTP 服务器（Apache、Nginx 等）至少做了两个作用</p>\n<ul>\n<li>HTTP 服务器，处理静态请求</li>\n<li>反向代理，负载均衡</li>\n</ul>\n<p>在服务器端解决跨域有2种解决思路</p>\n<ul>\n<li>在被调用后端应用解决：在响应头增加指定字段，告诉浏览器允许调用。这种解决方案的请求是直接从浏览器发送给后端服务器，在浏览器上会看到 b.com 的 url</li>\n<li>在前端服务器解决：这是隐藏跨域的解决方案。这种跨域请求不是直接从浏览器发送的，而是从中间的 http 服务器（前端应用所在服务器）转发过去的，在浏览器中看到的还是 a.com 的 url，所以不会认为是跨域。但是该到 b.com 的请求还是会到 b.com</li>\n</ul>\n<h3 id=\"跨域原理及后端解决思路\"><a href=\"#跨域原理及后端解决思路\" class=\"headerlink\" title=\"跨域原理及后端解决思路#\"></a>跨域原理及后端解决思路<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU4JUI3JUE4JUU1JTlGJTlGJUU1JThFJTlGJUU3JTkwJTg2JUU1JThGJThBJUU1JTkwJThFJUU3JUFCJUFGJUU4JUE3JUEzJUU1JTg2JUIzJUU2JTgwJTlEJUU4JUI3JUFG\">#</span></h3><p>依据浏览器同源策略，非同源脚本不可操作其他源下面的对象。想要操作其他源下的对象就需要跨域。综上所述，在同源策略的限制下，非同源的网站之间不能发送 ajax 请求。如有需要，可通过降域或其他技术实现。</p>\n<p>为了解决浏览器跨域问题，W3C 提出了跨源资源共享方案，即 CORS(Cross-Origin Resource Sharing)。</p>\n<p>CORS 可以在不破坏即有规则的情况下，通过后端服务器实现 CORS 接口，就可以实现跨域通信。</p>\n<p>CORS 将请求分为两类：简单请求和非简单请求，分别对跨域通信提供了支持。</p>\n<h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求#\"></a>简单请求<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU3JUFFJTgwJUU1JThEJTk1JUU4JUFGJUI3JUU2JUIxJTgy\">#</span></h4><ol>\n<li>在 CORS 出现前，发送 HTTP 请求时在头信息中不能包含任何自定义字段，且 HTTP 头信息不超过以下几个字段：<ol>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type 仅为这3种<ul>\n<li>application&#x2F;x-www-form-urlencoded</li>\n<li>multipart&#x2F;form-data</li>\n<li>text&#x2F;plain</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>请求方法是 GET HEAD POST 且满足条件1</li>\n</ol>\n<p>一个简单请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/test</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>*/*</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, sdch, br</span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://www.test.com</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.test.com</span><br></pre></td></tr></table></figure>\n\n<p>对于简单请求，CORS 的策略是请求时在请求头中增加一个 Origin 字段，表示请求发出的域。服务器收到请求后，根据该字段判断是否允许该请求访问。</p>\n<ul>\n<li>如果允许，则在 HTTP 头信息中添加 Access-Control-Allow-Origin 字段，并返回正确的结果</li>\n<li>如果不允许，则不添加 Access-Control-Allow-Origin 字段</li>\n</ul>\n<p>除了上面提到的 Access-Control-Allow-Origin，还有几个字段用于描述 CORS 返回结果</p>\n<ul>\n<li>Access-Control-Allow-Credentials：可选，用户是否可以发送、处理cookie</li>\n<li>Access-Control-Expose-Headers：可选，可以让用户拿到的字段。有几个字段无论是否允许跨域都可以拿到的：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</li>\n</ul>\n<h4 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求#\"></a>非简单请求<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU5JTlEJTlFJUU3JUFFJTgwJUU1JThEJTk1JUU4JUFGJUI3JUU2JUIxJTgy\">#</span></h4><p>一般是发送 JSON 格式的 ajax 请求，或带有自定义头的请求</p>\n<p>对于非简单请求的跨源请求，浏览器会在真实请求发出前，增加一次 OPTION 请求，称为预检请求(preflightrequest)。预检请求将真实请求的信息，包括请求方法、自定义头字段、源信息添加到 HTTP 头信息字段中，询问服务器是否允许这样的操作</p>\n<p>例如一个 GET 请求的预检请求，包含一个自定义参数 X-Custom-Header</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPTIONS</span> <span class=\"string\">/test</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://www.test.com</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Method</span><span class=\"punctuation\">: </span>GET // 请求使用的 HTTP 方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Headers</span><span class=\"punctuation\">: </span>X-Custom-Header // 请求中包含的自定义头字段</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.test.com</span><br></pre></td></tr></table></figure>\n\n<p><em>服务器收到请求时，需要分别对 Origin、Access-Control-Request-Method、Access-Control-Request-Headers 进行验证，验证通过后，会在返回 HTTP 头信息中添加：</em></p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span><span class=\"punctuation\">: </span>http://www.test.com // 允许的域</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Methods</span><span class=\"punctuation\">: </span>GET, POST, PUT, DELETE // 允许的方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Headers</span><span class=\"punctuation\">: </span>X-Custom-Header // 允许的自定义字段</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span><span class=\"punctuation\">: </span>true // 是否允许用户发送、处理 cookie</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Max-Age</span><span class=\"punctuation\">: </span>172800 // 预检请求的有效期，单位为秒。有效期内，不需要发送预检请求，ps 48小时</span><br></pre></td></tr></table></figure>\n\n<p><em>当预检请求通过后，浏览器才会发送真实请求到服务器。这样就实现了跨域资源的请求访问。</em></p>\n<p>所以后端处理其实处理的就是这次预检请求</p>\n<h3 id=\"后端应用处理-Filter-amp-HttpServletResponse-方法\"><a href=\"#后端应用处理-Filter-amp-HttpServletResponse-方法\" class=\"headerlink\" title=\"后端应用处理 - Filter&amp;HttpServletResponse 方法#\"></a>后端应用处理 - Filter&amp;HttpServletResponse 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU1JUJBJTk0JUU3JTk0JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tZmlsdGVyaHR0cHNlcnZsZXRyZXNwb25zZS0lRTYlOTYlQjklRTYlQjMlOTU=\">#</span></h3><p>这种方法不会用到 Spring，对 Servlet 也可以使用</p>\n<p>在 web.xml 中配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>webFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.n031.filter.WebFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>webFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>编写 java 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebFliter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">req</span> <span class=\"operator\">=</span> (HttpServletRequest)request;</span><br><span class=\"line\">        <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> (HttpServletResponse) response;</span><br><span class=\"line\">        <span class=\"comment\">// 允许跨域的域名，设置*表示允许所有域名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">origin</span> <span class=\"operator\">=</span> req.getHeader(<span class=\"string\">&quot;Origin&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;abcdefg&quot;</span>.contains(origin)) &#123;  <span class=\"comment\">// 满足指定的条件</span></span><br><span class=\"line\">            res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;http://www.test.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许跨域的方法，可设置*表示所有</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;GET, POST, PUT, DELETE&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许的自定义字段</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> req.getHeader(<span class=\"string\">&quot;Access-Control-Request-Headers&quot;</span>); <span class=\"comment\">// 获取 request 发来的自定义字段</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, headers);</span><br><span class=\"line\">        <span class=\"comment\">// 或者</span></span><br><span class=\"line\">        <span class=\"comment\">// res.addHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Custom-Header&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 预检请求的有效期，单位为秒。有效期内，不需要发送预检请求，ps 48小时</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;172800&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 还可以有其他配置...</span></span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端应用处理-Spring-方法\"><a href=\"#后端应用处理-Spring-方法\" class=\"headerlink\" title=\"后端应用处理 - Spring 方法#\"></a>后端应用处理 - Spring 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU1JUJBJTk0JUU3JTk0JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tc3ByaW5nLSVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span></h3><p>Spring 解决跨域的方法很多，感觉就和茴字有五种写法一样。这里列举的并不全。</p>\n<p>先看下原理。说实话虽然搞不懂为什么这么做，但看了下这个类的源码确实是这么写的。</p>\n<p>本质都是构造<code>CorsConfiguration</code>然后委托给<code>DefaultCorsProcessor</code>实现（责任链模式，要学的东西好多啊…）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedOrigins;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedMethods;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; exposedHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean allowCredentials;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long maxAge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>DefaultCorsProcessor</code>的<code>processRequest</code>处理步骤如下（<code>spring-web 5.1.8-RELEASE</code>）</p>\n<ol>\n<li>判断是否是包含 Origin 字段，不包含就放行，否则继续判断</li>\n<li>判断 Response 的 Header 是否已经包含 Access-Control-Allow-Origin。如果包含，证明已经被处理过了，放行，否则继续判断</li>\n<li>判断是否同源，如果是则放行，否则继续判断</li>\n<li>到此步基本已经得出这是个跨域请求的结论。然后看配置了 CORS 规则<ul>\n<li>没有配置，且是预检请求，则拒绝该请求<em>（说明该应用禁止跨域）</em></li>\n<li>没有配置，且不是预检请求，跳过跨域处理<em>（有可能导致返回数据被浏览器拦截）</em></li>\n<li>配置了，则根据配置的规则（<code>CorsConfiguration</code>）决定是否放行</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"在-Controller-上添加-CrossOrigin-注解\"><a href=\"#在-Controller-上添加-CrossOrigin-注解\" class=\"headerlink\" title=\"在 Controller 上添加 @CrossOrigin 注解#\"></a>在 Controller 上添加 @CrossOrigin 注解<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTlDJUE4LWNvbnRyb2xsZXItJUU0JUI4JThBJUU2JUI3JUJCJUU1JThBJUEwLWNyb3Nzb3JpZ2luLSVFNiVCMyVBOCVFOCVBNyVBMw==\">#</span></h4><p>这种方式适合只有一两个 rest 接口需要跨域或者没有网关的情况下，这种处理方式就非常简单，适合在原来基代码基础上修改，影响比较小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CrossOrigin(allowCredentials = &quot;true&quot;, allowedHeaders = &quot;*&quot;, methods = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.DELETE&#125;, origins = &quot;*&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/abc&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">handler</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String json)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增加-WebMvcConfigurer-全局配置\"><a href=\"#增加-WebMvcConfigurer-全局配置\" class=\"headerlink\" title=\"增加 WebMvcConfigurer 全局配置#\"></a>增加 WebMvcConfigurer 全局配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JUEyJTlFJUU1JThBJUEwLXdlYm12Y2NvbmZpZ3VyZXItJUU1JTg1JUE4JUU1JUIxJTgwJUU5JTg1JThEJUU3JUJEJUFF\">#</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)<span class=\"comment\">// 允许跨域的访问路径</span></span><br><span class=\"line\">            .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)<span class=\"comment\">// 允许跨域访问的源</span></span><br><span class=\"line\">            .allowedMethods(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>)<span class=\"comment\">// 允许请求方法</span></span><br><span class=\"line\">            .maxAge(<span class=\"number\">172800</span>)<span class=\"comment\">// 预检间隔时间</span></span><br><span class=\"line\">            .allowCredentials(<span class=\"literal\">true</span>);<span class=\"comment\">// 是否允许发送 cookie</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意由于 Java8 开始支持 default method，这个类从 spring 5.0 开始已经过期，未来这个方法将转移到<code>WebMvcConfigurer</code>接口中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结合-Filter-使用\"><a href=\"#结合-Filter-使用\" class=\"headerlink\" title=\"结合 Filter 使用#\"></a>结合 Filter 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU3JUJCJTkzJUU1JTkwJTg4LWZpbHRlci0lRTQlQkQlQkYlRTclOTQlQTg=\">#</span></h4><p>其实和方法2类似，都是构造<code>CorsConfiguration</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class=\"title function_\">corsFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否发送cookie</span></span><br><span class=\"line\">        config.setAllowCredentials(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许的网站域名，全允许则设为 *</span></span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">&quot;http://localhost:8088&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许 HEADER 或 METHOD ， * 为全部</span></span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>, config);</span><br><span class=\"line\">        FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">CorsFilter</span>(source));</span><br><span class=\"line\">        <span class=\"comment\">// 这个顺序很重要，为避免麻烦请设置在最前</span></span><br><span class=\"line\">        bean.setOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上这种方案如果微服务多的话，需要在每个服务的主类上都加上这么段代码，增加了维护量。</p>\n<p>这三种方案都是在 SpringBoot 的基础上实现的解决方案，在模块较多或者接口较多的情况下不易维护。</p>\n<p>既然 Spring Cloud 自带 Gateway，下面就讲讲使用 Gateway 的跨域解决方案。（Gateway 是取代不断跳票的 Zuul 的新一代网关）</p>\n<h4 id=\"在-Gateway-增加-CorsFilter-拦截器\"><a href=\"#在-Gateway-增加-CorsFilter-拦截器\" class=\"headerlink\" title=\"在 Gateway 增加 CorsFilter 拦截器#\"></a>在 Gateway 增加 CorsFilter 拦截器<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTlDJUE4LWdhdGV3YXktJUU1JUEyJTlFJUU1JThBJUEwLWNvcnNmaWx0ZXItJUU2JThCJUE2JUU2JTg4JUFBJUU1JTk5JUE4\">#</span></h4><p><em><strong>4 5 方法未验证</strong></em></p>\n<p>这种方案跟方案三有些类似，只不过是放到了 Gateway 端，对于有多个微服务模块的情况下，就大大减少了 SpringBoot 模块端的代码量，让各个模块更集中精力做业务逻辑实现。这个方案只需要在 Gateway 里添加 Filter 代码类即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.cors.CorsUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.WebFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsWebFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ALL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MAX_AGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;18000&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange ctx, WebFilterChain chain)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerHttpRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ctx.getRequest();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> request.getPath().value();</span><br><span class=\"line\">        <span class=\"type\">ServerHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> ctx.getResponse();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;/favicon.ico&quot;</span>.equals(path)) &#123;</span><br><span class=\"line\">            response.setStatusCode(HttpStatus.OK);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Mono.empty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CorsUtils.isCorsRequest((HttpServletRequest) request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(ctx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpHeaders</span> <span class=\"variable\">requestHeaders</span> <span class=\"operator\">=</span> request.getHeaders();</span><br><span class=\"line\">        <span class=\"type\">HttpMethod</span> <span class=\"variable\">requestMethod</span> <span class=\"operator\">=</span> requestHeaders.getAccessControlRequestMethod();</span><br><span class=\"line\">        <span class=\"type\">HttpHeaders</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> response.getHeaders();</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, requestHeaders.getOrigin());</span><br><span class=\"line\">        headers.addAll(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, requestHeaders.getAccessControlRequestHeaders());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestMethod != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, requestMethod.name());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, ALL);</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_MAX_AGE, MAX_AGE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getMethod() == HttpMethod.OPTIONS) &#123;</span><br><span class=\"line\">            response.setStatusCode(HttpStatus.OK);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Mono.empty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.filter(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改-Gateway-配置文件\"><a href=\"#修改-Gateway-配置文件\" class=\"headerlink\" title=\"修改 Gateway 配置文件#\"></a>修改 Gateway 配置文件<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU0JUJGJUFFJUU2JTk0JUI5LWdhdGV3YXktJUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2\">#</span></h4><p>在仔细阅读过 Gateway 的文档你就会发现，原来 CorsFilter 早已经在 Gateway 里了，不需要自己写代码实现，而且更灵活，修改配置文件即可，结合配置中心使用，可以实现动态修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">globalcors:</span></span><br><span class=\"line\">        <span class=\"attr\">corsConfigurations:</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;[/**]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">            <span class=\"attr\">allowedOrigins:</span> <span class=\"string\">&quot;docs.spring.io&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">allowedMethods:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">GET</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端服务器处理-Ngnix-方法\"><a href=\"#后端服务器处理-Ngnix-方法\" class=\"headerlink\" title=\"后端服务器处理 - Ngnix 方法#\"></a>后端服务器处理 - Ngnix 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tbmduaXgtJUU2JTk2JUI5JUU2JUIzJTk1\">#</span></h3><p>这里的 Nginx 尽做反向代理功能，浏览器访问页面在 a.com 的 Nginx 上，ajax 请求接口是 b.com，所以浏览器认为是跨域</p>\n<p>Nginx 在 nginx.conf 上配（vhost 是约定做法，这样做不修改主文件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include vhost/*.config;</span><br></pre></td></tr></table></figure>\n\n<p>创建 cors.conf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80; // 监听80端口</span><br><span class=\"line\">    server_name b.com; // 监听向 b.com 发送的请求</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://ser432ver.53253bb.com:8080; // 转发到哪里</span><br><span class=\"line\"></span><br><span class=\"line\">        // Filter实现的功能在Nginx上再实现一遍</span><br><span class=\"line\"></span><br><span class=\"line\">        add_header Access-Control-Allow-Origin $http_origin; // $http_ 可以获取请求中相应的 header 参数</span><br><span class=\"line\">        add_header Access-Control-Allow-Method *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers X-Custom-Header;</span><br><span class=\"line\">        // 或者</span><br><span class=\"line\">        // add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        add_header Access-Max-age 172800;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 直接处理预检命令，if 后要带空格</span><br><span class=\"line\">        if ($request_method = OPTIONS) &#123;</span><br><span class=\"line\">            return 200;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前端服务器解决跨域\"><a href=\"#前端服务器解决跨域\" class=\"headerlink\" title=\"前端服务器解决跨域#\"></a>前端服务器解决跨域<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTg5JThEJUU3JUFCJUFGJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUU4JUE3JUEzJUU1JTg2JUIzJUU4JUI3JUE4JUU1JTlGJTlG\">#</span></h2><p>但其实大部分情况下，我们会把前端应用和请求转发放在同一台 Nginx 上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80; // 监听80端口</span><br><span class=\"line\">    server_name a.com; // 监听向 a.com 发送的请求</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    locltion /ajaxserver &#123;</span><br><span class=\"line\">        proxy_pass http://ser432ver.53253bb.com:8080; // 后端地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样实质是隐藏跨域，让浏览器认为没有访问其他域就不会发生跨域。</p>\n<p>前端代码需要在每个 ajax 请求前都要加上<code>/ajaxserver</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料#\"></a>参考资料<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JThGJTgyJUU4JTgwJTgzJUU4JUI1JTg0JUU2JTk2JTk5\">#</span></h2><blockquote>\n<p>ajax跨域完全讲解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzk0Nw==\">https://www.imooc.com/learn/947</span></p>\n<p>SpringBoot使用CORS解决跨域请求问题</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vNzc4OElUL3AvMTA2OTMwNzMuaHRtbA==\">https://www.cnblogs.com/7788IT/p/10693073.html</span></p>\n<p>Spring MVC之@RequestParam @RequestBody @RequestHeader 等详解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bW1lclN1blN0YXJ0L2FydGljbGUvZGV0YWlscy83ODY3Njc4MQ==\">https://blog.csdn.net/summerSunStart/article/details/78676781</span></p>\n<p>你不知道的「跨域 CORS」</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hYmI1ZjZiZjkyYzM=\">https://www.jianshu.com/p/abb5f6bf92c3</span></p>\n<p>关于跨域问题和安全性的一点理解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pheXRhbGVudC9hcnRpY2xlL2RldGFpbHMvNTIyMTM1NzY=\">https://blog.csdn.net/jaytalent/article/details/52213576</span></p>\n<p>浅谈跨域威胁与安全</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzIwODY3Mi5odG1s\">https://www.freebuf.com/articles/web/208672.html</span></p>\n<p>cors跨域中关于access-control-allow-headers导致的错误</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jZWNiNzNiMjZhMTE=\">https://www.jianshu.com/p/cecb73b26a11</span></p>\n<p>什么是跨域？跨域解决方法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTI4MTc5L2FydGljbGUvZGV0YWlscy84NDk1NjU1Mg==\">https://blog.csdn.net/qq_38128179/article/details/84956552</span></p>\n<p>Spring Cloud配置跨域访问的五种方案？你用的是哪一种呢？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzE4ODI5Ng==\">https://segmentfault.com/a/1190000017188296</span></p>\n<p>servlet跨域请求</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTM1NjE1L2FydGljbGUvZGV0YWlscy84MjkwMDc4Ng==\">https://blog.csdn.net/qq_34135615/article/details/82900786</span></p>\n<p>跨域(CORS) 解决方案中，为什么 Access-Control-Allow-Methods 不起作用？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNTA2NzU1Mi9hLTEwMjAwMDAwMDUwNjc4MjI=\">https://segmentfault.com/q/1010000005067552/a-1020000005067822</span></p>\n</blockquote>\n",
            "tags": [
                "跨域"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/14/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/WebSocket%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/",
            "url": "http://victinsever.github.io/2022/11/14/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/WebSocket%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/",
            "title": "WebSocket客户端和服务端的简单实现",
            "date_published": "2022-11-14T01:43:06.000Z",
            "content_html": "<h1 id=\"WebSocket客户端和服务端的简单实现\"><a href=\"#WebSocket客户端和服务端的简单实现\" class=\"headerlink\" title=\"WebSocket客户端和服务端的简单实现\"></a>WebSocket客户端和服务端的简单实现</h1><h2 id=\"WebSocket-客户端页面实现\"><a href=\"#WebSocket-客户端页面实现\" class=\"headerlink\" title=\"WebSocket 客户端页面实现\"></a>WebSocket 客户端页面实现</h2><p>本地访问服务端地址为：ws:&#x2F;&#x2F;localhost:8080&#x2F;WebSocket_war_exploded&#x2F;websocket</p>\n<figure class=\"highlight html\"><figcaption><span>WebSocket 客户端页面实现</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WebSocket测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align: center;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>WebSocket测试<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txt&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;sendWebSocket()&quot;</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;checkWebSocket()&quot;</span>&gt;</span>测试WebSocket<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;connectWebSocket()&quot;</span>&gt;</span>连接WebSocket<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;closeWebSocket()&quot;</span>&gt;</span>关闭WebSocket<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> websocket = <span class=\"literal\">null</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">checkWebSocket</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;WebSocket&quot;</span> <span class=\"keyword\">in</span> <span class=\"variable language_\">window</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// alert(&quot;您的浏览器支持 WebSocket!&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;您的浏览器支持 WebSocket!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 浏览器不支持 WebSocket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// alert(&quot;您的浏览器不支持 WebSocket!&quot;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;您的浏览器不支持 WebSocket!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 连接  WebSocket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">connectWebSocket</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 打开一个 web socket</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        websocket = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(<span class=\"string\">&quot;ws://localhost:8080/WebSocket_war_exploded/websocket&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        websocket.<span class=\"property\">onopen</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;<span class=\"comment\">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;WebSocket 已连接...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        websocket.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">var</span> received_msg = evt.<span class=\"property\">data</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;收到消息：&quot;</span> + received_msg);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        websocket.<span class=\"property\">onclose</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;WebSocket 已关闭...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 向WebSocket服务端发送消息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">sendWebSocket</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (websocket) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (websocket.<span class=\"property\">readyState</span> == websocket.<span class=\"property\">OPEN</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> message = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;txt&#x27;</span>).<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                websocket.<span class=\"title function_\">send</span>(message);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;WebSocket 未连接...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"string\">&quot;WebSocket 未创建...&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">window</span>.<span class=\"property\">onbeforeunload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">closeWebSocket</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 关闭WebSocket连接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">closeWebSocket</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        websocket.<span class=\"title function_\">close</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 将消息显示在网页上</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">setMessageInnerHTML</span>(<span class=\"params\">innerHTML</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;message&#x27;</span>).<span class=\"property\">innerHTML</span> += innerHTML + <span class=\"string\">&#x27;&lt;br/&gt;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WebSocket-服务端-Java-实现\"><a href=\"#WebSocket-服务端-Java-实现\" class=\"headerlink\" title=\"WebSocket 服务端 Java 实现\"></a>WebSocket 服务端 Java 实现</h2><p>由于本人没了解spring框架，对其研究不深，这里用简单的Tomcat的java端实现。</p>\n<ul>\n<li><p>新建一个Maven Web工程，在pom.xml中加入如下websocket依赖：</p>\n<figure class=\"highlight xml\"><figcaption><span>pom.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.websocket<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.websocket-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑一个 WebSocket 服务端类：MyWebSocket.java</p>\n<pre><code class=\"java\">package com.test.websocket;\n\nimport java.io.IOException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(&quot;/websocket&quot;)\npublic class MyWebSocket &#123;\n\n    private Session session;\n\n    /**\n     * 连接建立后触发的方法\n     */\n    @OnOpen\n    public void onOpen(Session session) &#123;\n        this.session = session;\n        WebSocketMapUtil.put(session.getId(), this);\n        System.out.println(&quot;-------- onOpen: 当前在线人数 &quot; + WebSocketMapUtil.getOnlineCount() + &quot;，连接人 &quot; + session.getId() + &quot; --------&quot;);\n    &#125;\n\n    /**\n     * 连接关闭后触发的方法\n     */\n    @OnClose\n    public void onClose() &#123;\n        // 从map中删除\n        WebSocketMapUtil.remove(session.getId());\n        System.out.println(&quot;-------- onClose: 当前在线人数 &quot; + WebSocketMapUtil.getOnlineCount() + &quot;，关闭人 &quot; + session.getId() + &quot; --------&quot;);\n    &#125;\n\n    /**\n     * 接收到客户端消息时触发的方法\n     */\n    @OnMessage\n    public void onMessage(String message, Session session) throws Exception &#123;\n        // 获取服务端到客户端的通道\n        MyWebSocket myWebSocket = WebSocketMapUtil.get(session.getId());\n        System.out.println(&quot;收到来自 &quot; + session.getId() + &quot; 的消息：&quot; + message);\n\n        // 返回消息给Web Socket客户端（浏览器）\n        myWebSocket.sendMessageAll(&quot;服务端已收到消息：&quot; + message);\n    &#125;\n\n    /**\n     * 发生错误时触发的方法\n     */\n    @OnError\n    public void onError(Session session, Throwable error) &#123;\n        System.out.println(&quot;-------- onError: 当前在线人数 &quot; + WebSocketMapUtil.getOnlineCount() + &quot;，连接发生错误 &quot; + session.getId() + &quot;-&quot; + error.getMessage() + &quot; --------&quot;);\n        // error.printStackTrace();\n    &#125;\n\n    /**\n     * 给单个客户端发送消息\n     *\n     * @param message\n     * @param sessionId\n     * @throws IOException\n     */\n    public void sendMessageSingle(String message, String sessionId) throws IOException &#123;\n\n        // session.getBasicRemote().sendText(message); 同步消息\n        // session.getAsyncRemote().sendText(message); 异步消息\n\n        MyWebSocket myWebSocket = WebSocketMapUtil.get(sessionId);\n        if (myWebSocket != null) &#123;\n            myWebSocket.session.getBasicRemote().sendText(message);\n        &#125;\n    &#125;\n\n    /**\n     * 给所有客户端发送消息\n     *\n     * @param message\n     * @throws IOException\n     */\n    public void sendMessageAll(String message) throws IOException &#123;\n        for (MyWebSocket item : WebSocketMapUtil.getValues()) &#123;\n            item.session.getAsyncRemote().sendText(message);\n            System.out.println(item.session.getId());\n            System.out.println(item.session.isSecure());\n            System.out.println(item.session.isOpen());\n        &#125;\n    &#125;\n\n&#125;\n</code></pre>\n</li>\n<li><p>编辑一个 WebSocket 工具类：WebSocketMapUtil.java</p>\n<p>&#96;&#96;&#96;java WebSocketMapUtil<br>package com.test.websocket;</p>\n<p>import java.util.Collection;<br>import java.util.concurrent.ConcurrentHashMap;<br>import java.util.concurrent.ConcurrentMap;</p>\n<p>public class WebSocketMapUtil {<br>public static ConcurrentMap&lt;String, MyWebSocket&gt; webSocketMap &#x3D; new ConcurrentHashMap&lt;&gt;();<br><br>public static void put(String key, MyWebSocket myWebSocket) {<br>    webSocketMap.put(key, myWebSocket);<br>}<br><br>public static MyWebSocket get(String key) {<br>    return webSocketMap.get(key);<br>}<br><br>public static void remove(String key) {<br>    webSocketMap.remove(key);<br>}<br><br>public static Collection<MyWebSocket> getValues() {<br>    return webSocketMap.values();<br>}<br><br>public static int getOnlineCount() {<br>    return webSocketMap.size();<br>}<br>}</p>\n</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>项目运行结果：</p>\n<p><img data-src=\"/../../../image/image-20221114095607448.png\" alt=\"image-20221114095607448\"></p>\n<p>测试结果：</p>\n<p><img data-src=\"/../../../image/image-20221114095725205.png\" alt=\"image-20221114095725205\"></p>\n<p>网络连接分析</p>\n<p><img data-src=\"/../../../image/image-20221114100227219.png\" alt=\"image-20221114100227219\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>客户端通过<code>new WebSocket(url)</code>向服务器请求建立websocket连接，服务端收到请求后对其建立全双工信道，并重写一些方法对客户端的操作进行响应，每次客户端则直接通过<code>send()</code>方法发送前端信息给后端，后端进行处理。</p>\n<p>当浏览器关闭时，websocket连接自动断掉。</p>\n<p>以上就是websocket简单应用实例，只是应用的话还是比较基础的。</p>\n",
            "tags": [
                "WebSocket"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "url": "http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "title": "动态规划五部曲-爬楼梯问题",
            "date_published": "2022-11-12T04:29:03.000Z",
            "content_html": "<h1 id=\"动态规划基本分析方法爬楼梯问题\"><a class=\"markdownIt-Anchor\" href=\"#动态规划基本分析方法爬楼梯问题\">#</a> 动态规划基本分析方法（爬楼梯问题）</h1>\n<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>假设你正在爬楼梯。需要  <code>n</code>  阶你才能到达楼顶。</p>\n<p>每次你可以爬  <code>1</code>  或  <code>2</code>  个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<h2 id=\"动态规划五部曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五部曲\">#</a> 动态规划五部曲</h2>\n<p>动态规划是将复杂问题分解成多个有联系的子问题，分而治之，然后从子问题的解中还原原来问题的解。</p>\n<p>其中最重要的就是一个递推策略，如何将两个甚至多个子问题相关联，然后推导出得出另一个解，核心就在于 dp 数组及其实现。</p>\n<ul>\n<li>\n<p>1，<strong>确定 dp 数组以及下标的含义</strong></p>\n<p>定义一个 dp 一维数组记录不同楼层的状态：dp [i]：爬到第 i 层的方法数</p>\n</li>\n<li>\n<p>2，<strong>确定递推关系式</strong></p>\n<p>要推出 dp [i]，核心 dp 如何定义的。</p>\n<p>题目给出上楼梯有两种方法，那么到达第 i 层的情况只能是两种方法，一种是从 i-1 层跳一步到达，第二种是从第 i-2 层跳两步到达。</p>\n<p>因此根据上述判断，到达 i-1 层有 <code>dp[i-1]</code>  种方法，到达 i-2 层有 <code>dp[i-2]</code>  种方法，那么到达第 i 层的方法数 dp [i] 则就是下两层的方法之和。</p>\n<p>可以得到 dp 递推式： <code>dp[i] = dp[i-1] + dp[i-2]</code></p>\n</li>\n<li>\n<p>3，<strong>确定递推顺序</strong></p>\n<p>由递推公式结合题意，这道题自然从底层向高层递推，而最后的解则是我们需要的最终解。</p>\n</li>\n<li>\n<p>4，<strong>dp 数组的初始化</strong></p>\n<p>有了递推式，需要考虑 dp 的初始化问题。</p>\n<p>我们可以从最开始手动推导，上第一层只能有一种方法，就是跳 1 层，上第二层有两种方法，连续跳两个一层或者跳一个两层。</p>\n<p>于是我们可以确定 <code>dp[1]=1</code> ， <code>dp[2]=2</code>  作为初始化。</p>\n<p>但是，如果考虑将 0 层有几种方法，当然是 0 种，因为根本没有方法上楼，但如果用 0 层作为初始化递推推导，会导致题目中跳两层的策略是得不到执行的，因此一般不将 0 层作为初始化。</p>\n<p>因此，结论是将 <code>dp[1]=1</code> ， <code>dp[2]=2</code>  初始化，而从 <code>i=3</code>  开始推导。</p>\n</li>\n<li>\n<p>5，<strong>手动推导验证 <code>dp</code>  数组</strong></p>\n<p>举例推导 <code>dp</code>  数组，验证想法思路，如此处是将 i 设置为 5 推导</p>\n<p><img data-src=\"../../../image/image-20221112130430217.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"ts代码\"><a class=\"markdownIt-Anchor\" href=\"#ts代码\">#</a> TS 代码</h2>\n<p>由五部曲推导结束后，可以很自然得出代码，这个题目是简单动态规划类型，因此，代码很简单。</p>\n<p>时间复杂度：O (n)</p>\n<p>空间复杂度：O (n)</p>\n<figure class=\"highlight typescript\"><figcaption><span>爬楼梯源码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 03-爬楼梯</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020-11-12</span></span><br><span class=\"line\"><span class=\"comment\"> * 核心DP：dp[i] = dp[i - 1] + dp[i - 2]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> n 楼梯数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">climbStairs</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">dp</span>: <span class=\"built_in\">number</span>[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>, dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>稍微简化一下空间复杂度，即将 <code>dp</code>  数组舍去或者只保留每次的递推结果，而过程不保留：</p>\n<p>时间复杂度：O (n)</p>\n<p>空间复杂度：O (1)</p>\n<figure class=\"highlight typescript\"><figcaption><span>爬楼梯源码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">climbStairs2</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">dp</span>: <span class=\"built_in\">number</span>[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>, dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pre = dp[<span class=\"number\">1</span>] + dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">2</span>] = pre</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目拓展\"><a class=\"markdownIt-Anchor\" href=\"#题目拓展\">#</a> 题目拓展</h2>\n<p>假设你正在爬楼梯。需要  <code>n</code>  阶你才能到达楼顶。</p>\n<p>每次你可以爬  <code>1</code>  个， <code>2</code>  个直到 <code>m</code>  个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<h3 id=\"c代码实现\"><a class=\"markdownIt-Anchor\" href=\"#c代码实现\">#</a> C++ 代码实现</h3>\n<figure class=\"highlight c++\"><figcaption><span>爬楼梯进阶代码实现</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123; <span class=\"comment\">// 把m换成2，就可以解决最开始爬楼梯这道题</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i - j &gt;= <span class=\"number\">0</span>) dp[i] += dp[i - j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上述过程，将从 1 到 m 的方法遍历一次，即可得到解，当 <code>m = 2</code>  时，该算法就可以解决初始题目。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过这五部曲可以很清楚了解一般动态规划的解题步骤，虽然这个题目很简单，但是涵盖了动态规划的基本策略思想，即通过联系的方法分而治之，并且具有一定的记忆功能。</p>\n<p>简单题感觉可以打开思路，了解题目的本真，更能理解算法实现的基础思路，因此在刷题的时候也不要忽略了简单类型的总结和思考。</p>\n<p>只有如此，才能触类旁通，将算法思想牢记心中！！</p>\n<p><em>欢迎大家留言哦，有问题一起讨论哈！</em></p>\n",
            "tags": [
                "dp"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "url": "http://victinsever.github.io/2022/11/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/",
            "title": "JavaScript常用函数",
            "date_published": "2022-11-11T15:21:29.000Z",
            "content_html": "<h1 id=\"开发中常用的随机函数\"><a class=\"markdownIt-Anchor\" href=\"#开发中常用的随机函数\">#</a> 开发中常用的随机函数</h1>\n<h2 id=\"生成随机颜色\"><a class=\"markdownIt-Anchor\" href=\"#生成随机颜色\">#</a> 生成随机颜色</h2>\n<p>生成随机颜色。</p>\n<figure class=\"highlight javascript\"><figcaption><span>生成随机颜色</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">generateRandomHexColor</span> = (<span class=\"params\"></span>) =&gt; <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xffffff</span>).toString(<span class=\"number\">16</span>)&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">generateRandomHexColor</span>())</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组重排序\"><a class=\"markdownIt-Anchor\" href=\"#数组重排序\">#</a> 数组重排序</h2>\n<p>原生数组没有重排序功能</p>\n<figure class=\"highlight javascript\"><figcaption><span>数组重排序</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">shuffle</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">sort</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() - <span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">shuffle</span>(arr))</span><br></pre></td></tr></table></figure>\n<h2 id=\"复制到剪贴板\"><a class=\"markdownIt-Anchor\" href=\"#复制到剪贴板\">#</a> 复制到剪贴板</h2>\n<p>对数组的元素进行重新排序是一项非常重要的技巧，但是原生 Array 中并没有这项功能。</p>\n<figure class=\"highlight javascript\"><figcaption><span>复制到剪贴板</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyToClipboard</span> = (<span class=\"params\">text</span>) =&gt; navigator.<span class=\"property\">clipboard</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"property\">writeText</span> &amp;&amp; navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">copyToClipboard</span>(<span class=\"string\">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"检测暗色主题\"><a class=\"markdownIt-Anchor\" href=\"#检测暗色主题\">#</a> 检测暗色主题</h2>\n<p>暗色主题日益普及，很多用的都会在设备中启用案模式，我们将应用程序切换到暗色主题可以提高用户体验度。</p>\n<figure class=\"highlight javascript\"><figcaption><span>检测暗色主题</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isDarkMode</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"property\">matchMedia</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"title function_\">matchMedia</span>(<span class=\"string\">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class=\"property\">matches</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">isDarkMode</span>())</span><br></pre></td></tr></table></figure>\n<h2 id=\"滚动到顶部\"><a class=\"markdownIt-Anchor\" href=\"#滚动到顶部\">#</a> 滚动到顶部</h2>\n<p>将元素滚动到顶部最简单的方法是使用 scrollIntoView。设置 block 为 start 可以滚动到顶部；设置 behavior 为 smooth 可以开启平滑滚动。</p>\n<figure class=\"highlight javascript\"><figcaption><span>滚动到顶部</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">scrollToTop</span> = (<span class=\"params\">element</span>) =&gt; element.<span class=\"title function_\">scrollIntoView</span>(&#123; <span class=\"attr\">behavior</span>: <span class=\"string\">&quot;smooth&quot;</span>, <span class=\"attr\">block</span>: <span class=\"string\">&quot;start&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"滚动到底部\"><a class=\"markdownIt-Anchor\" href=\"#滚动到底部\">#</a> 滚动到底部</h2>\n<p>与滚动到顶部一样，滚动到底部只需要设置 block 为 end 即可。</p>\n<figure class=\"highlight javascript\"><figcaption><span>滚动到底部</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">scrollToBottom</span> = (<span class=\"params\">element</span>) =&gt; element.<span class=\"title function_\">scrollIntoView</span>(&#123; <span class=\"attr\">behavior</span>: <span class=\"string\">&quot;smooth&quot;</span>, <span class=\"attr\">block</span>: <span class=\"string\">&quot;end&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"检测元素是否在屏幕中\"><a class=\"markdownIt-Anchor\" href=\"#检测元素是否在屏幕中\">#</a> 检测元素是否在屏幕中</h2>\n<p>检查元素是否在窗口中最好的方法是使用 IntersectionObserver。</p>\n<figure class=\"highlight javascript\"><figcaption><span>检测元素是否在屏幕中</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">callback</span> = (<span class=\"params\">entries</span>) =&gt; &#123;</span><br><span class=\"line\">  entries.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (entry.<span class=\"property\">isIntersecting</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// `entry.target` is the dom element</span></span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;entry.target.id&#125;</span> is visible`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">threshold</span>: <span class=\"number\">1.0</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">IntersectionObserver</span>(callback, options);</span><br><span class=\"line\"><span class=\"keyword\">const</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bottomBtn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;bottom-btn&quot;</span>);</span><br><span class=\"line\">observer.<span class=\"title function_\">observe</span>(btn);</span><br><span class=\"line\">observer.<span class=\"title function_\">observe</span>(bottomBtn);</span><br></pre></td></tr></table></figure>\n<h2 id=\"检测设备\"><a class=\"markdownIt-Anchor\" href=\"#检测设备\">#</a> 检测设备</h2>\n<p>使用 navigator.userAgent 来检测网站运行在哪种平台设备上。</p>\n<figure class=\"highlight javascript\"><figcaption><span>检测设备</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">detectDeviceType</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class=\"title function_\">test</span>(</span><br><span class=\"line\">    navigator.<span class=\"property\">userAgent</span></span><br><span class=\"line\">  ) ? <span class=\"string\">&quot;Mobile&quot;</span> : <span class=\"string\">&quot;Desktop&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">detectDeviceType</span>());</span><br></pre></td></tr></table></figure>\n<h2 id=\"隐藏元素\"><a class=\"markdownIt-Anchor\" href=\"#隐藏元素\">#</a> 隐藏元素</h2>\n<p>我们可以将元素的 style.visibility 设置为 hidden，隐藏元素的可见性，但元素的空间仍然会被占用。如果设置元素的 style.display 为 none，会将元素从渲染流中删除。</p>\n<figure class=\"highlight javascript\"><figcaption><span>隐藏元素</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">hideElement</span> = (<span class=\"params\">el, removeFromFlow = <span class=\"literal\">false</span></span>) =&gt; &#123;</span><br><span class=\"line\">  removeFromFlow ? (el.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\">  : (el.<span class=\"property\">style</span>.<span class=\"property\">visibility</span> = <span class=\"string\">&#x27;hidden&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"从-url-中获取参数\"><a class=\"markdownIt-Anchor\" href=\"#从-url-中获取参数\">#</a> 从 URL 中获取参数</h2>\n<p>JavaScript 中有一个 URL 对象，通过它可以非常方便的获取 URL 中的参数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>从 URL 中获取参数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParamByUrl</span> = (<span class=\"params\">key</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(location.<span class=\"property\">href</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> url.<span class=\"property\">searchParams</span>.<span class=\"title function_\">get</span>(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝对象\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝对象\">#</a> 深拷贝对象</h2>\n<p>深拷贝对象非常简单，先将对象转换为字符串，再转换成对象即可。</p>\n<figure class=\"highlight javascript\"><figcaption><span>深拷贝对象</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepCopy</span> = obj =&gt; <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj))</span><br></pre></td></tr></table></figure>\n<p>除了利用 JSON 的 API，还有更新的深拷贝对象的 structuredClone API，但并不是在所有的浏览器中都支持。</p>\n<figure class=\"highlight javascript\"><figcaption><span>深拷贝对象</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">structuredClone</span>(obj)</span><br></pre></td></tr></table></figure>\n<h2 id=\"等待函数\"><a class=\"markdownIt-Anchor\" href=\"#等待函数\">#</a> 等待函数</h2>\n<p>JavaScript 提供了 setTimeout 函数，但是它并不返回 Promise 对象，所以我们没办法使用 async 作用在这个函数上，但是我们可以封装等待函数。</p>\n<figure class=\"highlight javascript\"><figcaption><span>等待函数</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">wait</span> = (<span class=\"params\">ms</span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">asyncFn</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">wait</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;等待异步函数执行结束&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">asyncFn</span>()</span><br></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/flutter/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/",
            "url": "http://victinsever.github.io/2022/11/11/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/flutter/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E7%AC%AC%E4%B8%80%E4%B8%AAFlutter%E5%BA%94%E7%94%A8/",
            "title": "Flutter学习笔记 - 第一个Flutter应用",
            "date_published": "2022-11-11T09:38:55.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/11/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/vue%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/",
            "url": "http://victinsever.github.io/2022/11/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/vue%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/",
            "title": "Vue源码解析笔记",
            "date_published": "2022-11-07T04:15:01.000Z",
            "content_html": "<h1 id=\"Vue重点模块源码解析\"><a href=\"#Vue重点模块源码解析\" class=\"headerlink\" title=\"Vue重点模块源码解析\"></a>Vue重点模块源码解析</h1><h2 id=\"new-Vue\"><a href=\"#new-Vue\" class=\"headerlink\" title=\"new Vue\"></a>new Vue</h2><ul>\n<li><p>_init：</p>\n<p>初始化时，调用了_init方法，生成一个uid并混入一些全局的api，此时将加入beforeCreate勾子，然后渲染初始化数据后，加入created勾子，然后开始进行挂载。</p>\n</li>\n<li><p>$mount</p>\n<ul>\n<li><p>具体实现思路是：根据传入的el查看节点，根据是否有render，没有的话是否有template模板，都没有就用outerHTML作为渲染模板</p>\n</li>\n<li><p>在挂载阶段主要是得到render函数</p>\n</li>\n</ul>\n</li>\n<li><p>mountCompontent</p>\n<ul>\n<li>挂载真实dom，创建了渲染使用的Watcher，初次渲染时内部调用了updateCompontent方法更新组件</li>\n</ul>\n</li>\n<li><p>_render</p>\n<p>render函数被调用得到Vnode</p>\n</li>\n<li><p>update</p>\n<p>在update中获取Vnode，进行页面视图更新，这个Vnode是指的旧的Vnode，没有则通过el更新，有则通过旧节点更新</p>\n</li>\n<li><p>patch</p>\n<p>用Vnode首次渲染真实dom，通过递归等方法判断内部节点的渲染方式</p>\n</li>\n</ul>\n<h2 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h2><ul>\n<li>核心方法：Object.defineProperty(obj, prop, descriptor)</li>\n<li>核心类：Watcher，Dep</li>\n<li>原理：<strong>初始化data调用observe方法给data中的数据重写get和set方法，渲染真实dom时，渲染watcher会去访问页面上使用了的属性变量，给属性的Dep加上渲染函数，每次修改就会通知watcher修改视图</strong>。</li>\n<li>初始化data，递归给data属性重写get，set，同时增加一个Dep类，渲染阶段的Dep会收集watcher，每次修改通知watcher调用dep.notify()更新。</li>\n<li>个人idea：其实这就是MVC设计中的视图和模型之间的数据流通和绑定思路。</li>\n</ul>\n<h2 id=\"数组响应式\"><a href=\"#数组响应式\" class=\"headerlink\" title=\"数组响应式\"></a>数组响应式</h2><p>获取数组原型拿到数组原有方法进行重写，重写主要针对7个要对数组有直接变更的方法，数组是响应式的就会拿到数组上的__ob__属性，调用该属性上的notify()方法。</p>\n<h2 id=\"Watch监听实现\"><a href=\"#Watch监听实现\" class=\"headerlink\" title=\"Watch监听实现\"></a>Watch监听实现</h2><p>核心：利用watcher和dep两个类实现，区别于数据绑定的是watcher保留用户传入的watch回调函数</p>\n<h2 id=\"computed实现\"><a href=\"#computed实现\" class=\"headerlink\" title=\"computed实现\"></a>computed实现</h2><p>重点：计算属性方法内部变量的Dep上有两个watcher，分别是计算属性watcher和渲染watcher，计算属性watcher只控制是否重新计算，跟随渲染watcher重新计算</p>\n<h2 id=\"nextTick原理\"><a href=\"#nextTick原理\" class=\"headerlink\" title=\"nextTick原理\"></a>nextTick原理</h2><ul>\n<li>采用异步队列方式控制DOM的更新（异步函数执行是在同步函数之后）</li>\n<li>采用vue异步方式降级策略，为了适应兼容性：promise,MutationObserver,setTmmediate,setTimeout</li>\n</ul>\n<h2 id=\"Vue-extend\"><a href=\"#Vue-extend\" class=\"headerlink\" title=\"Vue.extend\"></a>Vue.extend</h2><p>基于Vue的构造函数，创建一个子类，子类继承父类的所有属性和方法，最后返回这个子类。</p>\n<p>每一个子组件都是一个Sub构造函数。</p>\n<p>子组件的创建流程和new Vue初始化的流程区别不大。</p>\n<p>子组件创建的时候没有el生成，在vue自身进行渲染时，调用本身的child.$mount(undefined)，这个没有传入el，因此不会挂载到页面上去，是直接放在vnode.compontentInstance.el上，通过父组件渲染页面时，压入页面上。</p>\n<p>参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTk4OTY0NDM=\">vue源码阅读解析（超详细） - 知乎 (zhihu.com)</span></p>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/05/%E4%BD%9C%E5%93%81/FLPT%E6%B3%95%E5%BE%8B%E5%B9%B3%E5%8F%B0/",
            "url": "http://victinsever.github.io/2022/11/05/%E4%BD%9C%E5%93%81/FLPT%E6%B3%95%E5%BE%8B%E5%B9%B3%E5%8F%B0/",
            "title": "FLPT法律平台",
            "date_published": "2022-11-05T06:11:01.000Z",
            "content_html": "<h1 id=\"FLPT\"><a href=\"#FLPT\" class=\"headerlink\" title=\"FLPT\"></a>FLPT</h1><p>一个专为法律人打造的社交、辩论，答疑平台，基于智能文本抽取算法，可以进行文本抽取，文案生成，法律辩论和信息检索</p>\n<h2 id=\"技术架构\"><a href=\"#技术架构\" class=\"headerlink\" title=\"技术架构\"></a>技术架构</h2><p>前端技术架构主要为Vue2项目，具体技术栈如下：</p>\n<ul>\n<li>Vue2（框架）</li>\n<li>Vuex（状态管理）</li>\n<li>Vue-router（路由管理）</li>\n<li>ElementUI（组件库）</li>\n<li>Sass（CSS语法扩展）</li>\n<li>Axios（ajax请求封装库）</li>\n</ul>\n<p>优化技术：</p>\n<ul>\n<li>NProgress（微进度条）</li>\n<li>iconfont(阿里矢量图标库)</li>\n</ul>\n<p>工具：</p>\n<ul>\n<li>VScode</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">新浪图床</span></li>\n</ul>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><ul>\n<li><p>依赖安装</p>\n<figure class=\"highlight bash\"><figcaption><span>依赖安装</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight bash\"><figcaption><span>启动服务</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目打包</p>\n<figure class=\"highlight bash\"><figcaption><span>项目打包</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"项目模块\"><a href=\"#项目模块\" class=\"headerlink\" title=\"项目模块\"></a>项目模块</h2><p>暂未更新</p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>1.0.0</p>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>部署链接：</p>\n<div class=\"links\"><div class=\"item\" title=\"vitinSever\" style=\"--block-color:#e9546b;\"><a href=\"https://victinsever.github.io/MIPT/dist/index.html\" class=\"image\" data-background-image=\"/images/avatar.jpg\"></a>\n          <div class=\"info\">\n          <a href=\"https://victinsever.github.io/MIPT/dist/index.html\" class=\"title\">部署地址</a>\n          <p class=\"desc\">Web端上线地址</p>\n          </div></div><div class=\"item\" title=\"vitinSever\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpY3RpblNldmVyL01JUFQ=\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpY3RpblNldmVyL01JUFQ=\">项目仓库</span>\n          <p class=\"desc\">Web端仓库地址</p>\n          </div></div></div>",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/11/04/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/Nginx/Nginx%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "url": "http://victinsever.github.io/2022/11/04/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/Nginx/Nginx%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/",
            "title": "Nginx学习记录",
            "date_published": "2022-11-03T17:07:01.000Z",
            "content_html": "<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><h2 id=\"Nginx概述\"><a href=\"#Nginx概述\" class=\"headerlink\" title=\"Nginx概述\"></a>Nginx概述</h2><ul>\n<li>高性能的HTTP和方向代理服务器，特点是战友内存少，并发能力强，同类型的网页服务器表现较好。</li>\n<li>转为性能优化而开发，性能和效率是最重要的考量，能经受高负载的考研，并发可高达50000个。</li>\n</ul>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><ul>\n<li>正向代理<ul>\n<li>在客户端（浏览器）配置代理服务器，来实现对服务器的访问</li>\n</ul>\n</li>\n<li>反向代理<ul>\n<li>请求发送给代理服务器，由代理服务器去选择目标服务器返回响应给客户端，暴露了代理服务器，隐藏了目标服务器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>单个服务器会造成比较大的并发压力，需要增加服务器数量，将请求分发到各个服务器上，即请求集中到一个服务器上的情况变成均分到多个服务器处理。</p>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p>为加快网站解析速度，将服务器部署的静态资源（html、css、js、图片）和动态资源（jsp，servlet）分开部署，降低原来单个服务器的压力。</p>\n<h2 id=\"Nginx环境搭建\"><a href=\"#Nginx环境搭建\" class=\"headerlink\" title=\"Nginx环境搭建\"></a>Nginx环境搭建</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li>Linux环境（可用本地VM运行linux系统，也可远程链接服务器虚拟机环境）</li>\n<li>nginx的linux软件包</li>\n</ul>\n<h3 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h3><ul>\n<li><p>安装pcre依赖</p>\n<ul>\n<li><p>联网下载 pcre 压缩文件依赖(这里通过wget下载，也可直接在官网下载tar包）</p>\n<figure class=\"highlight bash\"><figcaption><span>1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://downloads.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装包放在linux系统（如果在window中下载的直接拖拽或者用xftp移过来）</p>\n</li>\n<li><p>解压压缩文件</p>\n<figure class=\"highlight bash\"><figcaption><span>2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar –xvf pcre-8.37.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入解压目录，执行编译配置</p>\n<figure class=\"highlight bash\"><figcaption><span>3</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ./pcre-8.37</span><br><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用make进行安装</p>\n<figure class=\"highlight bash\"><figcaption><span>4</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装完成检查版本</p>\n<figure class=\"highlight bash\"><figcaption><span>5</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcre-config --version</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>安装其他依赖文件（<strong>openssl</strong> <strong>、</strong>zlib <strong>、</strong> <strong>gcc</strong> ）</p>\n<figure class=\"highlight bash\"><figcaption><span>安装其他依赖</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>如果没有yum，则会报错，本人在这里耽误很长时间，本地linux没有yum，安装yum找不到文件源，因此采用的远程链接腾讯云服务器。或者不用yum安装也可。</p>\n</li>\n<li><p>安装nginx</p>\n<ul>\n<li><p>下载nginx安装包（<span class=\"exturl\" data-url=\"aHR0cDovL25naW54Lm9yZy8=\">nginx</span>）选择linux版本，如最新的nginx-1.23.2 （pgp）</p>\n</li>\n<li><p>接下来流程同上pcre的安装流程</p>\n</li>\n<li><p>安装成功后进入usr文件夹查看多出的local&#x2F;nginx文件夹，多出了sbin脚本</p>\n<figure class=\"highlight bash\"><figcaption><span>1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">local</span>/nginx</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> sbin</span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查脚本启动</p>\n<figure class=\"highlight bash\"><figcaption><span>2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx</span><br><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览器中查看结果（输入服务器地址）</p>\n<p><img data-src=\"/./../../../../../../program/blog/source/image/image-20221104133932732.png\" alt=\"image-20221104133932732\"></p>\n</li>\n</ul>\n</li>\n<li><p>在 windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题</p>\n<ul>\n<li><p>查看开放的端口号</p>\n  <figure class=\"highlight bash\"><figcaption><span>防火墙</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置开放的端口号</p>\n<figure class=\"highlight bash\"><figcaption><span>防火墙</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-service=http –permanent</span><br><span class=\"line\">firewall-cmd --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启防火墙</p>\n<figure class=\"highlight bash\"><figcaption><span>防火墙</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd –reload</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Nginx常用命令\"><a href=\"#Nginx常用命令\" class=\"headerlink\" title=\"Nginx常用命令\"></a>Nginx常用命令</h2><ul>\n<li><p><strong>进入</strong> <strong>nginx</strong> <strong>目录中才能使用命令</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>1、查看</strong> <strong>nginx</strong> <strong>版本号</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -v</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>2、启动nginx</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>3、停止nginx</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>4、重新加载 nginx</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>5、查看状态 nginx</strong></p>\n  <figure class=\"highlight bash\"><figcaption><span>常用命令</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Nginx配置文件\"><a href=\"#Nginx配置文件\" class=\"headerlink\" title=\"Nginx配置文件\"></a>Nginx配置文件</h2><p>包含三部分内容<br>（1）全局块：配置服务器整体运行的配置指令<br>比如 worker_processes 1;处理并发数的配置<br>（2）events 块：影响 Nginx 服务器与用户的网络连接<br>比如 worker_connections 1024; 支持的最大连接数为 1024<br>（3）http 块<br>还包含两部分：<br>http 全局块<br>server 块</p>\n<p>Nginx的三个重要配置一般都在http模块下。</p>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/Vue2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%90%88%E9%80%9A%E7%94%A8%E4%BE%9D%E8%B5%96%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/",
            "url": "http://victinsever.github.io/2022/11/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/Vue2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%90%88%E9%80%9A%E7%94%A8%E4%BE%9D%E8%B5%96%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/",
            "title": "Vue2项目结合通用依赖进行项目搭建",
            "date_published": "2022-11-02T04:57:01.000Z",
            "content_html": "<h1 id=\"Vue2项目结合通用依赖进行项目搭建\"><a href=\"#Vue2项目结合通用依赖进行项目搭建\" class=\"headerlink\" title=\"Vue2项目结合通用依赖进行项目搭建\"></a>Vue2项目结合通用依赖进行项目搭建</h1><h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li><p><strong>Vue-cli</strong>（框架）</p>\n<ul>\n<li>Vue项目框架，基于 Vue.js 进行快速开发的完整系统</li>\n<li>本次项目为Vue2项目框架</li>\n</ul>\n</li>\n<li><p><strong>Vuex</strong>（数据管理）</p>\n<ul>\n<li>一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</li>\n<li>本项目中作为全局共享数据库，采用三版本</li>\n</ul>\n</li>\n<li><p><strong>Vue-router</strong>（路由管理）</p>\n<ul>\n<li>Vue.js官方的路由插件，它和vue.js是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlQjclQjElRTUlQkElQTYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">深度</span>集成的，适合用于构建单页面应用</li>\n<li>本项目中作为路由链接管理插件，采用三版本</li>\n</ul>\n</li>\n<li><p><strong>ElementUI</strong>（组件库）</p>\n<ul>\n<li>基于 Vue 2.0 的桌面端组件库</li>\n<li>本项目作为主要的全局组件库，进行样式美化</li>\n</ul>\n</li>\n<li><p><strong>axios</strong>（ajax请求封装库）</p>\n<ul>\n<li>一个基于 promise 的网络请求库，可以用于浏览器和 node.js</li>\n<li>本项目作为数据请求发送的封装库，对前后端数据进行连接</li>\n</ul>\n</li>\n<li><p><strong>Sass</strong>（CSS扩展语言插件）</p>\n<ul>\n<li>进行CSS的语言扩展，提高CSS样式的可读性，便于CSS样式设计</li>\n</ul>\n</li>\n<li><p><strong>NProgress</strong>（小进度条插件）</p>\n</li>\n</ul>\n<p>上述技术有很多等价的技术可以代替，但是基本的技术如框架，路由管理必不可少，此处只是本人最常用的Vue2技术套装，本文章做一个一般流程记录，推荐的代替技术在最后（仅供参考）。</p>\n<h2 id=\"搭建项目\"><a href=\"#搭建项目\" class=\"headerlink\" title=\"搭建项目\"></a>搭建项目</h2><p>下面是项目搭建和依赖下载和搭配流程，特别强调部分的技术版本依赖必须一一对应。</p>\n<p>- </p>\n",
            "tags": [
                "Vue",
                "Vuex",
                "Vue-router",
                "ElementUI",
                "axios",
                "sass",
                "NProgress"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/JDBC/",
            "url": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/JDBC/",
            "title": "JDBC",
            "date_published": "2022-10-29T05:52:58.000Z",
            "content_html": "<h3 id=\"JDBC开发步骤\"><a href=\"#JDBC开发步骤\" class=\"headerlink\" title=\"JDBC开发步骤\"></a>JDBC开发步骤</h3><ul>\n<li>创建一个以JDBC连接数据库的程序，包含几个步骤:<ul>\n<li>1)加载并注册数据库驱动程序（Driver类）  </li>\n<li>2)创建数据库的连接（DriverManager类）  </li>\n<li>3)获取SQL语句执行者（Statement&#x2F;PreparedStatement对象）</li>\n<li>4)执行SQL语句</li>\n<li>5)获取结果集（ResultSet对象）</li>\n<li>6)回收数据库资源（关闭JDBC对象）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>执行JDBC查询的一般步骤如下</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行JDBC查询的一般步骤如下</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">Class.forName(<span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:mysql://localhost:3306/javaweb&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;123456&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">con</span> <span class=\"operator\">=</span> DriverManager.getConnection(url, username, password);</span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"type\">Statement</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> con.createStatement();</span><br><span class=\"line\"><span class=\"comment\">//4 + 5</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from student&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">ResultSet</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> state.executeQuery(sql);</span><br><span class=\"line\"><span class=\"comment\">//6</span></span><br><span class=\"line\">state.close();</span><br><span class=\"line\">conn.close();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装JDBC操作\"><a href=\"#封装JDBC操作\" class=\"headerlink\" title=\"封装JDBC操作\"></a>封装JDBC操作</h3><p>JDBC在实际业务中操作比较多，需要进行将各个业务的模块功能进行分离操作，封装的一般目录如下（无数据源操作）：</p>\n<p><img data-src=\"/./../../../image/image-20221029140700404.png\" alt=\"image-20221029140700404\"></p>\n<ul>\n<li><p>dao：数据库的各个表的实现（增删查改）</p>\n</li>\n<li><p>jdbc：数据库的连接操作和关闭操作的实现，一般可以是接口，也可以直接封装成类操作（一般数据源信息放再src目录下，通过数据源的方式读取配置文件，此处没有使用，而是直接封装在jdbc连接类中）</p>\n</li>\n<li><p>test：main函数调用实现，进行jdbc实现测试</p>\n</li>\n<li><p>vo：基本的工具类实现，如Book，Student类</p>\n</li>\n</ul>\n<h3 id=\"连接池技术\"><a href=\"#连接池技术\" class=\"headerlink\" title=\"连接池技术\"></a>连接池技术</h3><p><img data-src=\"/./../../../image/image-20221029142550059.png\" alt=\"image-20221029142550059\"></p>\n<ul>\n<li><p>在一个对象池中保存多个数据库的连接，也称为数据库连接池（Connection Pool），进行数据库操作时，直接从连接池中取出一个数据库连接，当数据库操作完成后，再将此连接放回到数据库连接池中，等待其他用户继续使用，提高访问数据库的效率</p>\n</li>\n<li><p>数据库连接池作用：负责分配、管理和释放数据库连接，允许应用程序重复使用现有的数据库连接，而不是每次都重新创建。</p>\n</li>\n<li><p>连接池的工作机制：数据库连接池在<strong>初始化时</strong>将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数</strong>来设定的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p>\n<p>连接池设置最小和最大连接数考虑因素：</p>\n<ul>\n<li>放置的最小连接要考虑数据库的使用量大不大，最小连接过多会导致资源浪费。</li>\n<li>放置的最大连接要考虑高峰期会是多少，超过该数值会一直等待。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h4><h5 id=\"DriverManager跟DataSource获取getConnection有什么不同\"><a href=\"#DriverManager跟DataSource获取getConnection有什么不同\" class=\"headerlink\" title=\"DriverManager跟DataSource获取getConnection有什么不同?\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1Ecml2ZXJNYW5hZ2VyJnNwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">DriverManager</span>跟DataSource获取getConnection有什么不同?</h5><ul>\n<li><p>DriverManager是获取一个connection，用完就进行关闭，需要又重新建立连接；</p>\n</li>\n<li><p>Datasource获取多个connection并管理起来，作为数据库连接池；很多第三方连接池都通过实现该接口来做连接池；</p>\n</li>\n</ul>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmhhaWppbmcvYXJ0aWNsZS9kZXRhaWxzLzg0Mjg0ODQ3\">(231条消息) Java中DriverManager跟DataSource获取getConnection有什么不同（Java中数据源和连接池的区别）_林海静的博客-CSDN博客_datasource.getconnection()</span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbWFyazUvcC8xMTY0MTA0Ni5odG1s\">数据库连接池的工作机制是什么 - 双间 - 博客园 (cnblogs.com)</span></p>\n</li>\n</ul>\n",
            "tags": [
                "JDBC"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "http://victinsever.github.io/2022/10/29/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/Java%20Web/MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "Java Web--MVC设计模式",
            "date_published": "2022-10-29T05:38:29.000Z",
            "content_html": "<h3 id=\"MVC设计模式\"><a href=\"#MVC设计模式\" class=\"headerlink\" title=\"MVC设计模式\"></a>MVC设计模式</h3><p>MVC设计模式是对软件开发的一中模块划分的方法。将软件程序分为三个核心模块：模型（Model）、视图（View）和控制器（Controller）。</p>\n<ul>\n<li><p><strong>1、模型</strong></p>\n<ul>\n<li><p>作用：管理业务数据，定义访问控制以及修改数据的业务规则。</p>\n</li>\n<li><p>业务流程：当模型状态改变。会通知视图发生改变，为视图提供查询模型状态的方法。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>2、视图</strong></p>\n<ul>\n<li>作用：负责和用户打交道，从模型中获取数据向用户展示，将用户请求传递给控制器处理。</li>\n<li>模型状态改变，视图对用户界面同步更新，保证模型和页面的一致性。</li>\n</ul>\n</li>\n<li><p><strong>3、控制器</strong></p>\n<ul>\n<li>作用：负责处理用户交互，从视图中获取数据，控制用户输入，并向模型发送数据。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/./../../../image/image-20221029134815029.png\" alt=\"image-20221029134815029\"></p>\n<p>控制器接收用户请求，根据信息调用模型组件业务方法，对哦业务信息处理后，根据模型返回结果选择试图组件来显示处理结果和模型中的数据。</p>\n",
            "tags": [
                "MVC"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/26/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/md%E7%BC%96%E5%86%99%E7%BB%83%E4%B9%A0%E9%A2%98/",
            "url": "http://victinsever.github.io/2022/10/26/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/md%E7%BC%96%E5%86%99%E7%BB%83%E4%B9%A0%E9%A2%98/",
            "title": "md编写练习题",
            "date_published": "2022-10-26T12:50:01.000Z",
            "content_html": "<h1 id=\"md编写练习题\"><a href=\"#md编写练习题\" class=\"headerlink\" title=\"md编写练习题\"></a>md编写练习题</h1><ol>\n<li><p>编译时多态主要指运算符重载与函数重载，而运行时多态主要指虚函数。 {.quiz .true}</p>\n</li>\n<li><p>有基类 <code>SHAPE</code>，派生类 <code>CIRCLE</code>，声明如下变量：  {.quiz .multi}</p>\n <figure class=\"highlight c++\"><figcaption><span>声明如下</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHAPE shape1,*p1;</span><br><span class=\"line\">CIRCLE circle1,*q1;</span><br></pre></td></tr></table></figure>\n<p> 下列哪些项是 “派生类对象替换基类对象”。</p>\n<ul>\n<li><code>p1=&amp;circle1;</code> {.correct}</li>\n<li><code>q1=&amp;shape1;</code></li>\n<li><code>shape1=circle1;</code> {.correct}</li>\n<li><code>circle1=shape1;</code><br> {.options}<blockquote>\n<ul>\n<li>:heavy_check_mark: 令基类对象的指针指向派生类对象</li>\n<li>:x: 派生类指针指向基类的引用</li>\n<li>:heavy_check_mark: 派生类对象给基类对象赋值</li>\n<li>:x: 基类对象给派生类对象赋值<br>{.options}</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>下列叙述正确的是 []{.gap} 。 {.quiz}</p>\n<ul>\n<li>虚函数只能定义成无参函数</li>\n<li>虚函数不能有返回值</li>\n<li>能定义虚构造函数</li>\n<li>A、B、C 都不对 {.correct}<br> {.options}</li>\n</ul>\n</li>\n<li><p>如果定义 <code>int e=8; double f=6.4, g=8.9;</code>，则表达式 <code>f+int (e/3*int (f+g)/2)%4</code> 的值为 [9.4]{.gap}。 {.quiz .fill}</p>\n<blockquote>\n<p>注意运算顺序和数据类型<br>[8.4]{.mistake}</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/10/26/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/%E7%BC%96%E5%86%99md%E6%96%87%E6%A1%A3/",
            "url": "http://victinsever.github.io/2022/10/26/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/%E7%BC%96%E5%86%99md%E6%96%87%E6%A1%A3/",
            "title": "md文档编写注意事项",
            "date_published": "2022-10-26T12:37:01.000Z",
            "content_html": "<h5 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h5><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9zcGVjaWFsLw==\">Step.4 主题特殊功能 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka &#x3D; 優萌初華 &#x3D; 有夢書架 (lostyu.me)</span></p>\n<h4 id=\"代码块编写\"><a href=\"#代码块编写\" class=\"headerlink\" title=\"代码块编写\"></a>代码块编写</h4><p><img data-src=\"/./../../../image/image-20221026203726497.png\" alt=\"image-20221026203726497\"></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/10/26/%E4%BD%9C%E5%93%81/%E6%89%B6%E6%91%87%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0/",
            "url": "http://victinsever.github.io/2022/10/26/%E4%BD%9C%E5%93%81/%E6%89%B6%E6%91%87%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0/",
            "title": "扶摇低代码平台",
            "date_published": "2022-10-26T11:57:24.000Z",
            "content_html": "<div class=\"links\"><div class=\"item\" title=\"vitinSever\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9hcmNoZXJsY3kuZ2l0aHViLmlvL21idHQtdmlzdWFsLWVkaXRvcg==\" data-background-image=\"https://tva3.sinaimg.cn/large/008cs7isly8h7iy6102gij30bt05fwen.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9hcmNoZXJsY3kuZ2l0aHViLmlvL21idHQtdmlzdWFsLWVkaXRvcg==\">部署地址</span>\n          <p class=\"desc\">Web端上线地址</p>\n          </div></div><div class=\"item\" title=\"vitinSever\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpY3RpblNldmVyL21idHQtdmlzdWFsLWVkaXRvcg==\" data-background-image=\"/images/avatar.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpY3RpblNldmVyL21idHQtdmlzdWFsLWVkaXRvcg==\">项目仓库</span>\n          <p class=\"desc\">Web端仓库地址</p>\n          </div></div></div>\n\n<h1 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h1><ul>\n<li>基于React、Redux、Node.js与MongoDB搭建的跨端零代码表单生成与收集的一体化平台。</li>\n<li>支持PC端和安卓移动端的多端使用。</li>\n<li>用户可以通过拖拽组件的形式，来组合成自己所需要的表单类型，用户可以控制台根据自己的需求与喜好来定义每个组件的样式，系统会对组件在画布上进行实时渲染，</li>\n<li>导出格式分为代码导出和表单导出，用户可以根据自己的需求来进行导出。</li>\n<li>为提升产品体验，我们针对几种特定的场景生成了对应的模板，以便用户直接使用，降低学习成本。</li>\n</ul>\n<p>项目部署在Github Pages，项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoZXJsY3kuZ2l0aHViLmlvL21idHQtdmlzdWFsLWVkaXRvci8=\">https://archerlcy.github.io/mbtt-visual-editor/</span></p>\n<h1 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h1><p>React, Redux, MongoDB, antd</p>\n<h1 id=\"项目命令\"><a href=\"#项目命令\" class=\"headerlink\" title=\"项目命令\"></a>项目命令</h1><p>安装依赖<br>npm install</p>\n<p>运行<br>npm run start</p>\n<h3 id=\"后端地址项目地址\"><a href=\"#后端地址项目地址\" class=\"headerlink\" title=\"后端地址项目地址\"></a>后端地址项目地址</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FyY2hlckxDWS9tYnR0LXZpc3VhbC1lZGl0b3Itbm9kZS5naXQ=\">https://github.com/ArcherLCY/mbtt-visual-editor-node.git</span></p>\n<h1 id=\"队员Github账户\"><a href=\"#队员Github账户\" class=\"headerlink\" title=\"队员Github账户\"></a>队员Github账户</h1><table>\n<thead>\n<tr>\n<th>姓名</th>\n<th>账户名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>殷炜</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hZ2ljMDMyMw==\">Magic0323</span></td>\n</tr>\n<tr>\n<td>赖灿芸</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FyY2hlckxDWQ==\">ArcherLCY</span></td>\n</tr>\n<tr>\n<td>姚世成</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZW43Nzc3Nzc=\">shen777777</span></td>\n</tr>\n<tr>\n<td>吴家余</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dqeXd5\">wjywy</span></td>\n</tr>\n<tr>\n<td>钟国政</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpY3RpblNldmVy\">victinSever</span></td>\n</tr>\n<tr>\n<td>程新格</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NYR0Jybw==\">CXGBro</span></td>\n</tr>\n</tbody></table>\n<h1 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h1><p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMThKaWZEbEt5SU8wS3dpRHNza1JENWc=\">https://pan.baidu.com/s/18JifDlKyIO0KwiDsskRD5g</span><br>提取码：vk2g<br>–来自百度网盘超级会员V1的分享</p>\n<h1 id=\"线上地址\"><a href=\"#线上地址\" class=\"headerlink\" title=\"线上地址\"></a>线上地址</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoZXJsY3kuZ2l0aHViLmlvL21idHQtdmlzdWFsLWVkaXRvci8=\">https://archerlcy.github.io/mbtt-visual-editor/</span></p>\n<h3 id=\"核心算法\"><a href=\"#核心算法\" class=\"headerlink\" title=\"核心算法\"></a>核心算法</h3><p>&#96;&#96;&#96;javascript 拖拽算法 参考链接 mark:1,6-7<br>312321<br>21321<br>1232131<br>21321<br>13<br>213123123<br>21312321<br>32131<br>213</p>\n",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/10/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/canvas/%E7%BB%98%E5%88%B6%E6%97%B6%E9%92%9F/",
            "url": "http://victinsever.github.io/2022/10/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/canvas/%E7%BB%98%E5%88%B6%E6%97%B6%E9%92%9F/",
            "title": "canvas绘制时钟",
            "date_published": "2022-10-25T15:50:55.000Z",
            "content_html": "<h3 id=\"Canvas绘制时钟\"><a href=\"#Canvas绘制时钟\" class=\"headerlink\" title=\"Canvas绘制时钟\"></a>Canvas绘制时钟</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.clock</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: skyblue;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgb</span>(<span class=\"number\">80</span>, <span class=\"number\">196</span>, <span class=\"number\">241</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clock&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400px&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;400px&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span></span><br><span class=\"line\">            您的浏览器版本过低，不支持canvas功能</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 定义变量</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> w = h = <span class=\"number\">400</span> <span class=\"comment\">//宽高</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> x = y = <span class=\"number\">200</span> <span class=\"comment\">//圆心</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> r = <span class=\"number\">180</span> <span class=\"comment\">//半径</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> r_h = <span class=\"number\">60</span>, r_m = <span class=\"number\">120</span>, r_s = <span class=\"number\">140</span> <span class=\"comment\">//时分秒针长度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> r_t = <span class=\"number\">140</span> <span class=\"comment\">//文字半径</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> r_squ = <span class=\"number\">165</span> <span class=\"comment\">//刻度半径</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> r_c = <span class=\"number\">10</span> <span class=\"comment\">//表盘圆点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> deg = <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span> <span class=\"comment\">//圆周</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 平移中心点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        ctx.<span class=\"title function_\">translate</span>(w / <span class=\"number\">2</span>, h / <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">clock</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">clock</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, <span class=\"number\">1000</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">clock</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 画圆盘</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawCircle</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, r, <span class=\"string\">&#x27;#fff&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//画圆心</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawCircle</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, r_c, <span class=\"string\">&#x27;#000&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 画指针</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> day = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> hour = day.<span class=\"title function_\">getHours</span>() % <span class=\"number\">12</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> minute = day.<span class=\"title function_\">getMinutes</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> second = day.<span class=\"title function_\">getSeconds</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            hour = hour * deg / <span class=\"number\">12</span> - deg / <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            minute = minute * deg / <span class=\"number\">60</span> - deg / <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            second = second * deg / <span class=\"number\">60</span> - deg / <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawLine</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, r_h * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(hour), r_h * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(hour), <span class=\"string\">&#x27;#000&#x27;</span>, <span class=\"number\">10</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawLine</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, r_m * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(minute), r_m * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(minute), <span class=\"string\">&#x27;#000&#x27;</span>, <span class=\"number\">5</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawLine</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, r_s * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(second), r_s * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(second), <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//画数字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">12</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> t = (deg / <span class=\"number\">12</span>) * i - deg / <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> x = r_t * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> y = r_t * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">drawText</span>(i, x, y)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//画刻度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">60</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> t = (deg / <span class=\"number\">60</span>) * i</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> x1 = r * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> y1 = r * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">//判断是否整点</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> === <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> x2 = r_squ * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> y2 = r_squ * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">drawLine</span>(x1, y1, x2, y2, <span class=\"string\">&#x27;#999&#x27;</span>, <span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> x2 = (r_squ + <span class=\"number\">3</span>) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> y2 = (r_squ + <span class=\"number\">3</span>) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">drawLine</span>(x1, y1, x2, y2, <span class=\"string\">&#x27;#ddd&#x27;</span>, <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 画文字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawText</span>(<span class=\"params\">text, x, y, font = <span class=\"string\">&#x27;20px 微软雅黑&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">font</span> = font</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">textAlign</span> = <span class=\"string\">&#x27;center&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">textBaseline</span> = <span class=\"string\">&#x27;middle&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">fillText</span>(text, x, y)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//画圆</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawCircle</span>(<span class=\"params\">x, y, r, color = <span class=\"string\">&#x27;#000&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">beginPath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">arc</span>(x, y, r, <span class=\"number\">0</span>, <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">fillStyle</span> = color</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">fill</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">closePath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//画线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawLine</span>(<span class=\"params\">x1, y1, x2, y2, color = <span class=\"string\">&#x27;black&#x27;</span>, width</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">beginPath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">moveTo</span>(x1, y1)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">lineTo</span>(x2, y2)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">strokeStyle</span> = color</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">lineWidth</span> = width</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">lineCap</span> = <span class=\"string\">&#x27;round&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">stroke</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">closePath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "canvas"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/canvas/%E7%BA%BF%E6%80%A7%E5%B0%8F%E7%90%83%E7%89%B9%E6%95%88/",
            "url": "http://victinsever.github.io/2022/10/25/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/canvas/%E7%BA%BF%E6%80%A7%E5%B0%8F%E7%90%83%E7%89%B9%E6%95%88/",
            "title": "线性小球特效",
            "date_published": "2022-10-25T15:45:07.000Z",
            "content_html": "<h3 id=\"线性小球特效\"><a href=\"#线性小球特效\" class=\"headerlink\" title=\"线性小球特效\"></a>线性小球特效</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;500px&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;500px&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span>&gt;</span></span><br><span class=\"line\">        您的浏览器版本过低，不支持canvas功能</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;canvas&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&#x27;2d&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 获取屏幕大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> w = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientWidth</span> - <span class=\"number\">6</span> <span class=\"comment\">//画布大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> h = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span> - <span class=\"number\">6</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//更新宽高</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        canvas.<span class=\"property\">width</span> = w</span></span><br><span class=\"line\"><span class=\"language-javascript\">        canvas.<span class=\"property\">height</span> = h</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> speed = <span class=\"number\">15</span> <span class=\"comment\">//速度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ballNum = <span class=\"number\">15</span> <span class=\"comment\">//小球个数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> lineColor = <span class=\"string\">&#x27;#ccc&#x27;</span> <span class=\"comment\">//线的颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//文字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> titleArr = (<span class=\"string\">&quot;JavaScript HTML5前端 JAVA PHP jQuery Canvas&quot;</span> +</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&quot; CSS CSS3 Angular Bootstrap LayUI 全栈工程师 NodeJS React Vue.js&quot;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> ballArr = [] <span class=\"comment\">//小球数组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ballNum; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 当前小球</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> ball = <span class=\"keyword\">new</span> <span class=\"title class_\">Ball</span>(titleArr[i])</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ballArr.<span class=\"title function_\">push</span>(ball)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//清除画布</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ballArr.<span class=\"property\">length</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                ballArr[i].<span class=\"title function_\">show</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 小球连线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//取出当前小球前面的小球</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">let</span> preBall = ballArr[j]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">drawLine</span>(ballArr[i].<span class=\"property\">x</span>, ballArr[i].<span class=\"property\">y</span>, preBall.<span class=\"property\">x</span>, preBall.<span class=\"property\">y</span>, lineColor)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, speed)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//创建小球类</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">Ball</span>(<span class=\"params\">text</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> = w</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = h <span class=\"comment\">//盒子宽高</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> = <span class=\"title function_\">r</span>(<span class=\"number\">30</span>) + <span class=\"number\">10</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"title function_\">r</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">width</span> - <span class=\"number\">2</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">r</span>) + <span class=\"variable language_\">this</span>.<span class=\"property\">r</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"title function_\">r</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">height</span> - <span class=\"number\">2</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">r</span>) + <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = <span class=\"title function_\">rColor2</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">xSpeed</span> = <span class=\"title function_\">r</span>(<span class=\"number\">5</span>) + <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ySpeed</span> = <span class=\"title function_\">r</span>(<span class=\"number\">3</span>) + <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">text</span> = text</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Ball</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">show</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawCircle</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">y</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">r</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">color</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">drawText</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">text</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">r</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">y</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">Ball</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">run</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> &lt;= <span class=\"number\">0</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">width</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">xSpeed</span> = -<span class=\"variable language_\">this</span>.<span class=\"property\">xSpeed</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125; </span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += <span class=\"variable language_\">this</span>.<span class=\"property\">xSpeed</span>            </span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">y</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> &lt;= <span class=\"number\">0</span> || <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">ySpeed</span> = -<span class=\"variable language_\">this</span>.<span class=\"property\">ySpeed</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;                    </span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += <span class=\"variable language_\">this</span>.<span class=\"property\">ySpeed</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 随机颜色2：rgb</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">rColor2</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;rgb(&#x27;</span> + <span class=\"title function_\">r</span>(<span class=\"number\">255</span>) + <span class=\"string\">&#x27;,&#x27;</span> + <span class=\"title function_\">r</span>(<span class=\"number\">255</span>) + <span class=\"string\">&#x27;,&#x27;</span> + <span class=\"title function_\">r</span>(<span class=\"number\">255</span>) + <span class=\"string\">&#x27;)&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 随机颜色#ffffff</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">rColor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;#&#x27;</span> + <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">0xffffff</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 随机数字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">r</span>(<span class=\"params\">num</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * num)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 画文字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawText</span>(<span class=\"params\">text, x, y, font = <span class=\"string\">&#x27;20px 微软雅黑&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">font</span> = font</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">textAlign</span> = <span class=\"string\">&#x27;top&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">textBaseline</span> = <span class=\"string\">&#x27;middle&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">fillText</span>(text, x, y)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//画圆</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawCircle</span>(<span class=\"params\">x, y, r, color = <span class=\"string\">&#x27;#000&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">beginPath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">arc</span>(x, y, r, <span class=\"number\">0</span>, <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">fillStyle</span> = color</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">fill</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//画线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">function</span> <span class=\"title function_\">drawLine</span>(<span class=\"params\">x1, y1, x2, y2, color = <span class=\"string\">&#x27;black&#x27;</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">beginPath</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">moveTo</span>(x1, y1)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">lineTo</span>(x2, y2)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"property\">strokeStyle</span> = color</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ctx.<span class=\"title function_\">stroke</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "canvas"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/Svelet/Svelte%E5%92%8CSolid.js%EF%BC%9A%E6%96%B0%E9%94%90%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/",
            "url": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/Svelet/Svelte%E5%92%8CSolid.js%EF%BC%9A%E6%96%B0%E9%94%90%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/",
            "title": "Svelte和Solid.js：新锐前端框架",
            "date_published": "2022-10-24T10:18:01.000Z",
            "content_html": "<h3 id=\"极简的组件表达式\"><a href=\"#极简的组件表达式\" class=\"headerlink\" title=\"极简的组件表达式\"></a>极简的组件表达式</h3><ul>\n<li>Svelet：贴近原生JS</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        count += <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">on:click</span>=<span class=\"string\">&quot;increment&quot;</span>&gt;</span></span><br><span class=\"line\">    count is &#123;count&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Solid.js：React hooks和Composition API的综合体</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Counter.jsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSignal &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;solid-js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">createSignal</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCount</span>(<span class=\"title function_\">count</span>() + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> increment()&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                count is &#123;count()&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>solid自动依赖追踪避免手动设置依赖项（createEffect）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//solid</span></span><br><span class=\"line\"><span class=\"title function_\">createEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count：&#x27;</span> + <span class=\"title function_\">count</span>());</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//react：需要开发者操作依赖项</span></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;count：&#x27;</span> + <span class=\"title function_\">count</span>());</span><br><span class=\"line\">&#125;, [count])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Svelet：不需要响应式API</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">$</span>: <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">increment</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"无虚拟DOM底层实现\"><a href=\"#无虚拟DOM底层实现\" class=\"headerlink\" title=\"无虚拟DOM底层实现\"></a>无虚拟DOM底层实现</h3><p>鱼和熊掌都可兼得！！！</p>\n<h3 id=\"性能表现\"><a href=\"#性能表现\" class=\"headerlink\" title=\"性能表现\"></a>性能表现</h3><ul>\n<li>solid和svelet性能总体逗比react hook的性能表现较佳</li>\n<li>solid和vue在生成代码量的表现上类似</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>Svelte</code>和<code>Solid</code>有着优秀的开发体验和性能表现</p>\n<p>有很多适合它们的应用场景和优点</p>\n<p>底层独特巧妙的解决方案非常值得学习</p>\n",
            "tags": [
                "Svelet",
                "Solid.js"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/",
            "url": "http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/",
            "title": "即时通讯协议选型：WebSocket协议",
            "date_published": "2022-10-24T06:38:06.000Z",
            "content_html": "<h4 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h4><p><strong>Socket：</strong>对处于网络中不同主机上的应用进程之间进行双向通信的端点的抽象，是应用程序通过网络协议进行通信的接口，一个Socket对应着通信的一端，由IP地址和端口组合而成。</p>\n<h4 id=\"WebSocket服务端与客户端之间的通信过程\"><a href=\"#WebSocket服务端与客户端之间的通信过程\" class=\"headerlink\" title=\"WebSocket服务端与客户端之间的通信过程\"></a>WebSocket服务端与客户端之间的通信过程</h4><ul>\n<li>服务端创建包含有效主机与端口的WebSocket实例，随后启动并等待客户端连接</li>\n<li>客户端创建WebSocket实例，并为该实例提供一个URL，该URL代表希望连接的服务器端</li>\n<li>客户端通过HTTP请求握手建立连接之后，后面就使用刚才发起HTTP请求的TCP连接进行双向通信。</li>\n</ul>\n<h4 id=\"WebSocket特点\"><a href=\"#WebSocket特点\" class=\"headerlink\" title=\"WebSocket特点\"></a>WebSocket特点</h4><ul>\n<li>WebSocket本身只是一个应用层协议</li>\n<li>一种全双工通信机制</li>\n</ul>\n<h4 id=\"传统的全双工协议的两种方式\"><a href=\"#传统的全双工协议的两种方式\" class=\"headerlink\" title=\"传统的全双工协议的两种方式\"></a>传统的全双工协议的两种方式</h4><ul>\n<li><strong>短轮询</strong> 即客户端定时向服务端发送请求，服务端收到请求后马上返回响应并关闭连接。 <ul>\n<li>优点：实现简单 </li>\n<li>缺点： <ul>\n<li>1.并发请求对服务端造成较大压力 </li>\n<li>2.数据可能没有更新，造成无效请求 </li>\n<li>3.频繁的网络请求导致客户端设备电量、流量快速消耗 </li>\n<li>4.定时操作存在时间差，可能造成数据同步不及时 </li>\n<li>5.每次请求都需要携带完整的请求头</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>长轮询</strong> 即服务端在收到请求之后，如果数据无更新，会阻塞请求，直至数据更新或连接超时才返回。 <ul>\n<li>优点：相较于短轮询减少了HTTP请求的次数，节省了部分资源。 </li>\n<li>缺点： <ul>\n<li>1.连接挂起同样会消耗资源 </li>\n<li>2.冗余请求头问题依旧存在</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"WebSocket比传统全双工协议的优势\"><a href=\"#WebSocket比传统全双工协议的优势\" class=\"headerlink\" title=\"WebSocket比传统全双工协议的优势\"></a>WebSocket比传统全双工协议的优势</h4><p>当连接建立之后，后续的数据都是以<strong>帧的形式</strong>发送。<strong>除非某一端主动断开连接，否则无需重新建立连接</strong>。因此可以做到：</p>\n<ul>\n<li>1.减轻服务器的负担 </li>\n<li>2.极大地减少不必要的流量、电量消耗 </li>\n<li>3.提高实时性，保证客户端和服务端数据的同步 </li>\n<li>4.减少冗余请求头造成的开销</li>\n</ul>\n<h4 id=\"WebSocket比其他即时通讯协议的优势\"><a href=\"#WebSocket比其他即时通讯协议的优势\" class=\"headerlink\" title=\"WebSocket比其他即时通讯协议的优势\"></a>WebSocket比其他即时通讯协议的优势</h4><ul>\n<li><p>1.<strong>较少的控制开销。</strong>在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。 </p>\n</li>\n<li><p>2.<strong>更好的二进制支持。</strong>Websocket定义了二进制帧，相对HTTP，可以更轻松地处理二进制内容。 </p>\n</li>\n<li><p>3.<strong>可以支持扩展。</strong>Websocket定义了扩展，用户可以扩展协议、实现部分自定义的子协议，如XMPP协议、MQTT协议等。</p>\n</li>\n</ul>\n<h4 id=\"WebSocket协议在Android客户端的实现\"><a href=\"#WebSocket协议在Android客户端的实现\" class=\"headerlink\" title=\"WebSocket协议在Android客户端的实现\"></a>WebSocket协议在Android客户端的实现</h4><ul>\n<li>创建WebSocket实例并提供一个URL以指定要连接的服务器地址</li>\n<li>提供一个WebSocket连接事件监听器，用于监听事件回调以处理连接生命周期的每个阶段</li>\n</ul>\n<p>[即时通讯协议选型：WebSocket协议](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG91dGlhby5jb20vYXJ0aWNsZS83MTU2MjA5OTM4NTM1MDM5NTI5Lz9vbmx5X3JlYz0xJnNoYXJlX3Rva2VuPTkzNTAyNzUxLTM0ZmEtNDZlZi1iODUxLWUyNzUyZWM0Yjg0OSZzb3VyY2U9bV9yZWRpcmVjdCZ3aWQ9MTY2NjU5Mjc2NzEyNg==\">即时通讯协议选型：WebSocket协议-今日头条 (toutiao.com)</span>)</p>\n",
            "tags": [
                "WebSocket"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/11-%E6%89%8B%E5%86%99new%EF%BC%8Ccall%EF%BC%8Capply%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "http://victinsever.github.io/2022/10/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/11-%E6%89%8B%E5%86%99new%EF%BC%8Ccall%EF%BC%8Capply%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "手写new，call，apply的实现",
            "date_published": "2022-10-22T05:20:48.000Z",
            "content_html": "<h3 id=\"手写new的实现\"><a href=\"#手写new的实现\" class=\"headerlink\" title=\"手写new的实现\"></a>手写new的实现</h3><ul>\n<li>第一版</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_new</span>(<span class=\"params\">Ctor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\">    obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Ctor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">    <span class=\"title class_\">Ctor</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二版</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_new</span>(<span class=\"params\">Ctor, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否是构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title class_\">Ctor</span>.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;prototype&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Ctor is not a constructor&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据Ctor的原型创建一个对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Ctor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//显示绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"title class_\">Ctor</span>.<span class=\"title function_\">apply</span>(obj, args)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//判断绑定结果不是null且对象和函数同时可能存在的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result !== <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> result == <span class=\"string\">&#x27;object&#x27;</span> || <span class=\"keyword\">typeof</span> result == <span class=\"string\">&#x27;function&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Pig</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name &#125;</span><br><span class=\"line\"><span class=\"title function_\">_new</span>(<span class=\"title class_\">Pig</span>, <span class=\"string\">&quot;peiqi&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写call的实现\"><a href=\"#手写call的实现\" class=\"headerlink\" title=\"手写call的实现\"></a>手写call的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收实参有三种方案:</span></span><br><span class=\"line\">    <span class=\"comment\">//    1)通过形参</span></span><br><span class=\"line\">    <span class=\"comment\">//    2)通过...args</span></span><br><span class=\"line\">    <span class=\"comment\">//    3)通过arguments  伪数组  接收了所有的实以</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mycall</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">        context = context ? <span class=\"title class_\">Object</span>(context) : <span class=\"variable language_\">window</span></span><br><span class=\"line\">        context.<span class=\"property\">f</span> = <span class=\"variable language_\">this</span>; <span class=\"comment\">// f也是指向fn函数</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = context.<span class=\"title function_\">f</span>(...args);  <span class=\"comment\">// 隐式绑定</span></span><br><span class=\"line\">        <span class=\"keyword\">delete</span> context.<span class=\"property\">f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 挂载到Function的原型对象上</span></span><br><span class=\"line\">    <span class=\"comment\">// 就意味着所有的函数都可以调用mycall</span></span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = mycall;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = fn.<span class=\"title function_\">mycall</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写apply的实现\"><a href=\"#手写apply的实现\" class=\"headerlink\" title=\"手写apply的实现\"></a>手写apply的实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">mlapply</span>(<span class=\"params\">context, args</span>) &#123;</span><br><span class=\"line\">        context = context ? <span class=\"title class_\">Object</span>(context) : <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">        context.<span class=\"property\">f</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = context.<span class=\"title function_\">f</span>(...args);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> context.<span class=\"property\">f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mlapply</span> = mlapply;</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/10-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9AJS%E4%B8%AD%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8Ba%E7%AD%89%E4%BA%8E1%E6%88%96%E8%80%852%E6%88%96%E8%80%853/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/10-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9AJS%E4%B8%AD%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8Ba%E7%AD%89%E4%BA%8E1%E6%88%96%E8%80%852%E6%88%96%E8%80%853/",
            "title": "面试题：JS中在什么情况下a等于1或者2或者3",
            "date_published": "2022-10-21T15:02:20.000Z",
            "content_html": "<h3 id=\"面试题1：JS中在什么情况下a等于1或者2或者3？\"><a href=\"#面试题1：JS中在什么情况下a等于1或者2或者3？\" class=\"headerlink\" title=\"面试题1：JS中在什么情况下a等于1或者2或者3？\"></a>面试题1：JS中在什么情况下a等于1或者2或者3？</h3><p><strong>题目详情如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = ?;</span><br><span class=\"line\">if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) &#123;</span><br><span class=\"line\">    console.log(&quot;i love you~&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案一：通过重写valueOf方法返回1,2,3</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++<span class=\"variable language_\">this</span>.<span class=\"property\">i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案二：通过重写toString方法返回1,2,3</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">i</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++<span class=\"variable language_\">this</span>.<span class=\"property\">i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案三：通过数组的shift每次拿到1,2,3赋值给toString方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.<span class=\"property\">toString</span> = a.<span class=\"property\">shift</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方案四：通过Object.defineProperty定义变量进行迭代</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"variable language_\">window</span>,<span class=\"string\">&quot;a&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ++i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "JavaScript",
                "面试题"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/09-with%EF%BC%8Ceval%EF%BC%8C%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/09-with%EF%BC%8Ceval%EF%BC%8C%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/",
            "title": "with，eval，严格模式",
            "date_published": "2022-10-21T14:49:23.000Z",
            "content_html": "<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><ul>\n<li><p>功能：扩展作用域链。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> address = <span class=\"string\">&quot;bj&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">uname</span>: <span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">uage</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// var uname = &quot;xq&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果自己没有uname，会去obj中找uname</span></span><br><span class=\"line\">    <span class=\"comment\">// with扩展了作用域链</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果obj中没有，去ECG中找</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uname);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(address);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在开发中，不要使用with语句，因为破坏了作用域链</p>\n</li>\n<li><p>vue源码中使用到了with语句</p>\n</li>\n</ul>\n<h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h4><ul>\n<li><p>功能：把一片字符串，当成JS代码去执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"comment\">//  一片字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsStr = <span class=\"string\">&quot; var msg=&#x27;haha&#x27;; console.log(msg); console.log(age); &quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(jsStr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>eval是JS中内置的函数，直接去调用</p>\n</li>\n<li><p>eval执行的代码，并不是一个沙箱环境，受外界的影响</p>\n</li>\n<li><p>开发中不建议使用</p>\n</li>\n</ul>\n<h4 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h4><p>JS被设计时，非常灵活，也有非常多的不足，在ES5中，提出了严格模式，默认情况下，我们写的代码执行时，并不是严格模式。要使用严格模式，必须开启严格模式。</p>\n<ul>\n<li><p>开启严格模式</p>\n<ul>\n<li><p>在一个JS文件的最前面开启，这样，整个JS文件都要受严格模式的约束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js文件</span></span><br><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在某个函数中，开启严格模式，函数体中的代码就受严格模式的约束。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">gn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>严格模式限制</p>\n<ul>\n<li><p>不能使用没有加var的全局变量</p>\n</li>\n<li><p>在严格模式下形参不能重名</p>\n</li>\n<li><p>不能使用老的8进制数据的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// let num1 = 0x123; // 16进制</span></span><br><span class=\"line\"><span class=\"comment\">// let num2 = 0o10; // 8进制</span></span><br><span class=\"line\"><span class=\"comment\">// let num3 = 010;  // 8进制 (老的写法)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不能使用with语句</p>\n</li>\n<li><p>在严格模式下，JS串中定义的数据，外界不能使用。外界定义的数据，在JS串中还是可以使用</p>\n</li>\n<li><p>在非严格模式下，this是window  在严格模式下，不会默认绑定，this是undefind。 独立函数调用，this不再表示window，是und</p>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/08-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/08-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/",
            "title": "数据存储",
            "date_published": "2022-10-21T14:34:23.000Z",
            "content_html": "<h3 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><h4 id=\"使用的API\"><a href=\"#使用的API\" class=\"headerlink\" title=\"使用的API\"></a>使用的API</h4><ul>\n<li>length 返回数据的数量</li>\n<li>setItem(key, value) 存储数据的 如果key一样，数据会发生覆盖</li>\n<li>getItem(key) 获取数据</li>\n<li>removeItem(key) 删除数据</li>\n<li>Clear() 清除local storage中的所有的数据</li>\n</ul>\n<p><strong>localStorage是永久本地存储，只能手动删除修改</strong></p>\n<h4 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h4><h4 id=\"使用的API-1\"><a href=\"#使用的API-1\" class=\"headerlink\" title=\"使用的API\"></a>使用的API</h4><ul>\n<li>length 返回数据的数量</li>\n<li>setItem(key, value) 存储数据的 如果key一样，数据会发生覆盖</li>\n<li>getItem(key) 获取数据</li>\n<li>removeItem(key) 删除数据</li>\n<li>Clear() 清除session storage中的所有的数据</li>\n</ul>\n<p><strong>如果把浏览器关闭了，sessioinStorage中的数据就没有了</strong></p>\n<h3 id=\"封装Cache：缓存存储\"><a href=\"#封装Cache：缓存存储\" class=\"headerlink\" title=\"封装Cache：缓存存储\"></a>封装Cache：缓存存储</h3><ul>\n<li>使用<strong>原型对象</strong>封装：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Cache</span>(<span class=\"params\">isLocal = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = isLocal ? <span class=\"variable language_\">localStorage</span> : sessionStorage;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        value = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">removeItem</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">clear</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">length</span> = <span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> localCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sessionCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<strong>class</strong>封装：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cache</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">isLocal = <span class=\"literal\">true</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span> = isLocal ? <span class=\"variable language_\">localStorage</span> : sessionStorage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">setItem</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">setItem</span>(key, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(value))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">getItem</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">getItem</span>(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            value = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">removeItem</span>(<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">removeItem</span>(key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"title function_\">clear</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">length</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">storage</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> localCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sessionCache = <span class=\"keyword\">new</span> <span class=\"title class_\">Cache</span>(<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "JavaScript",
                "cache"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/07-JSON/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/07-JSON/",
            "title": "JSON",
            "date_published": "2022-10-21T14:21:05.000Z",
            "content_html": "<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><ul>\n<li>JSON: JavaScript Object Notation JS对象描述符</li>\n<li>前后端交互的一种数据格式，我们可以把JSON数据扔给后端，后端也可以响应JSON数据</li>\n</ul>\n<h3 id=\"JSON格式\"><a href=\"#JSON格式\" class=\"headerlink\" title=\"JSON格式\"></a>JSON格式</h3><ul>\n<li><p>格式一：字符串</p>\n<ul>\n<li><p>不能使用单引号</p>\n</li>\n<li><p>很少使用直接的字符串类型，而是被包装成后两种</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello json&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>格式二：对象</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">18</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;friend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xq&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;hobbies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;coding&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>格式三：数组</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;abc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"number\">123</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;wc&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"JSON序列化和反序列化\"><a href=\"#JSON序列化和反序列化\" class=\"headerlink\" title=\"JSON序列化和反序列化\"></a>JSON序列化和反序列化</h3><ul>\n<li><p>序列化：把对象转成JSON串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> jsonStr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj)</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;obj&quot;</span>, jsonStr)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反序列化：把JSON串还原成JS对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonStr = <span class=\"variable language_\">window</span>.<span class=\"property\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;obj&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonStr);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>序列化和反序列化过程是深度拷贝</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === newObj) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "JSON"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/06-%E7%BB%A7%E6%89%BF/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/06-%E7%BB%A7%E6%89%BF/",
            "title": "JS继承",
            "date_published": "2022-10-21T02:21:05.000Z",
            "content_html": "<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>让多个类之前，建立关系，便于代码的管理和复用。</p>\n<h3 id=\"不使用继承\"><a href=\"#不使用继承\" class=\"headerlink\" title=\"不使用继承\"></a>不使用继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>同种属性或者类似的方法不能复用，代码累赘。</p>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();  <span class=\"comment\">// 原型继承可以继承父类上的公有方法</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>;  <span class=\"comment\">// 手动修改constructor的指向</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>通过显式原型对象建立对象关系，即子对象的原型指向父类。</p>\n</li>\n<li><p>原型链继承：<strong>改变子类的原型对象</strong></p>\n<ul>\n<li><p>核心：Student.prototype &#x3D; new Person();   修改子类的原型对象</p>\n</li>\n<li><p>缺点：如果父中的数据是引用数据类型，子对象修改了，另一个子对象也会受影响</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Person执行了...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name,age,className</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,age);  <span class=\"comment\">// 1遍,调用父类传参</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// new Person(); // 也让Person函数执行一遍</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(); <span class=\"comment\">// 原型链继承核心</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>核心：</p>\n<ul>\n<li><p>Student.prototype &#x3D; new Person(); &#x2F;&#x2F; 继承父类的公有属性</p>\n</li>\n<li><p>Person.call(this,name,age);  &#x2F;&#x2F; 继承父类的私有属性</p>\n</li>\n</ul>\n</li>\n<li><p>缺点：Person.call(this,name,age);  让父类构造函数多执行一遍</p>\n<h3 id=\"Object-createAPI\"><a href=\"#Object-createAPI\" class=\"headerlink\" title=\"Object.createAPI\"></a>Object.createAPI</h3></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个对象，又有一个新方案：Object.create</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用来创建一个非常干净的，没有原型对象的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Object.create可以给创建出来的新对象指定原型对象。</p>\n<h3 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用Object.createAPI和组合继承一起调用。</p>\n<h3 id=\"ES6中的Class继承\"><a href=\"#ES6中的Class继承\" class=\"headerlink\" title=\"ES6中的Class继承\"></a>ES6中的Class继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;会说话...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让Student类继承Person类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age); <span class=\"comment\">// 调用父类的 constructor</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "JavaScript",
                "继承"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "url": "http://victinsever.github.io/2022/10/19/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/05-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/",
            "title": "原型和原型链",
            "date_published": "2022-10-19T13:29:05.000Z",
            "content_html": "<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><h4 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h4><ul>\n<li><p>显示原型</p>\n<ul>\n<li>每个构造器（类）上都有一个叫prototype属性</li>\n<li>prototype叫显示原型</li>\n</ul>\n</li>\n<li><p>隐式原型</p>\n<ul>\n<li><p>只要是一个对象，它的身上必定有一个属性，叫 _<em>proto__，</em> __proto__是属性名，叫隐式原型，对象的值是一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;</span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> <span class=\"comment\">//隐式原型对象</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>显示原型和隐式原型指向同一个对象，叫做原型对象</p>\n</li>\n</ul>\n<h4 id=\"对象的私有和公有属性\"><a href=\"#对象的私有和公有属性\" class=\"headerlink\" title=\"对象的私有和公有属性\"></a>对象的私有和公有属性</h4><ul>\n<li><p>obj是一个对象，属性的无序集合，属性的分类有两种：</p>\n<ul>\n<li>私有属性<ul>\n<li>非proto找到的属性</li>\n</ul>\n</li>\n<li>公有属性  沿着__proto__找到的属性都是公有属性</li>\n</ul>\n</li>\n<li><p>对象在调用属性时，先使用hasOwnProperty方法判断是否是私有属性，如果没有就会沿着原型链向上查找</p>\n</li>\n</ul>\n<h4 id=\"两个属性存在判断方法\"><a href=\"#两个属性存在判断方法\" class=\"headerlink\" title=\"两个属性存在判断方法\"></a>两个属性存在判断方法</h4><ul>\n<li><p>hasOwnProperty</p>\n<ul>\n<li><p>判断当前对象自身是否有该属性（不在原型链上寻找，判断是否是私有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;name&#x27;</span>));  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>in</p>\n<ul>\n<li><p>判断当前对象是否有该属性（任何位置，不管是公有还是私有）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;push&quot;</span> <span class=\"keyword\">in</span> arr);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// arr1是对象  对象身上都有一个隐式原型</span></span><br><span class=\"line\"><span class=\"comment\">// Array是类，也叫构造器，本质就是函数</span></span><br><span class=\"line\"><span class=\"comment\">// 函数身都都一个显示原型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;wc&quot;</span>, <span class=\"string\">&quot;xq&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"string\">&quot;jj&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == arr1.<span class=\"property\">__proto__</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> == arr2.<span class=\"property\">__proto__</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span> == <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span>.<span class=\"property\">__proto__</span>); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>作用域链：在EC中查找数据的机制</li>\n</ul>\n<p><img data-src=\"/./../../image/12321-1666190602837-3.png\" alt=\"12321\"></p>\n<ul>\n<li><p>原型链：在对象上查找某个属性的机制</p>\n<ul>\n<li><p>上图中的查找顺序如下图红色线所指：</p>\n<p><img data-src=\"/./../../image/14-%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"14-原型链\"></p>\n</li>\n<li><p>原型查找不断向上寻找作用域链中的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;wc&quot;</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> == <span class=\"title class_\">Person</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/./../../image/15-%E5%8E%9F%E5%9E%8B%E9%93%BE.png\" alt=\"15-原型链\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>一切都是对象</p>\n</li>\n<li><p>对象是属性的无序集合</p>\n</li>\n<li><p>属性分公有属性和私有属性</p>\n</li>\n<li><p>每个对象身上都有一个__proto__属性，叫隐式原型 </p>\n</li>\n<li><p>每个函数身上都有一个prototype属性，叫显示式原型</p>\n</li>\n<li><p>对象的隐式原型和函数的显示原型，指向一个对象，叫原型对象</p>\n</li>\n<li><p>每一个原型对象身上有一个constructor属性，指向函数本身</p>\n</li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "原型",
                "原型链"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/04-OOP%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88/",
            "url": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/04-OOP%E5%8F%8A%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%A1%88/",
            "title": "OOP",
            "date_published": "2022-10-18T12:46:23.000Z",
            "content_html": "<h2 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h2><h3 id=\"对象的创建方法\"><a href=\"#对象的创建方法\" class=\"headerlink\" title=\"对象的创建方法\"></a>对象的创建方法</h3><ul>\n<li>new Object()</li>\n<li>let obj &#x3D; {}</li>\n</ul>\n<h3 id=\"JS的内置类\"><a href=\"#JS的内置类\" class=\"headerlink\" title=\"JS的内置类\"></a>JS的内置类</h3><ul>\n<li>常用的：Number，Array，Date，Function，Math，String，Boolean，Window，Set，Map</li>\n<li>Math，Window等是单体内置类（不能new）</li>\n</ul>\n<h3 id=\"JS所有数据都是对象\"><a href=\"#JS所有数据都是对象\" class=\"headerlink\" title=\"JS所有数据都是对象\"></a>JS所有数据都是对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 得到一个伪数组  伪数组不是数组  是对象</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]    &#123;0:&quot;a&quot;,1:&quot;b&quot;,2:&quot;c&quot;&#125;伪数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;li&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> lis = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 一个真实的DOM元素，本质就是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 这个对象中的属性非常多，操作这个对象，性能就非常低</span></span><br><span class=\"line\"><span class=\"comment\">// jq死了，jq操作的是DOM元素，操作DOM元素性能就低</span></span><br><span class=\"line\"><span class=\"comment\">// vue  react操作的是虚拟DOM元素，虚拟DOM中的属性就没有那么多</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(lis[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>因此，在开发中，一般不直接操作原生DOM，而是使用项目框架来操作虚拟DOM，提高性能。</p>\n<ul>\n<li><p>对象中的键都是字符串，不管加不加单双引号</p>\n</li>\n<li><p>键也可以是其他值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"number\">123</span>: <span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">true</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">    <span class=\"attr\">undefined</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;run...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"number\">123</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"literal\">true</span>]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">true</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"title function_\">undefined</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1[<span class=\"literal\">undefined</span>]());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象没有length</p>\n</li>\n<li><p>遍历对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历对象使用for in</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"对象创建方案\"><a href=\"#对象创建方案\" class=\"headerlink\" title=\"对象创建方案\"></a>对象创建方案</h3><ul>\n<li><p>通过字面量的形式创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wc = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">188</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&quot;bj&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">coding</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;coding...&quot;</span>); &#125;,</span><br><span class=\"line\">    <span class=\"attr\">eating</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;eating...&quot;</span>); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：①大量重复代码；②内存空间浪费</p>\n</li>\n<li><p>工厂函数创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name,age,height,address</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = &#123;&#125;;</span><br><span class=\"line\">    p.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    p.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    p.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">    p.<span class=\"property\">address</span> = address;</span><br><span class=\"line\">    p.<span class=\"property\">coding</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;coding...&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wc = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wangcai&quot;</span>,<span class=\"number\">11</span>,<span class=\"number\">180</span>,<span class=\"string\">&quot;bj&quot;</span>);  wc.<span class=\"title function_\">coding</span>();</span><br></pre></td></tr></table></figure>\n\n<p>直接产出对象</p>\n<p>缺点：获取工厂化对象时会通过字面量形式</p>\n</li>\n<li><p>构造器创建对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;fn...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1）创建一个新的对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 2）让函数中的this绑定到这个新对象上  new绑定</span></span><br><span class=\"line\">    <span class=\"comment\">// 3）执行类（函数）中的代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 4）返回上面的新对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p>缺点：也会造成空间浪费</p>\n</li>\n<li><p>构造器+原型对象创建对象</p>\n</li>\n</ul>\n<p>推荐使用：构造器+原型对象</p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/03-JS%E7%9A%84this/",
            "url": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/03-JS%E7%9A%84this/",
            "title": "JS的this",
            "date_published": "2022-10-18T11:59:01.000Z",
            "content_html": "<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么\"></a>this是什么</h3><ul>\n<li>this到底是什么和你书写的位置没有关系，和调用方式有关系</li>\n<li>this是在产生EC时，动态绑定的</li>\n</ul>\n<h3 id=\"this的绑定规则\"><a href=\"#this的绑定规则\" class=\"headerlink\" title=\"this的绑定规则\"></a>this的绑定规则</h3><ul>\n<li><p><strong>函数的角色</strong></p>\n<ul>\n<li><p>普通函数</p>\n</li>\n<li><p>对象中的方法</p>\n</li>\n<li><p>对象（一切都是对象）  对象是属性的无序集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;gn...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// dir表示以对象有形式打印出函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(gn);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数也是类（构造函数&#x2F;构造器），通常情况下，首字母大写</p>\n</li>\n</ul>\n</li>\n<li><p>默认绑定</p>\n<p>独立调用则直接输出window</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">gn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">       <span class=\"title function_\">fn</span>();  <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">kn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">// window</span></span><br><span class=\"line\">       <span class=\"title function_\">gn</span>();  <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 独立函数调用</span></span><br><span class=\"line\"> <span class=\"title function_\">kn</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>隐式绑定</p>\n<ul>\n<li><p>一个函数中的this是什么，就看谁去调用了这个函数</p>\n</li>\n<li><p>obj打点去调用了，函数中的this表示obj</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">fn</span>:fn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不叫独立的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">// 是通过obj打点去调用的</span></span><br><span class=\"line\"><span class=\"comment\">// fn中的this表示什么，就看点前面是什么</span></span><br><span class=\"line\"><span class=\"comment\">// 点前面是obj，this就是obj</span></span><br><span class=\"line\">obj.<span class=\"title function_\">fn</span>();<span class=\"comment\">//obj</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;xq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gn</span>:obj.<span class=\"property\">fn</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj2.<span class=\"title function_\">gn</span>(); <span class=\"comment\">//obj2</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>显示绑定</p>\n<ul>\n<li><p>函数也是一个对象，对象是属性的无序集合，内部有非常多的默认属性或方法，重点关注三个方法，call，apply，bind</p>\n</li>\n<li><p>call</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1,num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数也是对象，call是它内部的一个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 我们直接去调用这个方法</span></span><br><span class=\"line\"><span class=\"comment\">// 此方法，可以让我们显示地绑定this</span></span><br><span class=\"line\"><span class=\"comment\">// call的作用：1）显示绑定this  2）让fn执行 3）也可以传递</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(obj,<span class=\"number\">666</span>,<span class=\"number\">111</span>);  <span class=\"comment\">// 显示绑定函数中的this</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>apply</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply的作用和call一样，只不过传参的方式不一样</span></span><br><span class=\"line\"><span class=\"comment\">// apply的话，需要把参数放到一个数组中</span></span><br><span class=\"line\">fn.<span class=\"title function_\">apply</span>(obj, [<span class=\"number\">666</span>, <span class=\"number\">111</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>bind</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">num1, num2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>, num1 + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind的作用：1）显示绑定this  2）也可以传参   但是不会让函数执行，call和apply都会让函数执行  3）bind返回绑定this之后的新函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newFn = fn.<span class=\"title function_\">bind</span>(obj, <span class=\"number\">666</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">newFn</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结</p>\n<ul>\n<li>call  fn.call(obj,1,2)  显示绑定this  让fn执行  也能传参</li>\n<li>apply  fn.apply(obj,[1,2])  显示绑定this  让fn执行  参数放数组中</li>\n<li>bind  fn.bind(obj,1,2)  显示绑定this  返回绑定this后的新函数  也能传参</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// String &#123;&#x27;hello&#x27;&#125;  是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//  会把hello包装成一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// fn.call(&quot;hello&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果绑定到und上，实际是绑定到了window上</span></span><br><span class=\"line\"><span class=\"comment\">// fn.call(undefined);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果绑定到null上，实际是绑定到了window上</span></span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>new绑定</p>\n<ul>\n<li><p>new做了什么</p>\n<ul>\n<li>在函数内部创建一个对象</li>\n<li>把函数内的this绑定到了对象上</li>\n<li>函数执行</li>\n<li>返回这个对象（new完后，肯定是得到一个对象）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;wc&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new一个类，得到一个对象  new是一个运算符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>内置函数绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器中的this表示window</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;btn&quot;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听器中的this表示事件源</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"绑定优先级\"><a href=\"#绑定优先级\" class=\"headerlink\" title=\"绑定优先级\"></a>绑定优先级</h3><ul>\n<li>显示 &gt; 隐式</li>\n<li>new &gt; 隐式</li>\n<li>new &gt; bind</li>\n<li>new绑定 不能和call与apply比较（因为call和apply执行了）</li>\n</ul>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><h3 id=\"箭头函数书写方法\"><a href=\"#箭头函数书写方法\" class=\"headerlink\" title=\"箭头函数书写方法\"></a>箭头函数书写方法</h3><ul>\n<li><p>普通写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> =  (<span class=\"params\">num1, num2</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>形参只有1个，那么()可以不写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1*<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数体中只有一条语句，{}和return 都可以不写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; num1 * <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数体中只有一条语句，没有reutrn，{}也是可以不写的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = num1 =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 ** <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数体中只有一条语句，并且返回一个对象  删除return 和 {}，对象的{}会当成函数的{}，如果没有形参 ()不能省</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">foo</span> = (<span class=\"params\"></span>) =&gt; (&#123; <span class=\"attr\">a</span>: <span class=\"number\">666</span> &#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"箭头函数特点\"><a href=\"#箭头函数特点\" class=\"headerlink\" title=\"箭头函数特点\"></a>箭头函数特点</h3><ul>\n<li>箭头函数中没有this指向自身，当中的this指向函数外部</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);<span class=\"comment\">//window</span></span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>箭头函数没有constuctor，不能被new出来</li>\n<li>箭头函数不能用作generator函数，不能被当做迭代器</li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "this"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/02-%E5%8F%98%E9%87%8F%E5%92%8C%E9%97%AD%E5%8C%85/",
            "url": "http://victinsever.github.io/2022/10/18/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/02-%E5%8F%98%E9%87%8F%E5%92%8C%E9%97%AD%E5%8C%85/",
            "title": "变量和闭包",
            "date_published": "2022-10-18T10:18:01.000Z",
            "content_html": "<h3 id=\"Var变量加与不加的区别\"><a href=\"#Var变量加与不加的区别\" class=\"headerlink\" title=\"Var变量加与不加的区别\"></a>Var变量加与不加的区别</h3><ul>\n<li><p>加var在预编译期间会提升，不加var不会</p>\n</li>\n<li><p>不管是否加var，只要全局变量，在非严格模式下，都会挂载到GO上</p>\n</li>\n<li><p>加var的变量，可以做全局变量，也可以做局部变量，没有加var只能做全局变量</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(b);</span></span><br><span class=\"line\">b = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">b</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li><p>项目开发中，基本上都是清一色的let</p>\n</li>\n<li><p>let是ES6中提出来，弥补了var声明变量的缺点</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// ReferenceError: Cannot access &#x27;a&#x27; before initialization</span></span><br><span class=\"line\">    <span class=\"comment\">// a没有初始化（赋值），是不能访问的</span></span><br><span class=\"line\">    <span class=\"comment\">// 理解成：使用let声明的变量是没有提升</span></span><br><span class=\"line\">    <span class=\"comment\">// 理解成：使用let声明的变量提升了，但是没有赋值，没有赋值是不能直接访问的</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">110</span>;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// let+&#123;&#125;可以形成块级作用域</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// let + &#123;&#125; 形成块级作用域</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 块级作用域中定义的变量，只能在块中使用</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"comment\">// 出了这个块，就不能使用了</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">let</span> c = <span class=\"number\">110</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span> --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 使用let声明的变量，并不会挂载到GO上</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">110</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">a</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">//  SyntaxError: Identifier &#x27;a&#x27; has already been declared </span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li><p>使用const声明变量（常量）的特点：</p>\n<p>​    1）声明的变量不能修改</p>\n<p>​    2）使用const声明变量时，必须赋值，不然会报语法错误</p>\n<p>​    3）const声明的变量也不会提升</p>\n<p>​    4）const和{}也可以形成块级作用域</p>\n<p>​    5）const声明的变量也不会挂载到GO上</p>\n</li>\n<li><p>在项目中，定义变量使用let，定义常量，使用const</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">    <span class=\"variable constant_\">PI</span> = <span class=\"number\">666</span>; <span class=\"comment\">// TypeError: Assignment to constant variable.</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.14</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">PI</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列子\"><a href=\"#列子\" class=\"headerlink\" title=\"列子\"></a>列子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"comment\">//输出为5,5,5,3,3,3</span></span><br></pre></td></tr></table></figure>\n\n<p>上述列子中，fn被整体提升，前面三个输出5，在第四个fn之前进行fn赋值，输出都是3</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><ul>\n<li>一个不能被回收释放掉的栈空间成为闭包。</li>\n<li>有些不能被回收的闭包会造成内存空间泄露。</li>\n<li>作用<ul>\n<li>保护  保护EC中的变量，外界不能直接访问</li>\n<li>保存  可以让我们像使用全局变量那样使用局部变量，延长变量的生命周期</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/./../../image/10-%E5%BC%95%E5%87%BA%E9%97%AD%E5%8C%85.png\" alt=\"10-引出闭包\"></p>\n<h4 id=\"闭包典型题\"><a href=\"#闭包典型题\" class=\"headerlink\" title=\"闭包典型题\"></a>闭包典型题</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    i -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>((++i) - n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\"><span class=\"comment\">//10 10 8 20</span></span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"/./../../image/12-%E9%97%AD%E5%8C%85%E7%BB%83%E4%B9%A0%E9%A2%98.png\" alt=\"12-闭包练习题\"></p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/17/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "url": "http://victinsever.github.io/2022/10/17/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "title": "Dijkstra单源最短路径算法",
            "date_published": "2022-10-17T13:51:03.000Z",
            "content_html": "<h2 id=\"单源最短路径问题\"><a href=\"#单源最短路径问题\" class=\"headerlink\" title=\"单源最短路径问题\"></a>单源最短路径问题</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个带权有向图G&#x3D;（V,E），其中每条边的权是一个实数。另外，还给定V中的一个顶点，称为源。要计算从源到其他所有各顶点的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOUMlODAlRTclOUYlQUQlRTglQjclQUYlRTUlQkUlODQmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">最短路径</span>长度。这里的长度就是指路上各边权之和。这个问题通常称为单源最短路径问题。</p>\n<h3 id=\"Dijkstra算法简介\"><a href=\"#Dijkstra算法简介\" class=\"headerlink\" title=\"Dijkstra算法简介\"></a>Dijkstra算法简介</h3><p>迪杰斯特拉算法(Dijkstra)，是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQjQlQUElRTUlQkYlODMlRTclQUUlOTclRTYlQjMlOTUmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">贪心算法</span>的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>伪代码描述</p>\n<p><img data-src=\"/./../../image/6-1666018070046-21.png\" alt=\"6\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><ul>\n<li>数据结构：邻接表，数组队列，HashMap（此处没有采用，而是直接遍历查询）</li>\n<li>数据描述：<ul>\n<li>邻接表点类<ul>\n<li>包含：名称，被指向的权重，链接指针</li>\n<li>作用：邻接表的每个初始点</li>\n</ul>\n</li>\n<li>顶点表结构<ul>\n<li>包含：名称，该点的前一个顶点，距离起点距离</li>\n<li>作用：用于生成树的每个节点</li>\n</ul>\n</li>\n<li>邻接表<ul>\n<li>对于初始边集和顶点集数据的集合</li>\n<li>初始化时需要将边集的两个顶点都加入指针域</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"源代码（TS版）\"><a href=\"#源代码（TS版）\" class=\"headerlink\" title=\"源代码（TS版）\"></a>源代码（TS版）</h3><p>本算法源码解决的问题是无向图的单源最短路径问题。有向图的类似，只是在生成邻接表时，只生成一个方向。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//邻接表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T;<span class=\"comment\">//顶点名称</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//指向该顶点的边的权重</span></span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//下一个邻接顶点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顶点表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Vertex</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T,<span class=\"comment\">//顶点名称索引</span></span><br><span class=\"line\">    <span class=\"attr\">prePoint</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//前一个点</span></span><br><span class=\"line\">    <span class=\"attr\">distance</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//距离起点的距离</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">table</span>: <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">len</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> = vertexSet.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">table</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>(vertexSet, edgeSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">init</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据顶点集新建邻接表第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">name</span>: vertexSet[i], <span class=\"attr\">weight</span>: <span class=\"number\">0</span>, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据边集进行关系链接</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; edgeSet.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据边集的顺序阿加入</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">1</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">            <span class=\"comment\">//在加入相反方向的边</span></span><br><span class=\"line\">            temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">0</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;<span class=\"comment\">//找到下个点</span></span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getTable</span>(): <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">toString</span>(): <span class=\"title class_\">String</span> &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"title class_\">String</span> = <span class=\"string\">&#x27;&#x27;</span>;   </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> k = <span class=\"number\">1</span>;<span class=\"comment\">//右边括号个数</span></span><br><span class=\"line\">            str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">next</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + temp.<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + temp.<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">                temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;null&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27; &#125;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单元最短路径问题（输入顶点s的下标索引）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getMinDistance</span>(<span class=\"params\">s: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顶点优先队列初始化为空</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将每个顶点入栈，初始化优先级</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i&lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            queue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>: i, <span class=\"attr\">prePoint</span>: <span class=\"literal\">null</span>, <span class=\"attr\">distance</span>: <span class=\"title class_\">Infinity</span>&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将起点的优先级更新</span></span><br><span class=\"line\">        queue[s].<span class=\"property\">distance</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：删除优先级最小的元素：即删除distance最小的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">deleteMin</span> = (<span class=\"params\">queue: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Array is null !&#x27;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// let min = queue.reduce((pre, next) =&gt; &#123; return pre.distance &lt; next.distance ? pre : next&#125;)</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> min = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(queue[min].<span class=\"property\">distance</span> &gt; queue[i].<span class=\"property\">distance</span>) min = i;</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">return</span> queue.<span class=\"title function_\">splice</span>(min, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：树上节点和删除的节点取并集</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">unionTree</span> = (<span class=\"params\">tree: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, u: Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tree.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tree[i].<span class=\"property\">name</span> === u.<span class=\"property\">name</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//如果是相同点就不合并</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tree.<span class=\"title function_\">push</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：findIndex</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">findIndex</span> = (<span class=\"params\">arr: <span class=\"built_in\">Array</span>&lt;Point&lt;<span class=\"built_in\">number</span>&gt;&gt; | <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, target: Point&lt;<span class=\"built_in\">number</span>&gt; | Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[i].<span class=\"property\">name</span> === target.<span class=\"property\">name</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">//初始树</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">tree</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        tree.<span class=\"title function_\">push</span>(queue[s]);<span class=\"comment\">//初始树包含一个给定的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> u = <span class=\"title function_\">deleteMin</span>(queue);<span class=\"comment\">//删除优先级最小的元素</span></span><br><span class=\"line\">            <span class=\"title function_\">unionTree</span>(tree, u);<span class=\"comment\">//取并集</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//ps:此处应该用HashMap进行索引和name隐射</span></span><br><span class=\"line\">            <span class=\"comment\">//不在tree中，也每个和u相邻的顶点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"title function_\">findIndex</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">table</span>, u);<span class=\"comment\">//地址映射：从余下顶点到邻接表</span></span><br><span class=\"line\">            <span class=\"comment\">// let index = u.name - 1;</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[index];<span class=\"comment\">//邻接表中的u点</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> t = temp.<span class=\"property\">next</span></span><br><span class=\"line\">                index = <span class=\"title function_\">findIndex</span>(queue, t);<span class=\"comment\">//地址映射：从邻接表到余下顶点</span></span><br><span class=\"line\">                <span class=\"comment\">// index = t.name - 1;</span></span><br><span class=\"line\">                <span class=\"comment\">// console.log(index, queue[index]);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index !== -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//不在树上</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(u.<span class=\"property\">distance</span> + temp.<span class=\"property\">weight</span> &lt; queue[index].<span class=\"property\">distance</span>)&#123;</span><br><span class=\"line\">                        queue[index].<span class=\"property\">distance</span> = u.<span class=\"property\">distance</span> + t.<span class=\"property\">weight</span>;<span class=\"comment\">//刷新最短距离</span></span><br><span class=\"line\">                        queue[index].<span class=\"property\">prePoint</span> = t;<span class=\"comment\">//刷新前驱节点</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                </span><br><span class=\"line\">                temp = t;<span class=\"comment\">//遍历所有的相邻点</span></span><br><span class=\"line\">            &#125;                 </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//并上最后一个</span></span><br><span class=\"line\">        <span class=\"title function_\">unionTree</span>(tree, queue[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">vertexSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];<span class=\"comment\">//顶点集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">edgeSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]]; <span class=\"comment\">// 顶点 顶点 权值  //边集</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> <span class=\"title class_\">Table</span>(vertexSet, edgeSet);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">getMinDistance</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "Dijkstra"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/17/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/hexo%E5%92%8CTypora%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/",
            "url": "http://victinsever.github.io/2022/10/17/%E6%9D%82%E8%B0%88/%E5%8D%9A%E5%AE%A2/hexo%E5%92%8CTypora%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/",
            "title": "hexo和Typora中插入图片",
            "date_published": "2022-10-17T13:39:01.000Z",
            "content_html": "<h2 id=\"hexo与Typora完美结合：插入图片方便\"><a href=\"#hexo与Typora完美结合：插入图片方便\" class=\"headerlink\" title=\"hexo与Typora完美结合：插入图片方便\"></a>hexo与Typora完美结合：插入图片方便</h2><ul>\n<li><p>安装插件hexo-renderer-marked</p>\n<figure class=\"highlight bash\"><figcaption><span>安装插件hexo-renderer-marked</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在config.yml中修改配置如下</p>\n<figure class=\"highlight bash\"><figcaption><span>config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在config.yml中添加配置如下</p>\n<figure class=\"highlight bash\"><figcaption><span>config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: <span class=\"literal\">true</span></span><br><span class=\"line\">  postAsset: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在source文件中创建一个文件夹来存储图片，我这里创建的文件名为image（不要再主题的source文件夹下创建），如下</p>\n<p><img data-src=\"/./../../../image/1.png\" alt=\"1\"></p>\n</li>\n<li><p>打开typora:文件-&gt;偏好设置-&gt;图像，选择复制到指定路径-&gt;点开文件图标，选择刚刚创建的“image”（自己创建的存储图片的文件）文件-&gt;勾选如图下的四个勾选，版本不同可能不同，如图下：</p>\n<p><img data-src=\"/../../../image/2.png\" alt=\"2\"></p>\n</li>\n<li><p>接下来在用typora时，右键点击导入或者直接拖动图片直接复制进来进好啦会进行自动复制配置在你的image下了，此时已经可以正常使用了，如果本地使用 <strong>hexo s</strong> 命令后发现并没有成功，请看下一步。</p>\n</li>\n<li><p>大概率可能是命名重复，需要手动点击设置。</p>\n</li>\n<li><p>需要在Typora中右击图片选择复制到image</p>\n<p><img data-src=\"/./../../image/3-1666019418250-12.png\" alt=\"3\"></p>\n</li>\n<li><p>大功告成！</p>\n</li>\n</ul>\n<h5 id=\"参考文章：hexo博客如何插入图片-知乎-zhihu-com\"><a href=\"#参考文章：hexo博客如何插入图片-知乎-zhihu-com\" class=\"headerlink\" title=\"参考文章：hexo博客如何插入图片 - 知乎 (zhihu.com)\"></a>参考文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjUwNzc0Njg=\">hexo博客如何插入图片 - 知乎 (zhihu.com)</span></h5>",
            "tags": [
                "hexo",
                "Typora"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/10/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/01-EC%E5%92%8CJS%E6%89%A7%E8%A1%8C/",
            "url": "http://victinsever.github.io/2022/10/17/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/JavaScript/01-EC%E5%92%8CJS%E6%89%A7%E8%A1%8C/",
            "title": "JavaScript预编辑",
            "date_published": "2022-10-17T10:40:29.000Z",
            "content_html": "<p>JavaScript运行分为预编译和代码执行运行</p>\n<h3 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h3><p>预编译也叫预解析</p>\n<p>做了什么？</p>\n<pre><code>- 声明要提升 会先进行var和function的定义提升（只提升声明，而没有赋值，放在代码块最前面）\n- 函数内部局部变量，要提升到函数内部最前面\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 预编译会先进行var和function的定义提升</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//undefind</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">//2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">//und</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"number\">4</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行执行\"><a href=\"#运行执行\" class=\"headerlink\" title=\"运行执行\"></a>运行执行</h3><p>执行运行就是运行预编译后的js代码，现将所有的声明和函数执行后，运行代码块。</p>\n<h3 id=\"区\"><a href=\"#区\" class=\"headerlink\" title=\"区\"></a>区</h3><ul>\n<li>内存分为两个区：堆区和栈区</li>\n<li>栈区：存储基本数据类型</li>\n<li>栈区：存储引用数据类型</li>\n</ul>\n<h3 id=\"JavaScript代码类型\"><a href=\"#JavaScript代码类型\" class=\"headerlink\" title=\"JavaScript代码类型\"></a>JavaScript代码类型</h3><ul>\n<li>全局代码：script标签都是全局代码</li>\n<li>函数代码：每一个函数都是一个代码块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript代码执行\"><a href=\"#JavaScript代码执行\" class=\"headerlink\" title=\"JavaScript代码执行\"></a>JavaScript代码执行</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li><p>JS执行时，堆内存创建一个全局对象（GO）</p>\n</li>\n<li><p>全局代码执行时，产生全局执行上下文（ECG）</p>\n</li>\n<li><p>调用一个函数，产生一个局部执行上下文（EC）</p>\n</li>\n<li><p>执行上下文产生放在栈中，栈叫做执行上下文栈（ECS）</p>\n</li>\n</ul>\n<p>EC：给代码提供数据</p>\n<p>GO：也是就window对象</p>\n<p><img data-src=\"/./../../image/01-ECG%EF%BC%8CGO%EF%BC%8CECFn.png\" alt=\"01-ECG，GO，ECFn\"></p>\n<h4 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h4><p>执行代码开始，会将GO挂载</p>\n<p>①执行全局代码，产上ECG，入ECS</p>\n<p>②执行局部代码，产生EC，入ECS</p>\n<p>③出栈，一次出EC * N ,ECG</p>\n<p><img data-src=\"E:\\Code\\基础学习\\JavaScript\\js高级\\js\\1.png\"></p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/09/15/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/algorithm-01-%E7%AE%97%E6%B3%95%E5%A2%9E%E9%95%BF/",
            "url": "http://victinsever.github.io/2022/09/15/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/algorithm-01-%E7%AE%97%E6%B3%95%E5%A2%9E%E9%95%BF/",
            "title": "algorithm-01-算法增长",
            "date_published": "2022-09-15T06:03:03.000Z",
            "content_html": "<h3 id=\"渐进符号\"><a href=\"#渐进符号\" class=\"headerlink\" title=\"渐进符号\"></a>渐进符号</h3><ul>\n<li>作用：衡量算法增长效率</li>\n<li>类型：<ul>\n<li>O：上届</li>\n<li>seta：下界</li>\n<li>欧姆：等价</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分治思想\"><a href=\"#分治思想\" class=\"headerlink\" title=\"分治思想\"></a>分治思想</h3><h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><ul>\n<li>概念：</li>\n<li>例子：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\">n</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"title function_\">F</span>(n-<span class=\"number\">1</span>) * n</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>常见递归类型<ul>\n<li>减一算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">T</span>(n-<span class=\"number\">1</span>) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure></li>\n<li>减常因子算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">T</span>(n/b) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure></li>\n<li>分治算法<ul>\n<li>将大规模的问题分解成小问题逐一击破<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">T</span>(n) = <span class=\"title function_\">aT</span>(n/b) + <span class=\"title function_\">f</span>(n)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/09/13/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/flutter/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20Flutter%E6%98%AF%E4%BB%80%E4%B9%88/",
            "url": "http://victinsever.github.io/2022/09/13/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/flutter/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20Flutter%E6%98%AF%E4%BB%80%E4%B9%88/",
            "title": "Flutter学习笔记 - Flutter是什么",
            "date_published": "2022-09-13T08:37:55.000Z",
            "content_html": "<h2 id=\"Flutter特点\"><a href=\"#Flutter特点\" class=\"headerlink\" title=\"Flutter特点\"></a>Flutter特点</h2><ul>\n<li><p>多平台支持 iOS Android Linux 未来 Fuchsia OS</p>\n</li>\n<li><p>原生用户界面</p>\n</li>\n<li><p>120fps 超高性能</p>\n</li>\n<li><p>两套成熟 UI 库 Material Design 和 Cupertino</p>\n</li>\n<li><p>响应式的框架 Redux、RxDart、BloC 业务和 UI 分离</p>\n</li>\n<li><p>Flutter 支持 Hot Reload</p>\n</li>\n<li><p>国内阿里咸鱼、腾讯、京东、国外的谷歌等公司都已经有上线产品在使用 Flutter 开发</p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://victinsever.github.io/2022/09/13/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E8%BF%B0/",
            "url": "http://victinsever.github.io/2022/09/13/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%80%E8%BF%B0/",
            "title": "密码学简述",
            "date_published": "2022-09-13T06:22:03.000Z",
            "content_html": "<h2 id=\"对称密码学\"><a href=\"#对称密码学\" class=\"headerlink\" title=\"对称密码学\"></a>对称密码学</h2><h3 id=\"古典\"><a href=\"#古典\" class=\"headerlink\" title=\"古典\"></a>古典</h3><ul>\n<li>概述<ul>\n<li>加密和解密使用相同的密匙</li>\n<li>密匙使用秘密的渠道进行接送</li>\n</ul>\n</li>\n<li>加密算法特征<ul>\n<li><strong>其加密密钥与解密密钥相同或很容易相互推算出来</strong></li>\n<li><strong>整个通讯的安全性依赖于密钥的保密，而不是算法的保密</strong></li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>优点：加密速度快，计算量小、加密效率高，硬件容易实现和大规模生产</li>\n<li>缺点：密钥的分发与管理比较困难，当通信的人数 增加时，密钥数目急剧膨胀</li>\n</ul>\n</li>\n<li>扩散和混乱<ul>\n<li>混乱：密文和密钥之间的统计关系变得尽可能复杂，使得攻击无法得到密匙<ul>\n<li>混乱方法：<em><strong>多次迭代</strong></em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DES算法\"><a href=\"#DES算法\" class=\"headerlink\" title=\"DES算法\"></a>DES算法</h2><ul>\n<li>一种对称加密算法，体制公开，安全性完全依赖密钥，密钥是任意56bits</li>\n<li>安全性：密钥太短只有56个比特</li>\n<li>地位：第一个公开密码算法</li>\n<li>增强DES加密算法<ul>\n<li>DES缺点是密钥短，使用多个密钥等同于更长的密钥</li>\n<li>三个密钥的三重DES<ul>\n<li>对一个明文进行三次加密解密</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IDEA（估计数据加密算法）\"><a href=\"#IDEA（估计数据加密算法）\" class=\"headerlink\" title=\"IDEA（估计数据加密算法）\"></a>IDEA（估计数据加密算法）</h3><h3 id=\"AES算法（高级加密算法）\"><a href=\"#AES算法（高级加密算法）\" class=\"headerlink\" title=\"AES算法（高级加密算法）\"></a>AES算法（高级加密算法）</h3><ul>\n<li>长度可变</li>\n</ul>\n<h2 id=\"非对称密码学\"><a href=\"#非对称密码学\" class=\"headerlink\" title=\"非对称密码学\"></a>非对称密码学</h2><ul>\n<li>RSA算法<ul>\n<li>安全性是基于大整数素因子分解的困难性</li>\n<li>公钥和私钥是一对大素数P、Q的函数，从一个公钥和密文中恢复出明文的难度等价于分解两个大素数之积</li>\n<li>RSA算法描述如下：<br>1 选择p,q为互异素数<br>2 计算n&#x3D;p<em>q，(n)&#x3D;(p-1)</em>(q-1)<br>3 选择整数e使e与(n)互质<br>4 计算d，使满足d*e&#x3D;1mod (n)(<strong>≡为同余符号，模运算结果相同</strong>)<br>5  公钥PK&#x3D;{n,e} 私钥SK&#x3D;{n,d}</li>\n<li>缺陷<ul>\n<li>RSA的重大缺陷是无法从理论上把握它的保密性能如何</li>\n<li>产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。</li>\n<li>分组长度太大，为保证安全性，n 至少也要 600 bits 以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "密码学"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/09/09/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%9A%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%92%8C%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/",
            "url": "http://victinsever.github.io/2022/09/09/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%89%8D%E6%B2%BF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%AD%A6%EF%BC%9A%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E5%92%8C%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81/",
            "title": "古典密码学：凯撒密码和维吉尼亚密码",
            "date_published": "2022-09-09T13:23:29.000Z",
            "content_html": "<h2 id=\"凯撒密码和维吉尼亚密码\"><a href=\"#凯撒密码和维吉尼亚密码\" class=\"headerlink\" title=\"凯撒密码和维吉尼亚密码\"></a>凯撒密码和维吉尼亚密码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlODElQkElRTYlOTIlOTIlRTUlQUYlODYlRTclQTAlODEvNDkwNTI4NA==\">凯撒密码</span>是一种比较简单的古典密码，仅仅将明文的每个字符偏移相同的偏移量，从而达到加密的目的。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkIlQjQlRTUlOTAlODklRTUlQjAlQkMlRTQlQkElOUElRTUlQUYlODYlRTclQTAlODE/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">维吉尼亚密码</span>则是在凯撒密码的基础上演变而来，是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>\n<h2 id=\"本人创建的两种编译器\"><a href=\"#本人创建的两种编译器\" class=\"headerlink\" title=\"本人创建的两种编译器\"></a>本人创建的两种编译器</h2><p>本人采用Java语法编写算法，使用了两种思路来分别编写两种编译器类：CaesarCodeGenerator、VirginiaCodeGenerator</p>\n<ul>\n<li><p>CaesarCodeGenerator类将明文集合和密文集合定义在内，明文集合固定，而密文集合通过传入的密匙和明文集合生成。加密和解密算法分别将明密文集合一一对应即可达到编译码的功能。</p>\n<ul>\n<li>明密文集合定义如下：  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">MING</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<span class=\"comment\">//明文集合</span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">MI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.MI = <span class=\"built_in\">this</span>.MING.toUpperCase();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">(<span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>();</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.setMI(k);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>VirginiaCodeGenerator类中加密解密直接完成，没有定义明密文集合或者表完成。</p>\n<ul>\n<li><p>加密算法：对每个明文遍历，获取当前的密匙，然后根据公式（p为明文，k为密匙，c为密文，都为0~25的数字） <strong><strong>(p + k) &#x3D; c</strong></strong> 获取密文，对空格明文跳过。</p>\n</li>\n<li><p>解密算法：对每个密文遍历，获取当前的密匙，然后根据公式（p为明文，k为密匙，c为密文，都为0~25的数字） <strong><strong>(c - k) &#x3D; p</strong></strong> 获取密文。</p>\n</li>\n<li><p>维吉尼亚加密算法如下：</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_enc</span><span class=\"params\">(String m, String k)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">    m = m.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">        c += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;A&#x27;</span> + key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;A&#x27;</span>);<span class=\"comment\">//求出密文字母</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后附完整代码</p>\n<h2 id=\"破译难度\"><a href=\"#破译难度\" class=\"headerlink\" title=\"破译难度\"></a>破译难度</h2><p>毫无疑问维吉尼亚密码破译是极度困难的，而凯撒密码相对容易。此处不介绍方法，详情见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01pdGNoZWxsX0Rvbm92YW4vYXJ0aWNsZS9kZXRhaWxzLzEyMzg5ODIxNT9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NjI3MjUzNzMxNjgwMDE4NjUyOTcwOSUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC5wYyUyNTVGYWxsLiUyNTIyJTI1N0QmcmVxdWVzdF9pZD0xNjYyNzI1MzczMTY4MDAxODY1Mjk3MDkmYml6X2lkPTAmdXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+Zmlyc3RfcmFua19lY3BtX3YxfnJhbmtfdjMxX2VjcG0tMS0xMjM4OTgyMTUtbnVsbC1udWxsLjE0MiU1RXY0NyU1RWNvbnRyb2xfMSwyMDElNUV2MyU1RWNvbnRyb2xfMSZ1dG1fdGVybT0lRTclQkIlQjQlRTUlOTAlODklRTUlQjAlQkMlRTQlQkElOUElRTclQkMlOTYlRTglQUYlOTElRTclQTAlODElRTUlOTklQTgmc3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">维吉尼亚密码破译</span>。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、实现凯撒加密和解密：caesar_enc(m, k)和caesar_dec(c, k)。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * m：明文字符串，要求只能是字母（可以有空格，加密时删除，不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * c：密文字符串，要求只能是字母（不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * k：加密和解密密钥，允许为整数或字母（按0~25对应）</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值：加密返回密文（大写），解密返回明文（小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、实现维吉尼亚加密和解密：vigenere_enc(m, k)和vigenere_dec(c, k)</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * m：明文字符串，要求只能是字母（可以有空格，加密时删除，不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * c：密文字符串，要求只能是字母（不区分大小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * k：加密和解密密钥，只能为字母</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值：加密返回密文（大写），解密返回明文（小写）</span></span><br><span class=\"line\"><span class=\"comment\"> * 注：必须调用凯撒加密和解密。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 凯撒编译码器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CaesarCodeGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">MING</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<span class=\"comment\">//明文集合</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">MI</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文集合</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.MI = <span class=\"built_in\">this</span>.MING.toUpperCase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CaesarCodeGenerator</span><span class=\"params\">(<span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setMI(k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取密文集合</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMI</span><span class=\"params\">(<span class=\"type\">int</span> k)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isDigit(k) ? k - <span class=\"string\">&#x27;0&#x27;</span> : Character.isUpperCase(k) ? k - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">1</span> : k - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; MI.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MI.length() - i &lt;= key) &#123;</span><br><span class=\"line\">                str = MI.charAt(i) + str;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                str += MI.charAt(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.MI = str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m 明文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">caesar_enc</span><span class=\"params\">(String m, <span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">        m = m.toLowerCase();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            c += MI.charAt(MING.indexOf(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 明文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">caesar_dec</span><span class=\"params\">(String c, <span class=\"type\">char</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        c = c.toUpperCase();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: c.toCharArray()) &#123;</span><br><span class=\"line\">            m += MING.charAt(MI.indexOf(x));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维吉尼亚编译码器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VirginiaCodeGenerator</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> m 明文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_enc</span><span class=\"params\">(String m, String k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//密文</span></span><br><span class=\"line\">        m = m.toUpperCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: m.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">            c += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;A&#x27;</span> + key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;A&#x27;</span>);<span class=\"comment\">//求出密文字母</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> c 密文</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> k 密匙</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 明文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">vigenere_dec</span><span class=\"params\">(String c, String k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        c = c.toLowerCase();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> x: c.toCharArray()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x == <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> k.charAt(index++);<span class=\"comment\">//获取密匙字母</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == k.length()) index = <span class=\"number\">0</span>;<span class=\"comment\">//重置密匙</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> Character.isUpperCase(ch) ? ch - <span class=\"string\">&#x27;A&#x27;</span>: ch - <span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//获取偏移量</span></span><br><span class=\"line\">            m += (<span class=\"type\">char</span>)((x - <span class=\"string\">&#x27;a&#x27;</span> - key) % <span class=\"number\">26</span> + <span class=\"string\">&#x27;a&#x27;</span>);<span class=\"comment\">//求出明文字母</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runCaesar</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入明文（字符串：字母和空格组成）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;\\n请输入密匙（数字或者字母）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> in.nextLine().charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CaesarCodeGenerator</span> <span class=\"variable\">caesar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CaesarCodeGenerator</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n明文集合：&quot;</span> + caesar.MING);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文集合：&quot;</span> + caesar.MI);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原文：&quot;</span> + m);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encStr</span> <span class=\"operator\">=</span> caesar.caesar_enc(m, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文：&quot;</span> + encStr);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">decStr</span> <span class=\"operator\">=</span> caesar.caesar_dec(encStr, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;译文：&quot;</span> + decStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runVirginia</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入明文（字符串：字母和空格组成）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;\\n请输入密匙（单词）：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> in.next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">VirginiaCodeGenerator</span> <span class=\"variable\">virginia</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VirginiaCodeGenerator</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原文：&quot;</span> + m);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">encStr</span> <span class=\"operator\">=</span> virginia.vigenere_enc(m, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;密文：&quot;</span> + encStr);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">decStr</span> <span class=\"operator\">=</span> virginia.vigenere_dec(encStr, k);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;译文：&quot;</span> + decStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--\\t古典编译器\\t--\\n&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;选择编译器：&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\t1，凯撒编译码器&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\t2，维吉尼亚编译码器&quot;</span>);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请选择：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">option</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        in.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: runCaesar(); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: runVirginia(); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;输入错误！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这其实是我密码学的一个平时作业。算法不唯一，凯撒编译器或者维吉尼亚编译器都可以互换算法，此处就只完成其中一种。有问题请指正~</p>\n",
            "tags": [
                "密码学",
                "凯斯密码",
                "维吉尼亚密码"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/09/07/BUG/react%E4%B8%AD%E5%BC%95%E5%85%A5react-redux%E4%BD%BF%E7%94%A8store%E3%80%81sub%E5%8C%85%E8%A3%B9%E5%85%A5%E5%8F%A3render%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/",
            "url": "http://victinsever.github.io/2022/09/07/BUG/react%E4%B8%AD%E5%BC%95%E5%85%A5react-redux%E4%BD%BF%E7%94%A8store%E3%80%81sub%E5%8C%85%E8%A3%B9%E5%85%A5%E5%8F%A3render%E5%87%BA%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/",
            "title": "react中引入react-redux使用subscribe监听入口render出现页面空白问题",
            "date_published": "2022-09-07T15:23:24.000Z",
            "content_html": "<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在使用react-redux或者redux时，需要让redux的状态修改改变时通知页面及时更新并渲染页面。于是采用了在index.js文件中使用<strong>store.subscribe</strong>包裹页面的render，该监听函数可以让<strong>render</strong>重复渲染。不用担心效率问题，因为有react的虚拟DOM的<strong>diff算法</strong>兜底，不会导致页面全部重新渲染。<br>代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom/client&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./redux/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"title function_\">subscribe</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">createRoot</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\">  root.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"出现的错误\"><a href=\"#出现的错误\" class=\"headerlink\" title=\"出现的错误\"></a>出现的错误</h2><p>页面出现空白并且没有任何错误提示</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>暂未解决</p>\n",
            "tags": [
                "react",
                "react-redux",
                "redux"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/09/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/react/react%E4%B8%8Evue%E7%9A%84%E8%B7%AF%E7%94%B1%E8%BE%A8%E6%9E%90/",
            "url": "http://victinsever.github.io/2022/09/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/react/react%E4%B8%8Evue%E7%9A%84%E8%B7%AF%E7%94%B1%E8%BE%A8%E6%9E%90/",
            "title": "react与vue的路由辨析",
            "date_published": "2022-09-06T14:25:24.000Z",
            "content_html": "<p>react-router-dom是react中的内置插件</p>\n",
            "tags": [
                "react",
                "vue",
                "react-router-dom",
                "vue-router"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/09/06/%E6%9D%82%E8%B0%88/hello-world/",
            "url": "http://victinsever.github.io/2022/09/06/%E6%9D%82%E8%B0%88/hello-world/",
            "title": "第一篇个人博客",
            "date_published": "2022-09-06T08:58:55.921Z",
            "content_html": "<p>该博客使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>和Node技术进行搭建，主题在hexo上面找个一个二次元风主题，大部分内容可以自定义，后续将陆续上传博客中！博客依赖<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vdmljdGluL3ZpY3Rpbg==\">码云</span>搭建，更多内容可以进一步关注本人博客内容！</p>\n<h2 id=\"博客发布命令\"><a href=\"#博客发布命令\" class=\"headerlink\" title=\"博客发布命令\"></a>博客发布命令</h2><h3 id=\"创建博客\"><a href=\"#创建博客\" class=\"headerlink\" title=\"创建博客\"></a>创建博客</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;第一篇个人博客&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"本地运行服务\"><a href=\"#本地运行服务\" class=\"headerlink\" title=\"本地运行服务\"></a>本地运行服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"创建静态文件\"><a href=\"#创建静态文件\" class=\"headerlink\" title=\"创建静态文件\"></a>创建静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"远程发布\"><a href=\"#远程发布\" class=\"headerlink\" title=\"远程发布\"></a>远程发布</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>更多信息: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}