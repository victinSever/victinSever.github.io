{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"javascript\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/03-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/",
            "url": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/03-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/",
            "title": "执行上下文",
            "date_published": "2022-10-17T12:18:01.000Z",
            "content_html": "",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/02-JS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "url": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/02-JS%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "title": "JS代码执行过程",
            "date_published": "2022-10-17T12:18:01.000Z",
            "content_html": "<h3 id=\"区\"><a href=\"#区\" class=\"headerlink\" title=\"区\"></a>区</h3><ul>\n<li>内存分为两个区：堆区和栈区</li>\n<li>栈区：存储基本数据类型</li>\n<li>栈区：存储引用数据类型</li>\n</ul>\n<h3 id=\"JavaScript代码类型\"><a href=\"#JavaScript代码类型\" class=\"headerlink\" title=\"JavaScript代码类型\"></a>JavaScript代码类型</h3><ul>\n<li>全局代码：script标签都是全局代码</li>\n<li>函数代码：每一个函数都是一个代码块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//局部代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript代码执行\"><a href=\"#JavaScript代码执行\" class=\"headerlink\" title=\"JavaScript代码执行\"></a>JavaScript代码执行</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li><p>JS执行时，堆内存创建一个全局对象（GO）</p>\n</li>\n<li><p>全局代码执行时，产生全局执行上下文（ECG）</p>\n</li>\n<li><p>调用一个函数，产生一个局部执行上下文（EC）</p>\n</li>\n<li><p>执行上下文产生放在栈中，栈叫做执行上下文栈（ECS）</p>\n</li>\n</ul>\n<p>EC：给代码提供数据</p>\n<p>GO：也是就window对象</p>\n<h4 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h4><p>执行代码开始，会将GO挂载</p>\n<p>①执行全局代码，产上ECG，入ECS</p>\n<p>②执行局部代码，产生EC，入ECS</p>\n<p>③出栈，一次出EC * N ,ECG</p>\n<p><img data-src=\"E:\\Code\\基础学习\\JavaScript\\js高级\\js\\1.png\"></p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/01-%E9%A2%84%E7%BC%96%E8%AF%91/",
            "url": "http://example.com/2022/10/17/js%E9%AB%98%E7%BA%A7/01-%E9%A2%84%E7%BC%96%E8%AF%91/",
            "title": "JavaScript预编辑",
            "date_published": "2022-10-17T10:40:29.000Z",
            "content_html": "<p>JavaScript运行分为预编译和代码执行运行</p>\n<h3 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h3><p>预编译也叫预解析</p>\n<p>做了什么？</p>\n<pre><code>- 声明要提升 会先进行var和function的定义提升（只提升声明，而没有赋值，放在代码块最前面）\n- 函数内部局部变量，要提升到函数内部最前面\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">        <span class=\"comment\">// 预编译会先进行var和function的定义提升</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">//undefind</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">//2</span></span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c); <span class=\"comment\">//und</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"number\">4</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行执行\"><a href=\"#运行执行\" class=\"headerlink\" title=\"运行执行\"></a>运行执行</h3><p>执行运行就是运行预编译后的js代码，现将所有的声明和函数执行后，运行代码块。</p>\n",
            "tags": [
                "JavaScript"
            ]
        }
    ]
}