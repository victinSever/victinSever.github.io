<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>victinSever • Posts by &#34;websocket&#34; tag</title>
        <link>http://victinSever.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 24 Oct 2022 14:38:06 +0800</pubDate>
        <lastBuildDate>Mon, 24 Oct 2022 14:38:06 +0800</lastBuildDate>
        <category>react</category>
        <category>react-redux</category>
        <category>redux</category>
        <category>canvas</category>
        <category>JavaScript</category>
        <category>this</category>
        <category>原型</category>
        <category>原型链</category>
        <category>继承</category>
        <category>cache</category>
        <category>JSON</category>
        <category>面试题</category>
        <category>vue</category>
        <category>react-router-dom</category>
        <category>vue-router</category>
        <category>Svelet</category>
        <category>Solid.js</category>
        <category>WebSocket</category>
        <category>hexo</category>
        <category>Typora</category>
        <category>Dijkstra</category>
        <category>密码学</category>
        <category>凯斯密码</category>
        <category>维吉尼亚密码</category>
        <item>
            <guid isPermalink="true">http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/</guid>
            <title>即时通讯协议选型：WebSocket协议</title>
            <link>http://victinsever.github.io/2022/10/24/%E6%89%A9%E5%B1%95%E6%8A%80%E6%9C%AF/WebSocket/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E9%80%89%E5%9E%8B%EF%BC%9AWebSocket/</link>
            <category>WebSocket</category>
            <pubDate>Mon, 24 Oct 2022 14:38:06 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;websocket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket&#34;&gt;#&lt;/a&gt; WebSocket&lt;/h4&gt;
&lt;p&gt;**Socket：** 对处于网络中不同主机上的应用进程之间进行双向通信的端点的抽象，是应用程序通过网络协议进行通信的接口，一个 Socket 对应着通信的一端，由 IP 地址和端口组合而成。&lt;/p&gt;
&lt;h4 id=&#34;websocket服务端与客户端之间的通信过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket服务端与客户端之间的通信过程&#34;&gt;#&lt;/a&gt; WebSocket 服务端与客户端之间的通信过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;服务端创建包含有效主机与端口的 WebSocket 实例，随后启动并等待客户端连接&lt;/li&gt;
&lt;li&gt;客户端创建 WebSocket 实例，并为该实例提供一个 URL，该 URL 代表希望连接的服务器端&lt;/li&gt;
&lt;li&gt;客户端通过 HTTP 请求握手建立连接之后，后面就使用刚才发起 HTTP 请求的 TCP 连接进行双向通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;websocket特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket特点&#34;&gt;#&lt;/a&gt; WebSocket 特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;WebSocket 本身只是一个应用层协议&lt;/li&gt;
&lt;li&gt;一种全双工通信机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;传统的全双工协议的两种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#传统的全双工协议的两种方式&#34;&gt;#&lt;/a&gt; 传统的全双工协议的两种方式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短轮询&lt;/strong&gt; 即客户端定时向服务端发送请求，服务端收到请求后马上返回响应并关闭连接。
&lt;ul&gt;
&lt;li&gt;优点：实现简单&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;1. 并发请求对服务端造成较大压力&lt;/li&gt;
&lt;li&gt;2. 数据可能没有更新，造成无效请求&lt;/li&gt;
&lt;li&gt;3. 频繁的网络请求导致客户端设备电量、流量快速消耗&lt;/li&gt;
&lt;li&gt;4. 定时操作存在时间差，可能造成数据同步不及时&lt;/li&gt;
&lt;li&gt;5. 每次请求都需要携带完整的请求头&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长轮询&lt;/strong&gt; 即服务端在收到请求之后，如果数据无更新，会阻塞请求，直至数据更新或连接超时才返回。
&lt;ul&gt;
&lt;li&gt;优点：相较于短轮询减少了 HTTP 请求的次数，节省了部分资源。&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;1. 连接挂起同样会消耗资源&lt;/li&gt;
&lt;li&gt;2. 冗余请求头问题依旧存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;websocket比传统全双工协议的优势&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket比传统全双工协议的优势&#34;&gt;#&lt;/a&gt; WebSocket 比传统全双工协议的优势&lt;/h4&gt;
&lt;p&gt;当连接建立之后，后续的数据都是以&lt;strong&gt;帧的形式&lt;/strong&gt;发送。&lt;strong&gt;除非某一端主动断开连接，否则无需重新建立连接&lt;/strong&gt;。因此可以做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1. 减轻服务器的负担&lt;/li&gt;
&lt;li&gt;2. 极大地减少不必要的流量、电量消耗&lt;/li&gt;
&lt;li&gt;3. 提高实时性，保证客户端和服务端数据的同步&lt;/li&gt;
&lt;li&gt;4. 减少冗余请求头造成的开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;websocket比其他即时通讯协议的优势&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket比其他即时通讯协议的优势&#34;&gt;#&lt;/a&gt; WebSocket 比其他即时通讯协议的优势&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.** 较少的控制开销。** 在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.** 更好的二进制支持。**Websocket 定义了二进制帧，相对 HTTP，可以更轻松地处理二进制内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.** 可以支持扩展。**Websocket 定义了扩展，用户可以扩展协议、实现部分自定义的子协议，如 XMPP 协议、MQTT 协议等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;websocket协议在android客户端的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#websocket协议在android客户端的实现&#34;&gt;#&lt;/a&gt; WebSocket 协议在 Android 客户端的实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建 WebSocket 实例并提供一个 URL 以指定要连接的服务器地址&lt;/li&gt;
&lt;li&gt;提供一个 WebSocket 连接事件监听器，用于监听事件回调以处理连接生命周期的每个阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[即时通讯协议选型：WebSocket 协议](&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudG91dGlhby5jb20vYXJ0aWNsZS83MTU2MjA5OTM4NTM1MDM5NTI5Lz9vbmx5X3JlYz0xJmFtcDtzaGFyZV90b2tlbj05MzUwMjc1MS0zNGZhLTQ2ZWYtYjg1MS1lMjc1MmVjNGI4NDkmYW1wO3NvdXJjZT1tX3JlZGlyZWN0JmFtcDt3aWQ9MTY2NjU5Mjc2NzEyNg==&#34;&gt;即时通讯协议选型：WebSocket 协议 - 今日头条 (toutiao.com)&lt;/span&gt;)&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
