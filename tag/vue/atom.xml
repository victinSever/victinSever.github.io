<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://victinSever.github.io</id>
    <title>眸光似星辰 • Posts by &#34;vue&#34; tag</title>
    <link href="http://victinSever.github.io" />
    <updated>2022-11-07T04:15:01.000Z</updated>
    <category term="react" />
    <category term="react-redux" />
    <category term="redux" />
    <category term="Svelet" />
    <category term="Solid.js" />
    <category term="Nginx" />
    <category term="WebSocket" />
    <category term="hexo" />
    <category term="Typora" />
    <category term="密码学" />
    <category term="凯斯密码" />
    <category term="维吉尼亚密码" />
    <category term="Dijkstra" />
    <category term="JDBC" />
    <category term="canvas" />
    <category term="MVC" />
    <category term="JavaScript" />
    <category term="this" />
    <category term="原型" />
    <category term="原型链" />
    <category term="继承" />
    <category term="JSON" />
    <category term="cache" />
    <category term="面试题" />
    <category term="vue" />
    <category term="react-router-dom" />
    <category term="vue-router" />
    <category term="Vue" />
    <category term="Vuex" />
    <category term="Vue-router" />
    <category term="ElementUI" />
    <category term="axios" />
    <category term="sass" />
    <category term="NProgress" />
    <category term="dp" />
    <entry>
        <id>http://victinsever.github.io/2022/11/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/vue%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/</id>
        <title>Vue源码解析笔记</title>
        <link rel="alternate" href="http://victinsever.github.io/2022/11/07/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/vue%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h1 id=&#34;Vue重点模块源码解析&#34;&gt;&lt;a href=&#34;#Vue重点模块源码解析&#34; class=&#34;headerlink&#34; title=&#34;Vue重点模块源码解析&#34;&gt;&lt;/a&gt;Vue重点模块源码解析&lt;/h1&gt;&lt;h2 id=&#34;new-Vue&#34;&gt;&lt;a href=&#34;#new-Vue&#34; class=&#34;headerlink&#34; title=&#34;new Vue&#34;&gt;&lt;/a&gt;new Vue&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;_init：&lt;/p&gt;
&lt;p&gt;初始化时，调用了_init方法，生成一个uid并混入一些全局的api，此时将加入beforeCreate勾子，然后渲染初始化数据后，加入created勾子，然后开始进行挂载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$mount&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;具体实现思路是：根据传入的el查看节点，根据是否有render，没有的话是否有template模板，都没有就用outerHTML作为渲染模板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在挂载阶段主要是得到render函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mountCompontent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂载真实dom，创建了渲染使用的Watcher，初次渲染时内部调用了updateCompontent方法更新组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;_render&lt;/p&gt;
&lt;p&gt;render函数被调用得到Vnode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update&lt;/p&gt;
&lt;p&gt;在update中获取Vnode，进行页面视图更新，这个Vnode是指的旧的Vnode，没有则通过el更新，有则通过旧节点更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;patch&lt;/p&gt;
&lt;p&gt;用Vnode首次渲染真实dom，通过递归等方法判断内部节点的渲染方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;双向数据绑定&#34;&gt;&lt;a href=&#34;#双向数据绑定&#34; class=&#34;headerlink&#34; title=&#34;双向数据绑定&#34;&gt;&lt;/a&gt;双向数据绑定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;核心方法：Object.defineProperty(obj, prop, descriptor)&lt;/li&gt;
&lt;li&gt;核心类：Watcher，Dep&lt;/li&gt;
&lt;li&gt;原理：&lt;strong&gt;初始化data调用observe方法给data中的数据重写get和set方法，渲染真实dom时，渲染watcher会去访问页面上使用了的属性变量，给属性的Dep加上渲染函数，每次修改就会通知watcher修改视图&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;初始化data，递归给data属性重写get，set，同时增加一个Dep类，渲染阶段的Dep会收集watcher，每次修改通知watcher调用dep.notify()更新。&lt;/li&gt;
&lt;li&gt;个人idea：其实这就是MVC设计中的视图和模型之间的数据流通和绑定思路。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组响应式&#34;&gt;&lt;a href=&#34;#数组响应式&#34; class=&#34;headerlink&#34; title=&#34;数组响应式&#34;&gt;&lt;/a&gt;数组响应式&lt;/h2&gt;&lt;p&gt;获取数组原型拿到数组原有方法进行重写，重写主要针对7个要对数组有直接变更的方法，数组是响应式的就会拿到数组上的__ob__属性，调用该属性上的notify()方法。&lt;/p&gt;
&lt;h2 id=&#34;Watch监听实现&#34;&gt;&lt;a href=&#34;#Watch监听实现&#34; class=&#34;headerlink&#34; title=&#34;Watch监听实现&#34;&gt;&lt;/a&gt;Watch监听实现&lt;/h2&gt;&lt;p&gt;核心：利用watcher和dep两个类实现，区别于数据绑定的是watcher保留用户传入的watch回调函数&lt;/p&gt;
&lt;h2 id=&#34;computed实现&#34;&gt;&lt;a href=&#34;#computed实现&#34; class=&#34;headerlink&#34; title=&#34;computed实现&#34;&gt;&lt;/a&gt;computed实现&lt;/h2&gt;&lt;p&gt;重点：计算属性方法内部变量的Dep上有两个watcher，分别是计算属性watcher和渲染watcher，计算属性watcher只控制是否重新计算，跟随渲染watcher重新计算&lt;/p&gt;
&lt;h2 id=&#34;nextTick原理&#34;&gt;&lt;a href=&#34;#nextTick原理&#34; class=&#34;headerlink&#34; title=&#34;nextTick原理&#34;&gt;&lt;/a&gt;nextTick原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;采用异步队列方式控制DOM的更新（异步函数执行是在同步函数之后）&lt;/li&gt;
&lt;li&gt;采用vue异步方式降级策略，为了适应兼容性：promise,MutationObserver,setTmmediate,setTimeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Vue-extend&#34;&gt;&lt;a href=&#34;#Vue-extend&#34; class=&#34;headerlink&#34; title=&#34;Vue.extend&#34;&gt;&lt;/a&gt;Vue.extend&lt;/h2&gt;&lt;p&gt;基于Vue的构造函数，创建一个子类，子类继承父类的所有属性和方法，最后返回这个子类。&lt;/p&gt;
&lt;p&gt;每一个子组件都是一个Sub构造函数。&lt;/p&gt;
&lt;p&gt;子组件的创建流程和new Vue初始化的流程区别不大。&lt;/p&gt;
&lt;p&gt;子组件创建的时候没有el生成，在vue自身进行渲染时，调用本身的child.$mount(undefined)，这个没有传入el，因此不会挂载到页面上去，是直接放在vnode.compontentInstance.el上，通过父组件渲染页面时，压入页面上。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTk4OTY0NDM=&#34;&gt;vue源码阅读解析（超详细） - 知乎 (zhihu.com)&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Vue" />
        <updated>2022-11-07T04:15:01.000Z</updated>
    </entry>
    <entry>
        <id>http://victinsever.github.io/2022/11/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/Vue2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%90%88%E9%80%9A%E7%94%A8%E4%BE%9D%E8%B5%96%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
        <title>Vue2项目结合通用依赖进行项目搭建</title>
        <link rel="alternate" href="http://victinsever.github.io/2022/11/02/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue/Vue2%E9%A1%B9%E7%9B%AE%E7%BB%93%E5%90%88%E9%80%9A%E7%94%A8%E4%BE%9D%E8%B5%96%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
        <content type="html">&lt;h1 id=&#34;Vue2项目结合通用依赖进行项目搭建&#34;&gt;&lt;a href=&#34;#Vue2项目结合通用依赖进行项目搭建&#34; class=&#34;headerlink&#34; title=&#34;Vue2项目结合通用依赖进行项目搭建&#34;&gt;&lt;/a&gt;Vue2项目结合通用依赖进行项目搭建&lt;/h1&gt;&lt;h2 id=&#34;技术栈&#34;&gt;&lt;a href=&#34;#技术栈&#34; class=&#34;headerlink&#34; title=&#34;技术栈&#34;&gt;&lt;/a&gt;技术栈&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vue-cli&lt;/strong&gt;（框架）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue项目框架，基于 Vue.js 进行快速开发的完整系统&lt;/li&gt;
&lt;li&gt;本次项目为Vue2项目框架&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vuex&lt;/strong&gt;（数据管理）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式 + 库&lt;/strong&gt;。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化&lt;/li&gt;
&lt;li&gt;本项目中作为全局共享数据库，采用三版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vue-router&lt;/strong&gt;（路由管理）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue.js官方的路由插件，它和vue.js是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlQjclQjElRTUlQkElQTYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=&#34;&gt;深度&lt;/span&gt;集成的，适合用于构建单页面应用&lt;/li&gt;
&lt;li&gt;本项目中作为路由链接管理插件，采用三版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ElementUI&lt;/strong&gt;（组件库）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Vue 2.0 的桌面端组件库&lt;/li&gt;
&lt;li&gt;本项目作为主要的全局组件库，进行样式美化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;axios&lt;/strong&gt;（ajax请求封装库）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个基于 promise 的网络请求库，可以用于浏览器和 node.js&lt;/li&gt;
&lt;li&gt;本项目作为数据请求发送的封装库，对前后端数据进行连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sass&lt;/strong&gt;（CSS扩展语言插件）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行CSS的语言扩展，提高CSS样式的可读性，便于CSS样式设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NProgress&lt;/strong&gt;（小进度条插件）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述技术有很多等价的技术可以代替，但是基本的技术如框架，路由管理必不可少，此处只是本人最常用的Vue2技术套装，本文章做一个一般流程记录，推荐的代替技术在最后（仅供参考）。&lt;/p&gt;
&lt;h2 id=&#34;搭建项目&#34;&gt;&lt;a href=&#34;#搭建项目&#34; class=&#34;headerlink&#34; title=&#34;搭建项目&#34;&gt;&lt;/a&gt;搭建项目&lt;/h2&gt;&lt;p&gt;下面是项目搭建和依赖下载和搭配流程，特别强调部分的技术版本依赖必须一一对应。&lt;/p&gt;
&lt;p&gt;- &lt;/p&gt;
</content>
        <category term="Vue" />
        <category term="Vuex" />
        <category term="Vue-router" />
        <category term="ElementUI" />
        <category term="axios" />
        <category term="sass" />
        <category term="NProgress" />
        <updated>2022-11-02T04:57:01.000Z</updated>
    </entry>
    <entry>
        <id>http://victinsever.github.io/2022/09/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/react/react%E4%B8%8Evue%E7%9A%84%E8%B7%AF%E7%94%B1%E8%BE%A8%E6%9E%90/</id>
        <title>react与vue的路由辨析</title>
        <link rel="alternate" href="http://victinsever.github.io/2022/09/06/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/react/react%E4%B8%8Evue%E7%9A%84%E8%B7%AF%E7%94%B1%E8%BE%A8%E6%9E%90/"/>
        <content type="html">&lt;p&gt;react-router-dom是react中的内置插件&lt;/p&gt;
</content>
        <category term="react" />
        <category term="vue" />
        <category term="react-router-dom" />
        <category term="vue-router" />
        <updated>2022-09-06T14:25:24.000Z</updated>
    </entry>
</feed>
