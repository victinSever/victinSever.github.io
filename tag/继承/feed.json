{
    "version": "https://jsonfeed.org/version/1",
    "title": "victinSever • All posts by \"继承\" tag",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/js%E9%AB%98%E7%BA%A7/06-%E7%BB%A7%E6%89%BF/",
            "url": "http://victinsever.github.io/2022/10/21/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/js%E9%AB%98%E7%BA%A7/06-%E7%BB%A7%E6%89%BF/",
            "title": "JS继承",
            "date_published": "2022-10-21T02:21:05.000Z",
            "content_html": "<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>让多个类之前，建立关系，便于代码的管理和复用。</p>\n<h3 id=\"不使用继承\"><a href=\"#不使用继承\" class=\"headerlink\" title=\"不使用继承\"></a>不使用继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;开始说话...&quot;</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>同种属性或者类似的方法不能复用，代码累赘。</p>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();  <span class=\"comment\">// 原型继承可以继承父类上的公有方法</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>;  <span class=\"comment\">// 手动修改constructor的指向</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>通过显式原型对象建立对象关系，即子对象的原型指向父类。</p>\n</li>\n<li><p>原型链继承：<strong>改变子类的原型对象</strong></p>\n<ul>\n<li><p>核心：Student.prototype &#x3D; new Person();   修改子类的原型对象</p>\n</li>\n<li><p>缺点：如果父中的数据是引用数据类型，子对象修改了，另一个子对象也会受影响</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Person执行了...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Student</span>(<span class=\"params\">name,age,className</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,name,age);  <span class=\"comment\">// 1遍,调用父类传参</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// new Person(); // 也让Person函数执行一遍</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(); <span class=\"comment\">// 原型链继承核心</span></span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Student</span>; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>核心：</p>\n<ul>\n<li><p>Student.prototype &#x3D; new Person(); &#x2F;&#x2F; 继承父类的公有属性</p>\n</li>\n<li><p>Person.call(this,name,age);  &#x2F;&#x2F; 继承父类的私有属性</p>\n</li>\n</ul>\n</li>\n<li><p>缺点：Person.call(this,name,age);  让父类构造函数多执行一遍</p>\n<h3 id=\"Object-createAPI\"><a href=\"#Object-createAPI\" class=\"headerlink\" title=\"Object.createAPI\"></a>Object.createAPI</h3></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个对象，又有一个新方案：Object.create</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用来创建一个非常干净的，没有原型对象的对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> res2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Object.create可以给创建出来的新对象指定原型对象。</p>\n<h3 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br></pre></td></tr></table></figure>\n\n<p>使用Object.createAPI和组合继承一起调用。</p>\n<h3 id=\"ES6中的Class继承\"><a href=\"#ES6中的Class继承\" class=\"headerlink\" title=\"ES6中的Class继承\"></a>ES6中的Class继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;会说话...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让Student类继承Person类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, className</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age); <span class=\"comment\">// 调用父类的 constructor</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">className</span> = className;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "JavaScript",
                "继承"
            ]
        }
    ]
}