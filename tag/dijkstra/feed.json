{
    "version": "https://jsonfeed.org/version/1",
    "title": "victinSever • All posts by \"dijkstra\" tag",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/10/17/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "url": "http://victinsever.github.io/2022/10/17/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/Dijkstra%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/",
            "title": "Dijkstra单源最短路径算法",
            "date_published": "2022-10-17T13:51:03.000Z",
            "content_html": "<h2 id=\"单源最短路径问题\"><a href=\"#单源最短路径问题\" class=\"headerlink\" title=\"单源最短路径问题\"></a>单源最短路径问题</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>给定一个带权有向图G&#x3D;（V,E），其中每条边的权是一个实数。另外，还给定V中的一个顶点，称为源。要计算从源到其他所有各顶点的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOUMlODAlRTclOUYlQUQlRTglQjclQUYlRTUlQkUlODQmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">最短路径</span>长度。这里的长度就是指路上各边权之和。这个问题通常称为单源最短路径问题。</p>\n<h3 id=\"Dijkstra算法简介\"><a href=\"#Dijkstra算法简介\" class=\"headerlink\" title=\"Dijkstra算法简介\"></a>Dijkstra算法简介</h3><p>迪杰斯特拉算法(Dijkstra)，是从一个顶点到其余各顶点的最短路径算法，解决的是有权图中最短路径问题。迪杰斯特拉算法主要特点是从起始点开始，采用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglQjQlQUElRTUlQkYlODMlRTclQUUlOTclRTYlQjMlOTUmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">贪心算法</span>的策略，每次遍历到始点距离最近且未访问过的顶点的邻接节点，直到扩展到终点为止。</p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><p>伪代码描述</p>\n<p><img data-src=\"/./../../image/6-1666018070046-21.png\" alt=\"6\"></p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><ul>\n<li>数据结构：邻接表，数组队列，HashMap（此处没有采用，而是直接遍历查询）</li>\n<li>数据描述：<ul>\n<li>邻接表点类<ul>\n<li>包含：名称，被指向的权重，链接指针</li>\n<li>作用：邻接表的每个初始点</li>\n</ul>\n</li>\n<li>顶点表结构<ul>\n<li>包含：名称，该点的前一个顶点，距离起点距离</li>\n<li>作用：用于生成树的每个节点</li>\n</ul>\n</li>\n<li>邻接表<ul>\n<li>对于初始边集和顶点集数据的集合</li>\n<li>初始化时需要将边集的两个顶点都加入指针域</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"源代码（TS版）\"><a href=\"#源代码（TS版）\" class=\"headerlink\" title=\"源代码（TS版）\"></a>源代码（TS版）</h3><p>本算法源码解决的问题是无向图的单源最短路径问题。有向图的类似，只是在生成邻接表时，只生成一个方向。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//邻接表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T;<span class=\"comment\">//顶点名称</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//指向该顶点的边的权重</span></span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//下一个邻接顶点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//顶点表的点</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Vertex</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: T,<span class=\"comment\">//顶点名称索引</span></span><br><span class=\"line\">    <span class=\"attr\">prePoint</span>: <span class=\"title class_\">Point</span>&lt;T&gt; | <span class=\"literal\">null</span>;<span class=\"comment\">//前一个点</span></span><br><span class=\"line\">    <span class=\"attr\">distance</span>: <span class=\"built_in\">number</span>;<span class=\"comment\">//距离起点的距离</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邻接表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Table</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">table</span>: <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"attr\">len</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> = vertexSet.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">table</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>(vertexSet, edgeSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">init</span>(<span class=\"params\">vertexSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;, edgeSet: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据顶点集新建邻接表第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">name</span>: vertexSet[i], <span class=\"attr\">weight</span>: <span class=\"number\">0</span>, <span class=\"attr\">next</span>: <span class=\"literal\">null</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据边集进行关系链接</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; edgeSet.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据边集的顺序阿加入</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">1</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">            <span class=\"comment\">//在加入相反方向的边</span></span><br><span class=\"line\">            temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[edgeSet[i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>]</span><br><span class=\"line\">            obj = &#123;<span class=\"attr\">name</span>: edgeSet[i][<span class=\"number\">0</span>], <span class=\"attr\">weight</span>: edgeSet[i][<span class=\"number\">2</span>], <span class=\"attr\">next</span>: <span class=\"literal\">null</span>&#125;                     </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) temp = temp.<span class=\"property\">next</span>;<span class=\"comment\">//找到下个点</span></span><br><span class=\"line\">            temp.<span class=\"property\">next</span> = obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getTable</span>(): <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;[] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">toString</span>(): <span class=\"title class_\">String</span> &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"title class_\">String</span> = <span class=\"string\">&#x27;&#x27;</span>;   </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> k = <span class=\"number\">1</span>;<span class=\"comment\">//右边括号个数</span></span><br><span class=\"line\">            str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[i].<span class=\"property\">next</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27;&#123; name: &#x27;</span> + temp.<span class=\"property\">name</span> + <span class=\"string\">&#x27;, weight: &#x27;</span> + temp.<span class=\"property\">weight</span> + <span class=\"string\">&#x27;, next: &#x27;</span>;</span><br><span class=\"line\">                temp = temp.<span class=\"property\">next</span>;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;null&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k--)&#123;</span><br><span class=\"line\">                str += <span class=\"string\">&#x27; &#125;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单元最短路径问题（输入顶点s的下标索引）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getMinDistance</span>(<span class=\"params\">s: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 顶点优先队列初始化为空</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将每个顶点入栈，初始化优先级</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i&lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">len</span>; i++) &#123;</span><br><span class=\"line\">            queue.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">name</span>: i, <span class=\"attr\">prePoint</span>: <span class=\"literal\">null</span>, <span class=\"attr\">distance</span>: <span class=\"title class_\">Infinity</span>&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//将起点的优先级更新</span></span><br><span class=\"line\">        queue[s].<span class=\"property\">distance</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：删除优先级最小的元素：即删除distance最小的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">deleteMin</span> = (<span class=\"params\">queue: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Array is null !&#x27;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// let min = queue.reduce((pre, next) =&gt; &#123; return pre.distance &lt; next.distance ? pre : next&#125;)</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> min = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(queue[min].<span class=\"property\">distance</span> &gt; queue[i].<span class=\"property\">distance</span>) min = i;</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">            <span class=\"keyword\">return</span> queue.<span class=\"title function_\">splice</span>(min, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：树上节点和删除的节点取并集</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">unionTree</span> = (<span class=\"params\">tree: <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, u: Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; tree.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tree[i].<span class=\"property\">name</span> === u.<span class=\"property\">name</span>) <span class=\"keyword\">return</span>;<span class=\"comment\">//如果是相同点就不合并</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tree.<span class=\"title function_\">push</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定义一个方法：findIndex</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">findIndex</span> = (<span class=\"params\">arr: <span class=\"built_in\">Array</span>&lt;Point&lt;<span class=\"built_in\">number</span>&gt;&gt; | <span class=\"built_in\">Array</span>&lt;Vertex&lt;<span class=\"built_in\">number</span>&gt;&gt;, target: Point&lt;<span class=\"built_in\">number</span>&gt; | Vertex&lt;<span class=\"built_in\">number</span>&gt;</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[i].<span class=\"property\">name</span> === target.<span class=\"property\">name</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"comment\">//初始树</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">tree</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Vertex</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        tree.<span class=\"title function_\">push</span>(queue[s]);<span class=\"comment\">//初始树包含一个给定的起点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">len</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> u = <span class=\"title function_\">deleteMin</span>(queue);<span class=\"comment\">//删除优先级最小的元素</span></span><br><span class=\"line\">            <span class=\"title function_\">unionTree</span>(tree, u);<span class=\"comment\">//取并集</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//ps:此处应该用HashMap进行索引和name隐射</span></span><br><span class=\"line\">            <span class=\"comment\">//不在tree中，也每个和u相邻的顶点</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = <span class=\"title function_\">findIndex</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">table</span>, u);<span class=\"comment\">//地址映射：从余下顶点到邻接表</span></span><br><span class=\"line\">            <span class=\"comment\">// let index = u.name - 1;</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = <span class=\"variable language_\">this</span>.<span class=\"property\">table</span>[index];<span class=\"comment\">//邻接表中的u点</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(temp.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> t = temp.<span class=\"property\">next</span></span><br><span class=\"line\">                index = <span class=\"title function_\">findIndex</span>(queue, t);<span class=\"comment\">//地址映射：从邻接表到余下顶点</span></span><br><span class=\"line\">                <span class=\"comment\">// index = t.name - 1;</span></span><br><span class=\"line\">                <span class=\"comment\">// console.log(index, queue[index]);</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index !== -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//不在树上</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(u.<span class=\"property\">distance</span> + temp.<span class=\"property\">weight</span> &lt; queue[index].<span class=\"property\">distance</span>)&#123;</span><br><span class=\"line\">                        queue[index].<span class=\"property\">distance</span> = u.<span class=\"property\">distance</span> + t.<span class=\"property\">weight</span>;<span class=\"comment\">//刷新最短距离</span></span><br><span class=\"line\">                        queue[index].<span class=\"property\">prePoint</span> = t;<span class=\"comment\">//刷新前驱节点</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;              </span><br><span class=\"line\">                </span><br><span class=\"line\">                temp = t;<span class=\"comment\">//遍历所有的相邻点</span></span><br><span class=\"line\">            &#125;                 </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//并上最后一个</span></span><br><span class=\"line\">        <span class=\"title function_\">unionTree</span>(tree, queue[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">vertexSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];<span class=\"comment\">//顶点集</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">edgeSet</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&gt; = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>]]; <span class=\"comment\">// 顶点 顶点 权值  //边集</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> table = <span class=\"keyword\">new</span> <span class=\"title class_\">Table</span>(vertexSet, edgeSet);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(table.<span class=\"title function_\">getMinDistance</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "Dijkstra"
            ]
        }
    ]
}