{
    "version": "https://jsonfeed.org/version/1",
    "title": "眸光似星辰 • All posts by \"跨域\" tag",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2023/02/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88jsonp%E5%92%8Ccors/",
            "url": "http://victinsever.github.io/2023/02/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88jsonp%E5%92%8Ccors/",
            "title": "跨域解决方案jsonp和cors",
            "date_published": "2023-02-16T03:15:24.000Z",
            "content_html": "<p>直接前端代码如下：</p>\n<h2 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h2><p>原理：利用的原理是script标签可以跨域请求资源，将回调函数作为参数拼接在url中。后端收到请求，调用该回调函数，并将数据作为参数返回去，注意设置响应头返回文档类型，应该设置成javascript。</p>\n<p>html中首先声明回调处理函数，然后动态创建script标签发送请求信息</p>\n<figure class=\"highlight html\"><figcaption><span>jsonp方案.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>发送xml请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"property\">jsonpCallback</span> = <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#data&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(res)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            script.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://localhost:8080/api/jsonp?id=1&amp;cb=jsonpCallback&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;script src=&quot;http://localhost:8080/api/jsonp?id=1&amp;cb=jsonpCallback&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>服务端需要安装koa或者express框架创建app，根据获得的回调格式使用相同的回调函数返回数据</p>\n<figure class=\"highlight js\"><figcaption><span>jsonp-server.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ctx.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/api/jsonp&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; id, cb &#125; = ctx.<span class=\"property\">query</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> info = data.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">id</span> == id)</span><br><span class=\"line\">        ctx.<span class=\"property\">body</span> = <span class=\"string\">`<span class=\"subst\">$&#123;cb&#125;</span>(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(info)&#125;</span>)`</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>, <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;listen 8080 ...&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"cors\"><a href=\"#cors\" class=\"headerlink\" title=\"cors\"></a>cors</h2><p>原理：目前最常用的一种解决办法，通过设置后端允许跨域实现。</p>\n<p>使用XMLHttpRequest创建ajax请求，这里使用axios或者其他的ajax封装库都一样</p>\n<figure class=\"highlight html\"><figcaption><span>cors方案.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>发送xml请求<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;data&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">const</span> <span class=\"variable constant_\">XML</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable constant_\">XML</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;http://localhost:8080/api/xml&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable constant_\">XML</span>.<span class=\"title function_\">send</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable constant_\">XML</span>.<span class=\"property\">onreadystatechange</span> = <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span>(<span class=\"variable constant_\">XML</span>.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; <span class=\"variable constant_\">XML</span>.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#data&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"variable constant_\">XML</span>.<span class=\"property\">response</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable constant_\">XML</span>.<span class=\"property\">onerror</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;err：&#x27;</span> + e);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置响应体的头部的两个属性如下即可：<code>&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;</code>，<code>&#39;Access-Control-Allow-Methods&#39;, &#39;OPTIONS, GET, PUT, POST, DELETE&#39;</code>。（也可使用cors封装库，此处省略）</p>\n<figure class=\"highlight js\"><figcaption><span>cors-srever.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">title</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">async</span> (ctx, next) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">    ctx.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class=\"string\">&#x27;OPTIONS, GET, PUT, POST, DELETE&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ctx.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/api/xml&#x27;</span>) &#123;</span><br><span class=\"line\">        ctx.<span class=\"property\">body</span> = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;</span>`</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>, <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;listen 8080 ...&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他方案\"><a href=\"#其他方案\" class=\"headerlink\" title=\"其他方案\"></a>其他方案</h2><p>其他方案本人用的比较少，此处不详细代码阐释。</p>\n<ul>\n<li><p>node中间件、nginx反向代理</p>\n<p>跨域限制的时候浏览器不能跨域访问服务器，node中间件和nginx反向代理，都是让请求发给代理服务器，静态页面面和代理服务器是同源的，然后代理服务器再向后端服务器发请求，服务器和服务器之间不存在同源限制</p>\n</li>\n<li><p>postmessage</p>\n<p>H5新增API，通过发送和接收API实现跨域通信。</p>\n<figure class=\"highlight html\"><figcaption><span>postMessage.html</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//这个只是给自己本地发送信息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> msg = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;昂三&#x27;</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">postMessage</span>(msg, <span class=\"string\">&#x27;http://127.0.0.1:5500&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">origin</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">source</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "跨域"
            ]
        },
        {
            "id": "http://victinsever.github.io/2022/11/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "http://victinsever.github.io/2022/11/22/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/http/%E8%B7%A8%E5%9F%9F%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "跨域的三种解决方案",
            "date_published": "2022-11-22T14:13:24.000Z",
            "content_html": "<p>[原文链接]([什么是跨域 &amp; 跨域的 3 种解决方案 - n031 - 博客园 (<span class=\"exturl\" data-url=\"aHR0cDovL2NuYmxvZ3MuY29t\">cnblogs.com</span>)](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjOn46dGV4dD0lRTQlQjglQkElRTQlQkElODYlRTglQTclQTMlRTUlODYlQjMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTglQjclQTglRTUlOUYlOUYlRTklOTclQUUlRTklQTIlOTglRUYlQkMlOENXM0M=\">https://www.cnblogs.com/n031/p/11828797.html#:~:text = 为了解决浏览器跨域问题，W3C</span> 提出了跨源资源共享方案，即 CORS (Cross-Origin Resource,Sharing)。 CORS 可以在不破坏即有规则的情况下，通过后端服务器实现 CORS 接口，就可以实现跨域通信。)</p>\n<h1 id=\"什么是跨域-跨域的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#什么是跨域-跨域的解决方案\">#</a> 什么是跨域 &amp; 跨域的解决方案</h1>\n<h2 id=\"跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#跨域问题\">#</a> 跨域问题</h2>\n<p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）端口号（port）</p>\n<p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 同源策略是浏览器<strong>安全的基石</strong></p>\n<p>同源策略会阻止一个域的 javascript 脚本和另外一个域的内容进行交互。例如办公内外网环境，当我们访问外网一个恶意网站的时候，恶意网站就会利用我们的主机向内网的 url 发送 ajax 请求，破坏或盗取数据。</p>\n<p>所谓跨域，就是引发的非同源限制，会导致：</p>\n<ul>\n<li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li>\n<li>无法接触非同源网页的 DOM</li>\n<li>无法向非同源地址发送 AJAX 请求，即 XHR 请求</li>\n</ul>\n<h2 id=\"跨域解决思路\"><a class=\"markdownIt-Anchor\" href=\"#跨域解决思路\">#</a> 跨域解决思路</h2>\n<ul>\n<li>思路 1 （避免同源限制）\n<ul>\n<li>客户端浏览器不做限制，在指定参数时不校验（不合理，因为不可能人人浏览器这样设置）</li>\n<li>不发出 XHR 请求，旧不会有跨域出现，通过 JSONP 的方案：即通过动态创建一个 script 标签然后通过标签发起请求</li>\n</ul>\n</li>\n<li>思路 2（跨域资源共享）\n<ul>\n<li>W3C 的跨域资源解决方案推荐：被调用的方加上字段，告诉浏览器该网站支持跨域，即设置请求头允许跨域</li>\n</ul>\n</li>\n<li>思路 3（隐藏跨域方案）\n<ul>\n<li>通过 Nginx 反向代理，在 a 域名里面的的请求地址使用反向代理指向 b 域名，让浏览器以为一直在访问 a 网站，不触发跨域限制</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jsonp\"><a class=\"markdownIt-Anchor\" href=\"#jsonp\">#</a> JSONP<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnA=\">#</span></h2>\n<ul>\n<li>普通请求值 XHR，希望得到服务端返回的 content-type 一般是 json</li>\n<li>JSONP 发出的是 script 请求，希望得到的返回是 js 脚本</li>\n</ul>\n<blockquote>\n<p>Content-Type 是指 http/https 发送信息至服务端时的内容编码类型，在 HTTP 协议消息头中，使用 Content-Type 来表示请求和响应中的媒体类型信息。它用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析并展示 html 等等。</p>\n<p><strong>并不是请求或响应独有的参数</strong></p>\n</blockquote>\n<h3 id=\"jsonp-原理\"><a class=\"markdownIt-Anchor\" href=\"#jsonp-原理\">#</a> JSONP 原理<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnAtJUU1JThFJTlGJUU3JTkwJTg2\">#</span></h3>\n<p>以 JQuery 为例，发送 ajax 请求的时候，设置 <code>dataType:&quot;jsonp&quot;</code> ，将使用 JSONP 方式调用函数，函数的 url 变为 <code>myurl?callback=e5bbttt</code>  的形式，e5bbttt 就是一个临时方法名，后端会根据 <code>callback</code>  的值返回一个 js 脚本，如</p>\n<figure class=\"highlight html\"><figcaption><span>jsonp</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">e5bbttt</span>(&#123;<span class=\"string\">&quot;a&quot;</span>:<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;b&quot;</span>:<span class=\"string\">&quot;bbb&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JQuery 会提前根据 ajax 中 success 的内容生成一个临时函数，名字就是 xxx</p>\n<figure class=\"highlight javascript\"><figcaption><span>jquery</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他省略</span></span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&quot;jsonp&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"property\">a</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"property\">b</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">jsonp</span>:<span class=\"string\">&quot;e5bbttt&quot;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JQuery 生成的临时函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">e5bbttt</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    ajaxObject.<span class=\"title function_\">success</span>(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务端返回给客户端的 <code>e5bbttt(&#123;&quot;a&quot;:&quot;aaa&quot;,&quot;b&quot;:&quot;bbb&quot;&#125;);</code> ，相当于调用立即（？）调用了 JQuery 生成的 <code>e5bbttt</code>  函数，用完这个函数就销毁了（？）</p>\n<p>JSONP 也算是一个约定俗成的 “协议”，callback 是约定俗成的作为定义临时函数名的参数。如果想自定义这个参数名，需要在 ajax 中用 jsonp 属性定义。</p>\n<h3 id=\"jsonp-的弊端\"><a class=\"markdownIt-Anchor\" href=\"#jsonp-的弊端\">#</a> JSONP 的弊端<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjanNvbnAtJUU3JTlBJTg0JUU1JUJDJThBJUU3JUFCJUFG\">#</span></h3>\n<ol>\n<li>需要服务器改动代码</li>\n<li>只支持 GET 请求</li>\n<li>发送的不是 xhr 请求</li>\n<li><strong>不安全</strong></li>\n</ol>\n<h2 id=\"后端解决跨域\"><a class=\"markdownIt-Anchor\" href=\"#后端解决跨域\">#</a> 后端解决跨域<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU4JUE3JUEzJUU1JTg2JUIzJUU4JUI3JUE4JUU1JTlGJTlG\">#</span></h2>\n<p>跟用户数据有关的就是动态请求，没有数据的是静态请求，比如 css js，so，HTTP 服务器（Apache、Nginx 等）至少做了两个作用</p>\n<ul>\n<li>HTTP 服务器，处理静态请求</li>\n<li>反向代理，负载均衡</li>\n</ul>\n<p>在服务器端解决跨域有 2 种解决思路</p>\n<ul>\n<li>在被调用后端应用解决：在响应头增加指定字段，告诉浏览器允许调用。这种解决方案的请求是直接从浏览器发送给后端服务器，在浏览器上会看到 <span class=\"exturl\" data-url=\"aHR0cDovL2IuY29t\">b.com</span> 的 url</li>\n<li>在前端服务器解决：这是隐藏跨域的解决方案。这种跨域请求不是直接从浏览器发送的，而是从中间的 http 服务器（前端应用所在服务器）转发过去的，在浏览器中看到的还是 <span class=\"exturl\" data-url=\"aHR0cDovL2EuY29t\">a.com</span> 的 url，所以不会认为是跨域。但是该到 <span class=\"exturl\" data-url=\"aHR0cDovL2IuY29t\">b.com</span> 的请求还是会到 <span class=\"exturl\" data-url=\"aHR0cDovL2IuY29t\">b.com</span></li>\n</ul>\n<h3 id=\"跨域原理及后端解决思路\"><a class=\"markdownIt-Anchor\" href=\"#跨域原理及后端解决思路\">#</a> 跨域原理及后端解决思路<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU4JUI3JUE4JUU1JTlGJTlGJUU1JThFJTlGJUU3JTkwJTg2JUU1JThGJThBJUU1JTkwJThFJUU3JUFCJUFGJUU4JUE3JUEzJUU1JTg2JUIzJUU2JTgwJTlEJUU4JUI3JUFG\">#</span></h3>\n<p>依据浏览器同源策略，非同源脚本不可操作其他源下面的对象。想要操作其他源下的对象就需要跨域。综上所述，在同源策略的限制下，非同源的网站之间不能发送 ajax 请求。如有需要，可通过降域或其他技术实现。</p>\n<p>为了解决浏览器跨域问题，W3C 提出了跨源资源共享方案，即 CORS (Cross-Origin Resource Sharing)。</p>\n<p>CORS 可以在不破坏即有规则的情况下，通过后端服务器实现 CORS 接口，就可以实现跨域通信。</p>\n<p>CORS 将请求分为两类：简单请求和非简单请求，分别对跨域通信提供了支持。</p>\n<h4 id=\"简单请求\"><a class=\"markdownIt-Anchor\" href=\"#简单请求\">#</a> 简单请求<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU3JUFFJTgwJUU1JThEJTk1JUU4JUFGJUI3JUU2JUIxJTgy\">#</span></h4>\n<ol>\n<li>在 CORS 出现前，发送 HTTP 请求时在头信息中不能包含任何自定义字段，且 HTTP 头信息不超过以下几个字段：\n<ol>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type 仅为这 3 种\n<ul>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text/plain</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>请求方法是 GET HEAD POST 且满足条件 1</li>\n</ol>\n<p>一个简单请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/test</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Accept</span><span class=\"punctuation\">: </span>*/*</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span><span class=\"punctuation\">: </span>gzip, deflate, sdch, br</span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://www.test.com</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.test.com</span><br></pre></td></tr></table></figure>\n<p>对于简单请求，CORS 的策略是请求时在请求头中增加一个 Origin 字段，表示请求发出的域。服务器收到请求后，根据该字段判断是否允许该请求访问。</p>\n<ul>\n<li>如果允许，则在 HTTP 头信息中添加 Access-Control-Allow-Origin 字段，并返回正确的结果</li>\n<li>如果不允许，则不添加 Access-Control-Allow-Origin 字段</li>\n</ul>\n<p>除了上面提到的 Access-Control-Allow-Origin，还有几个字段用于描述 CORS 返回结果</p>\n<ul>\n<li>Access-Control-Allow-Credentials：可选，用户是否可以发送、处理 cookie</li>\n<li>Access-Control-Expose-Headers：可选，可以让用户拿到的字段。有几个字段无论是否允许跨域都可以拿到的：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma</li>\n</ul>\n<h4 id=\"非简单请求\"><a class=\"markdownIt-Anchor\" href=\"#非简单请求\">#</a> 非简单请求<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU5JTlEJTlFJUU3JUFFJTgwJUU1JThEJTk1JUU4JUFGJUI3JUU2JUIxJTgy\">#</span></h4>\n<p>一般是发送 JSON 格式的 ajax 请求，或带有自定义头的请求</p>\n<p>对于非简单请求的跨源请求，浏览器会在真实请求发出前，增加一次 OPTION 请求，称为预检请求 (preflightrequest)。预检请求将真实请求的信息，包括请求方法、自定义头字段、源信息添加到 HTTP 头信息字段中，询问服务器是否允许这样的操作</p>\n<p>例如一个 GET 请求的预检请求，包含一个自定义参数 X-Custom-Header</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">OPTIONS</span> <span class=\"string\">/test</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"><span class=\"attribute\">Origin</span><span class=\"punctuation\">: </span>http://www.test.com</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Method</span><span class=\"punctuation\">: </span>GET // 请求使用的 HTTP 方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Headers</span><span class=\"punctuation\">: </span>X-Custom-Header // 请求中包含的自定义头字段</span><br><span class=\"line\"><span class=\"attribute\">Host</span><span class=\"punctuation\">: </span>www.test.com</span><br></pre></td></tr></table></figure>\n<p><em>服务器收到请求时，需要分别对 Origin、Access-Control-Request-Method、Access-Control-Request-Headers 进行验证，验证通过后，会在返回 HTTP 头信息中添加：</em></p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">HTTP/1.1</span> <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span><span class=\"punctuation\">: </span>http://www.test.com // 允许的域</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Methods</span><span class=\"punctuation\">: </span>GET, POST, PUT, DELETE // 允许的方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Headers</span><span class=\"punctuation\">: </span>X-Custom-Header // 允许的自定义字段</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span><span class=\"punctuation\">: </span>true // 是否允许用户发送、处理 cookie</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Max-Age</span><span class=\"punctuation\">: </span>172800 // 预检请求的有效期，单位为秒。有效期内，不需要发送预检请求，ps 48小时</span><br></pre></td></tr></table></figure>\n<p><em>当预检请求通过后，浏览器才会发送真实请求到服务器。这样就实现了跨域资源的请求访问。</em></p>\n<p>所以后端处理其实处理的就是这次预检请求</p>\n<h3 id=\"后端应用处理-filterhttpservletresponse-方法\"><a class=\"markdownIt-Anchor\" href=\"#后端应用处理-filterhttpservletresponse-方法\">#</a> 后端应用处理 - Filter&amp;HttpServletResponse 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU1JUJBJTk0JUU3JTk0JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tZmlsdGVyaHR0cHNlcnZsZXRyZXNwb25zZS0lRTYlOTYlQjklRTYlQjMlOTU=\">#</span></h3>\n<p>这种方法不会用到 Spring，对 Servlet 也可以使用</p>\n<p>在 web.xml 中配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>webFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.n031.filter.WebFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>webFliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>编写 java 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebFliter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">req</span> <span class=\"operator\">=</span> (HttpServletRequest)request;</span><br><span class=\"line\">        <span class=\"type\">HttpServletResponse</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> (HttpServletResponse) response;</span><br><span class=\"line\">        <span class=\"comment\">// 允许跨域的域名，设置*表示允许所有域名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">origin</span> <span class=\"operator\">=</span> req.getHeader(<span class=\"string\">&quot;Origin&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;abcdefg&quot;</span>.contains(origin)) &#123;  <span class=\"comment\">// 满足指定的条件</span></span><br><span class=\"line\">            res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;http://www.test.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许跨域的方法，可设置*表示所有</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;GET, POST, PUT, DELETE&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许的自定义字段</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> req.getHeader(<span class=\"string\">&quot;Access-Control-Request-Headers&quot;</span>); <span class=\"comment\">// 获取 request 发来的自定义字段</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, headers);</span><br><span class=\"line\">        <span class=\"comment\">// 或者</span></span><br><span class=\"line\">        <span class=\"comment\">// res.addHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;X-Custom-Header&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 预检请求的有效期，单位为秒。有效期内，不需要发送预检请求，ps 48小时</span></span><br><span class=\"line\">        res.addHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;172800&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 还可以有其他配置...</span></span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"后端应用处理-spring-方法\"><a class=\"markdownIt-Anchor\" href=\"#后端应用处理-spring-方法\">#</a> 后端应用处理 - Spring 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU1JUJBJTk0JUU3JTk0JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tc3ByaW5nLSVFNiU5NiVCOSVFNiVCMyU5NQ==\">#</span></h3>\n<p>Spring 解决跨域的方法很多，感觉就和茴字有五种写法一样。这里列举的并不全。</p>\n<p>先看下原理。说实话虽然搞不懂为什么这么做，但看了下这个类的源码确实是这么写的。</p>\n<p>本质都是构造 <code>CorsConfiguration</code>  然后委托给 <code>DefaultCorsProcessor</code>  实现（责任链模式，要学的东西好多啊…）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedOrigins;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedMethods;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; allowedHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; exposedHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean allowCredentials;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long maxAge;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>DefaultCorsProcessor</code>  的 <code>processRequest</code>  处理步骤如下（ <code>spring-web 5.1.8-RELEASE</code> ）</p>\n<ol>\n<li>判断是否是包含 Origin 字段，不包含就放行，否则继续判断</li>\n<li>判断 Response 的 Header 是否已经包含 Access-Control-Allow-Origin。如果包含，证明已经被处理过了，放行，否则继续判断</li>\n<li>判断是否同源，如果是则放行，否则继续判断</li>\n<li>到此步基本已经得出这是个跨域请求的结论。然后看配置了 CORS 规则\n<ul>\n<li>没有配置，且是预检请求，则拒绝该请求 *（说明该应用禁止跨域）*</li>\n<li>没有配置，且不是预检请求，跳过跨域处理 *（有可能导致返回数据被浏览器拦截）*</li>\n<li>配置了，则根据配置的规则（ <code>CorsConfiguration</code> ）决定是否放行</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"在-controller-上添加-crossorigin-注解\"><a class=\"markdownIt-Anchor\" href=\"#在-controller-上添加-crossorigin-注解\">#</a> 在 Controller 上添加 @CrossOrigin 注解<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTlDJUE4LWNvbnRyb2xsZXItJUU0JUI4JThBJUU2JUI3JUJCJUU1JThBJUEwLWNyb3Nzb3JpZ2luLSVFNiVCMyVBOCVFOCVBNyVBMw==\">#</span></h4>\n<p>这种方式适合只有一两个 rest 接口需要跨域或者没有网关的情况下，这种处理方式就非常简单，适合在原来基代码基础上修改，影响比较小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CrossOrigin(allowCredentials = &quot;true&quot;, allowedHeaders = &quot;*&quot;, methods = &#123;RequestMethod.GET, RequestMethod.POST, RequestMethod.DELETE&#125;, origins = &quot;*&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/abc&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">handler</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String json)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加-webmvcconfigurer-全局配置\"><a class=\"markdownIt-Anchor\" href=\"#增加-webmvcconfigurer-全局配置\">#</a> 增加 WebMvcConfigurer 全局配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JUEyJTlFJUU1JThBJUEwLXdlYm12Y2NvbmZpZ3VyZXItJUU1JTg1JUE4JUU1JUIxJTgwJUU5JTg1JThEJUU3JUJEJUFF\">#</span></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)<span class=\"comment\">// 允许跨域的访问路径</span></span><br><span class=\"line\">            .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)<span class=\"comment\">// 允许跨域访问的源</span></span><br><span class=\"line\">            .allowedMethods(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;OPTIONS&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>)<span class=\"comment\">// 允许请求方法</span></span><br><span class=\"line\">            .maxAge(<span class=\"number\">172800</span>)<span class=\"comment\">// 预检间隔时间</span></span><br><span class=\"line\">            .allowCredentials(<span class=\"literal\">true</span>);<span class=\"comment\">// 是否允许发送 cookie</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意由于 Java8 开始支持 default method，这个类从 spring 5.0 开始已经过期，未来这个方法将转移到 <code>WebMvcConfigurer</code>  接口中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"结合-filter-使用\"><a class=\"markdownIt-Anchor\" href=\"#结合-filter-使用\">#</a> 结合 Filter 使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU3JUJCJTkzJUU1JTkwJTg4LWZpbHRlci0lRTQlQkQlQkYlRTclOTQlQTg=\">#</span></h4>\n<p>其实和方法 2 类似，都是构造 <code>CorsConfiguration</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class=\"title function_\">corsFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否发送cookie</span></span><br><span class=\"line\">        config.setAllowCredentials(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许的网站域名，全允许则设为 *</span></span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">&quot;http://localhost:8088&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许 HEADER 或 METHOD ， * 为全部</span></span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>, config);</span><br><span class=\"line\">        FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">CorsFilter</span>(source));</span><br><span class=\"line\">        <span class=\"comment\">// 这个顺序很重要，为避免麻烦请设置在最前</span></span><br><span class=\"line\">        bean.setOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上这种方案如果微服务多的话，需要在每个服务的主类上都加上这么段代码，增加了维护量。</p>\n<p>这三种方案都是在 SpringBoot 的基础上实现的解决方案，在模块较多或者接口较多的情况下不易维护。</p>\n<p>既然 Spring Cloud 自带 Gateway，下面就讲讲使用 Gateway 的跨域解决方案。（Gateway 是取代不断跳票的 Zuul 的新一代网关）</p>\n<h4 id=\"在-gateway-增加-corsfilter-拦截器\"><a class=\"markdownIt-Anchor\" href=\"#在-gateway-增加-corsfilter-拦截器\">#</a> 在 Gateway 增加 CorsFilter 拦截器<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTlDJUE4LWdhdGV3YXktJUU1JUEyJTlFJUU1JThBJUEwLWNvcnNmaWx0ZXItJUU2JThCJUE2JUU2JTg4JUFBJUU1JTk5JUE4\">#</span></h4>\n<p><em><strong>4 5 方法未验证</strong></em></p>\n<p>这种方案跟方案三有些类似，只不过是放到了 Gateway 端，对于有多个微服务模块的情况下，就大大减少了 SpringBoot 模块端的代码量，让各个模块更集中精力做业务逻辑实现。这个方案只需要在 Gateway 里添加 Filter 代码类即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.cors.CorsUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.WebFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reactor.core.publisher.Mono;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CorsWebFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">ALL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MAX_AGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;18000&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Mono&lt;Void&gt; <span class=\"title function_\">filter</span><span class=\"params\">(ServerWebExchange ctx, WebFilterChain chain)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerHttpRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ctx.getRequest();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">path</span> <span class=\"operator\">=</span> request.getPath().value();</span><br><span class=\"line\">        <span class=\"type\">ServerHttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> ctx.getResponse();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;/favicon.ico&quot;</span>.equals(path)) &#123;</span><br><span class=\"line\">            response.setStatusCode(HttpStatus.OK);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Mono.empty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!CorsUtils.isCorsRequest((HttpServletRequest) request)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.filter(ctx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">HttpHeaders</span> <span class=\"variable\">requestHeaders</span> <span class=\"operator\">=</span> request.getHeaders();</span><br><span class=\"line\">        <span class=\"type\">HttpMethod</span> <span class=\"variable\">requestMethod</span> <span class=\"operator\">=</span> requestHeaders.getAccessControlRequestMethod();</span><br><span class=\"line\">        <span class=\"type\">HttpHeaders</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> response.getHeaders();</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, requestHeaders.getOrigin());</span><br><span class=\"line\">        headers.addAll(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, requestHeaders.getAccessControlRequestHeaders());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestMethod != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, requestMethod.name());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_EXPOSE_HEADERS, ALL);</span><br><span class=\"line\">        headers.add(HttpHeaders.ACCESS_CONTROL_MAX_AGE, MAX_AGE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getMethod() == HttpMethod.OPTIONS) &#123;</span><br><span class=\"line\">            response.setStatusCode(HttpStatus.OK);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Mono.empty();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.filter(ctx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-gateway-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#修改-gateway-配置文件\">#</a> 修改 Gateway 配置文件<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU0JUJGJUFFJUU2JTk0JUI5LWdhdGV3YXktJUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2\">#</span></h4>\n<p>在仔细阅读过 Gateway 的文档你就会发现，原来 CorsFilter 早已经在 Gateway 里了，不需要自己写代码实现，而且更灵活，修改配置文件即可，结合配置中心使用，可以实现动态修改。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">globalcors:</span></span><br><span class=\"line\">        <span class=\"attr\">corsConfigurations:</span></span><br><span class=\"line\">          <span class=\"string\">&#x27;[/**]&#x27;</span><span class=\"string\">:</span></span><br><span class=\"line\">            <span class=\"attr\">allowedOrigins:</span> <span class=\"string\">&quot;docs.spring.io&quot;</span></span><br><span class=\"line\">            <span class=\"attr\">allowedMethods:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"string\">GET</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"后端服务器处理-ngnix-方法\"><a class=\"markdownIt-Anchor\" href=\"#后端服务器处理-ngnix-方法\">#</a> 后端服务器处理 - Ngnix 方法<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTkwJThFJUU3JUFCJUFGJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUU1JUE0JTg0JUU3JTkwJTg2LS0tbmduaXgtJUU2JTk2JUI5JUU2JUIzJTk1\">#</span></h3>\n<p>这里的 Nginx 尽做反向代理功能，浏览器访问页面在 <span class=\"exturl\" data-url=\"aHR0cDovL2EuY29t\">a.com</span> 的 Nginx 上，ajax 请求接口是 <span class=\"exturl\" data-url=\"aHR0cDovL2IuY29t\">b.com</span>，所以浏览器认为是跨域</p>\n<p>Nginx 在 nginx.conf 上配（vhost 是约定做法，这样做不修改主文件）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include vhost/*.config;</span><br></pre></td></tr></table></figure>\n<p>创建 cors.conf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80; // 监听80端口</span><br><span class=\"line\">    server_name b.com; // 监听向 b.com 发送的请求</span><br><span class=\"line\">    location /&#123;</span><br><span class=\"line\">        proxy_pass http://ser432ver.53253bb.com:8080; // 转发到哪里</span><br><span class=\"line\"></span><br><span class=\"line\">        // Filter实现的功能在Nginx上再实现一遍</span><br><span class=\"line\"></span><br><span class=\"line\">        add_header Access-Control-Allow-Origin $http_origin; // $http_ 可以获取请求中相应的 header 参数</span><br><span class=\"line\">        add_header Access-Control-Allow-Method *;</span><br><span class=\"line\">        add_header Access-Control-Allow-Headers X-Custom-Header;</span><br><span class=\"line\">        // 或者</span><br><span class=\"line\">        // add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class=\"line\">        add_header Access-Control-Allow-Credentials true;</span><br><span class=\"line\">        add_header Access-Max-age 172800;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 直接处理预检命令，if 后要带空格</span><br><span class=\"line\">        if ($request_method = OPTIONS) &#123;</span><br><span class=\"line\">            return 200;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"前端服务器解决跨域\"><a class=\"markdownIt-Anchor\" href=\"#前端服务器解决跨域\">#</a> 前端服务器解决跨域<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JTg5JThEJUU3JUFCJUFGJUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4JUU4JUE3JUEzJUU1JTg2JUIzJUU4JUI3JUE4JUU1JTlGJTlG\">#</span></h2>\n<p>但其实大部分情况下，我们会把前端应用和请求转发放在同一台 Nginx 上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80; // 监听80端口</span><br><span class=\"line\">    server_name a.com; // 监听向 a.com 发送的请求</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    locltion /ajaxserver &#123;</span><br><span class=\"line\">        proxy_pass http://ser432ver.53253bb.com:8080; // 后端地址</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样实质是隐藏跨域，让浏览器认为没有访问其他域就不会发生跨域。</p>\n<p>前端代码需要在每个 ajax 请求前都要加上 <code>/ajaxserver</code></p>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbjAzMS9wLzExODI4Nzk3Lmh0bWwjJUU1JThGJTgyJUU4JTgwJTgzJUU4JUI1JTg0JUU2JTk2JTk5\">#</span></h2>\n<blockquote>\n<p>ajax 跨域完全讲解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzk0Nw==\">https://www.imooc.com/learn/947</span></p>\n<p>SpringBoot 使用 CORS 解决跨域请求问题</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vNzc4OElUL3AvMTA2OTMwNzMuaHRtbA==\">https://www.cnblogs.com/7788IT/p/10693073.html</span></p>\n<p>Spring MVC 之 @RequestParam @RequestBody @RequestHeader 等详解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bW1lclN1blN0YXJ0L2FydGljbGUvZGV0YWlscy83ODY3Njc4MQ==\">https://blog.csdn.net/summerSunStart/article/details/78676781</span></p>\n<p>你不知道的「跨域 CORS」</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hYmI1ZjZiZjkyYzM=\">https://www.jianshu.com/p/abb5f6bf92c3</span></p>\n<p>关于跨域问题和安全性的一点理解</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pheXRhbGVudC9hcnRpY2xlL2RldGFpbHMvNTIyMTM1NzY=\">https://blog.csdn.net/jaytalent/article/details/52213576</span></p>\n<p>浅谈跨域威胁与安全</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzIwODY3Mi5odG1s\">https://www.freebuf.com/articles/web/208672.html</span></p>\n<p>cors 跨域中关于 access-control-allow-headers 导致的错误</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jZWNiNzNiMjZhMTE=\">https://www.jianshu.com/p/cecb73b26a11</span></p>\n<p>什么是跨域？跨域解决方法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTI4MTc5L2FydGljbGUvZGV0YWlscy84NDk1NjU1Mg==\">https://blog.csdn.net/qq_38128179/article/details/84956552</span></p>\n<p>Spring Cloud 配置跨域访问的五种方案？你用的是哪一种呢？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzE4ODI5Ng==\">https://segmentfault.com/a/1190000017188296</span></p>\n<p>servlet 跨域请求</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0MTM1NjE1L2FydGljbGUvZGV0YWlscy84MjkwMDc4Ng==\">https://blog.csdn.net/qq_34135615/article/details/82900786</span></p>\n<p>跨域 (CORS) 解决方案中，为什么 Access-Control-Allow-Methods 不起作用？</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNTA2NzU1Mi9hLTEwMjAwMDAwMDUwNjc4MjI=\">https://segmentfault.com/q/1010000005067552/a-1020000005067822</span></p>\n</blockquote>\n",
            "tags": [
                "跨域"
            ]
        }
    ]
}