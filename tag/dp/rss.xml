<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>眸光似星辰 • Posts by &#34;dp&#34; tag</title>
        <link>http://victinSever.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 12 Nov 2022 12:29:03 +0800</pubDate>
        <lastBuildDate>Sat, 12 Nov 2022 12:29:03 +0800</lastBuildDate>
        <category>react</category>
        <category>react-redux</category>
        <category>redux</category>
        <category>JavaScript</category>
        <category>this</category>
        <category>继承</category>
        <category>原型</category>
        <category>原型链</category>
        <category>面试题</category>
        <category>cache</category>
        <category>JSON</category>
        <category>canvas</category>
        <category>vue</category>
        <category>react-router-dom</category>
        <category>vue-router</category>
        <category>Vue</category>
        <category>Vuex</category>
        <category>Vue-router</category>
        <category>ElementUI</category>
        <category>axios</category>
        <category>sass</category>
        <category>NProgress</category>
        <category>Nginx</category>
        <category>跨域</category>
        <category>WebSocket</category>
        <category>hexo</category>
        <category>Typora</category>
        <category>Svelet</category>
        <category>Solid.js</category>
        <category>MVC</category>
        <category>Dijkstra</category>
        <category>JDBC</category>
        <category>密码学</category>
        <category>凯斯密码</category>
        <category>维吉尼亚密码</category>
        <category>dp</category>
        <item>
            <guid isPermalink="true">http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/</guid>
            <title>动态规划五部曲-爬楼梯问题</title>
            <link>http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/</link>
            <category>dp</category>
            <pubDate>Sat, 12 Nov 2022 12:29:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;动态规划基本分析方法爬楼梯问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态规划基本分析方法爬楼梯问题&#34;&gt;#&lt;/a&gt; 动态规划基本分析方法（爬楼梯问题）&lt;/h1&gt;
&lt;h2 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h2&gt;
&lt;p&gt;假设你正在爬楼梯。需要  &lt;code&gt;n&lt;/code&gt;  阶你才能到达楼顶。&lt;/p&gt;
&lt;p&gt;每次你可以爬  &lt;code&gt;1&lt;/code&gt;  或  &lt;code&gt;2&lt;/code&gt;  个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p&gt;
&lt;h2 id=&#34;动态规划五部曲&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态规划五部曲&#34;&gt;#&lt;/a&gt; 动态规划五部曲&lt;/h2&gt;
&lt;p&gt;动态规划是将复杂问题分解成多个有联系的子问题，分而治之，然后从子问题的解中还原原来问题的解。&lt;/p&gt;
&lt;p&gt;其中最重要的就是一个递推策略，如何将两个甚至多个子问题相关联，然后推导出得出另一个解，核心就在于 dp 数组及其实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1，&lt;strong&gt;确定 dp 数组以及下标的含义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一个 dp 一维数组记录不同楼层的状态：dp [i]：爬到第 i 层的方法数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2，&lt;strong&gt;确定递推关系式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要推出 dp [i]，核心 dp 如何定义的。&lt;/p&gt;
&lt;p&gt;题目给出上楼梯有两种方法，那么到达第 i 层的情况只能是两种方法，一种是从 i-1 层跳一步到达，第二种是从第 i-2 层跳两步到达。&lt;/p&gt;
&lt;p&gt;因此根据上述判断，到达 i-1 层有 &lt;code&gt;dp[i-1]&lt;/code&gt;  种方法，到达 i-2 层有 &lt;code&gt;dp[i-2]&lt;/code&gt;  种方法，那么到达第 i 层的方法数 dp [i] 则就是下两层的方法之和。&lt;/p&gt;
&lt;p&gt;可以得到 dp 递推式： &lt;code&gt;dp[i] = dp[i-1] + dp[i-2]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3，&lt;strong&gt;确定递推顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由递推公式结合题意，这道题自然从底层向高层递推，而最后的解则是我们需要的最终解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4，&lt;strong&gt;dp 数组的初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了递推式，需要考虑 dp 的初始化问题。&lt;/p&gt;
&lt;p&gt;我们可以从最开始手动推导，上第一层只能有一种方法，就是跳 1 层，上第二层有两种方法，连续跳两个一层或者跳一个两层。&lt;/p&gt;
&lt;p&gt;于是我们可以确定 &lt;code&gt;dp[1]=1&lt;/code&gt; ， &lt;code&gt;dp[2]=2&lt;/code&gt;  作为初始化。&lt;/p&gt;
&lt;p&gt;但是，如果考虑将 0 层有几种方法，当然是 0 种，因为根本没有方法上楼，但如果用 0 层作为初始化递推推导，会导致题目中跳两层的策略是得不到执行的，因此一般不将 0 层作为初始化。&lt;/p&gt;
&lt;p&gt;因此，结论是将 &lt;code&gt;dp[1]=1&lt;/code&gt; ， &lt;code&gt;dp[2]=2&lt;/code&gt;  初始化，而从 &lt;code&gt;i=3&lt;/code&gt;  开始推导。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5，&lt;strong&gt;手动推导验证 &lt;code&gt;dp&lt;/code&gt;  数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例推导 &lt;code&gt;dp&lt;/code&gt;  数组，验证想法思路，如此处是将 i 设置为 5 推导&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../image/image-20221112130430217.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ts代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ts代码&#34;&gt;#&lt;/a&gt; TS 代码&lt;/h2&gt;
&lt;p&gt;由五部曲推导结束后，可以很自然得出代码，这个题目是简单动态规划类型，因此，代码很简单。&lt;/p&gt;
&lt;p&gt;时间复杂度：O (n)&lt;/p&gt;
&lt;p&gt;空间复杂度：O (n)&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption&gt;&lt;span&gt;爬楼梯源码&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 03-爬楼梯&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@date&lt;/span&gt; 2020-11-12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 核心DP：dp[i] = dp[i - 1] + dp[i - 2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; n 楼梯数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;climbStairs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;dp&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;[] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;fill&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[i] = dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + dp[i - &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[n]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;稍微简化一下空间复杂度，即将 &lt;code&gt;dp&lt;/code&gt;  数组舍去或者只保留每次的递推结果，而过程不保留：&lt;/p&gt;
&lt;p&gt;时间复杂度：O (n)&lt;/p&gt;
&lt;p&gt;空间复杂度：O (1)&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption&gt;&lt;span&gt;爬楼梯源码&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;climbStairs2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;n: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(n &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;dp&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;[] = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dp[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; pre = dp[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = pre&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;题目拓展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#题目拓展&#34;&gt;#&lt;/a&gt; 题目拓展&lt;/h2&gt;
&lt;p&gt;假设你正在爬楼梯。需要  &lt;code&gt;n&lt;/code&gt;  阶你才能到达楼顶。&lt;/p&gt;
&lt;p&gt;每次你可以爬  &lt;code&gt;1&lt;/code&gt;  个， &lt;code&gt;2&lt;/code&gt;  个直到 &lt;code&gt;m&lt;/code&gt;  个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p&gt;
&lt;h3 id=&#34;c代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c代码实现&#34;&gt;#&lt;/a&gt; C++ 代码实现&lt;/h3&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;figcaption&gt;&lt;span&gt;爬楼梯进阶代码实现&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;climbStairs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;vector&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&#34;title&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(n + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt;= m; j++) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 把m换成2，就可以解决最开始爬楼梯这道题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i - j &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) dp[i] += dp[i - j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述过程，将从 1 到 m 的方法遍历一次，即可得到解，当 &lt;code&gt;m = 2&lt;/code&gt;  时，该算法就可以解决初始题目。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;通过这五部曲可以很清楚了解一般动态规划的解题步骤，虽然这个题目很简单，但是涵盖了动态规划的基本策略思想，即通过联系的方法分而治之，并且具有一定的记忆功能。&lt;/p&gt;
&lt;p&gt;简单题感觉可以打开思路，了解题目的本真，更能理解算法实现的基础思路，因此在刷题的时候也不要忽略了简单类型的总结和思考。&lt;/p&gt;
&lt;p&gt;只有如此，才能触类旁通，将算法思想牢记心中！！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;欢迎大家留言哦，有问题一起讨论哈！&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
