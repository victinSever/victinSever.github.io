{
    "version": "https://jsonfeed.org/version/1",
    "title": "眸光似星辰 • All posts by \"dp\" tag",
    "description": "",
    "home_page_url": "http://victinSever.github.io",
    "items": [
        {
            "id": "http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "url": "http://victinsever.github.io/2022/11/12/%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%BA%94%E9%83%A8%E6%9B%B2-%E7%88%AC%E6%A5%BC%E6%A2%AF%E9%97%AE%E9%A2%98/",
            "title": "动态规划五部曲-爬楼梯问题",
            "date_published": "2022-11-12T04:29:03.000Z",
            "content_html": "<h1 id=\"动态规划基本分析方法爬楼梯问题\"><a class=\"markdownIt-Anchor\" href=\"#动态规划基本分析方法爬楼梯问题\">#</a> 动态规划基本分析方法（爬楼梯问题）</h1>\n<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<p>假设你正在爬楼梯。需要  <code>n</code>  阶你才能到达楼顶。</p>\n<p>每次你可以爬  <code>1</code>  或  <code>2</code>  个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<h2 id=\"动态规划五部曲\"><a class=\"markdownIt-Anchor\" href=\"#动态规划五部曲\">#</a> 动态规划五部曲</h2>\n<p>动态规划是将复杂问题分解成多个有联系的子问题，分而治之，然后从子问题的解中还原原来问题的解。</p>\n<p>其中最重要的就是一个递推策略，如何将两个甚至多个子问题相关联，然后推导出得出另一个解，核心就在于 dp 数组及其实现。</p>\n<ul>\n<li>\n<p>1，<strong>确定 dp 数组以及下标的含义</strong></p>\n<p>定义一个 dp 一维数组记录不同楼层的状态：dp [i]：爬到第 i 层的方法数</p>\n</li>\n<li>\n<p>2，<strong>确定递推关系式</strong></p>\n<p>要推出 dp [i]，核心 dp 如何定义的。</p>\n<p>题目给出上楼梯有两种方法，那么到达第 i 层的情况只能是两种方法，一种是从 i-1 层跳一步到达，第二种是从第 i-2 层跳两步到达。</p>\n<p>因此根据上述判断，到达 i-1 层有 <code>dp[i-1]</code>  种方法，到达 i-2 层有 <code>dp[i-2]</code>  种方法，那么到达第 i 层的方法数 dp [i] 则就是下两层的方法之和。</p>\n<p>可以得到 dp 递推式： <code>dp[i] = dp[i-1] + dp[i-2]</code></p>\n</li>\n<li>\n<p>3，<strong>确定递推顺序</strong></p>\n<p>由递推公式结合题意，这道题自然从底层向高层递推，而最后的解则是我们需要的最终解。</p>\n</li>\n<li>\n<p>4，<strong>dp 数组的初始化</strong></p>\n<p>有了递推式，需要考虑 dp 的初始化问题。</p>\n<p>我们可以从最开始手动推导，上第一层只能有一种方法，就是跳 1 层，上第二层有两种方法，连续跳两个一层或者跳一个两层。</p>\n<p>于是我们可以确定 <code>dp[1]=1</code> ， <code>dp[2]=2</code>  作为初始化。</p>\n<p>但是，如果考虑将 0 层有几种方法，当然是 0 种，因为根本没有方法上楼，但如果用 0 层作为初始化递推推导，会导致题目中跳两层的策略是得不到执行的，因此一般不将 0 层作为初始化。</p>\n<p>因此，结论是将 <code>dp[1]=1</code> ， <code>dp[2]=2</code>  初始化，而从 <code>i=3</code>  开始推导。</p>\n</li>\n<li>\n<p>5，<strong>手动推导验证 <code>dp</code>  数组</strong></p>\n<p>举例推导 <code>dp</code>  数组，验证想法思路，如此处是将 i 设置为 5 推导</p>\n<p><img data-src=\"../../../image/image-20221112130430217.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"ts代码\"><a class=\"markdownIt-Anchor\" href=\"#ts代码\">#</a> TS 代码</h2>\n<p>由五部曲推导结束后，可以很自然得出代码，这个题目是简单动态规划类型，因此，代码很简单。</p>\n<p>时间复杂度：O (n)</p>\n<p>空间复杂度：O (n)</p>\n<figure class=\"highlight typescript\"><figcaption><span>爬楼梯源码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 03-爬楼梯</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020-11-12</span></span><br><span class=\"line\"><span class=\"comment\"> * 核心DP：dp[i] = dp[i - 1] + dp[i - 2]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> n 楼梯数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">climbStairs</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">dp</span>: <span class=\"built_in\">number</span>[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>, dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>稍微简化一下空间复杂度，即将 <code>dp</code>  数组舍去或者只保留每次的递推结果，而过程不保留：</p>\n<p>时间复杂度：O (n)</p>\n<p>空间复杂度：O (1)</p>\n<figure class=\"highlight typescript\"><figcaption><span>爬楼梯源码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">climbStairs2</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">dp</span>: <span class=\"built_in\">number</span>[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>, dp[<span class=\"number\">2</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> pre = dp[<span class=\"number\">1</span>] + dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">        dp[<span class=\"number\">2</span>] = pre</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"题目拓展\"><a class=\"markdownIt-Anchor\" href=\"#题目拓展\">#</a> 题目拓展</h2>\n<p>假设你正在爬楼梯。需要  <code>n</code>  阶你才能到达楼顶。</p>\n<p>每次你可以爬  <code>1</code>  个， <code>2</code>  个直到 <code>m</code>  个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<h3 id=\"c代码实现\"><a class=\"markdownIt-Anchor\" href=\"#c代码实现\">#</a> C++ 代码实现</h3>\n<figure class=\"highlight c++\"><figcaption><span>爬楼梯进阶代码实现</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123; <span class=\"comment\">// 把m换成2，就可以解决最开始爬楼梯这道题</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i - j &gt;= <span class=\"number\">0</span>) dp[i] += dp[i - j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上述过程，将从 1 到 m 的方法遍历一次，即可得到解，当 <code>m = 2</code>  时，该算法就可以解决初始题目。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>通过这五部曲可以很清楚了解一般动态规划的解题步骤，虽然这个题目很简单，但是涵盖了动态规划的基本策略思想，即通过联系的方法分而治之，并且具有一定的记忆功能。</p>\n<p>简单题感觉可以打开思路，了解题目的本真，更能理解算法实现的基础思路，因此在刷题的时候也不要忽略了简单类型的总结和思考。</p>\n<p>只有如此，才能触类旁通，将算法思想牢记心中！！</p>\n<p><em>欢迎大家留言哦，有问题一起讨论哈！</em></p>\n",
            "tags": [
                "dp"
            ]
        }
    ]
}